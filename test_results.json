[
    {
        "NL": "Find the average time spent on the website by users who clicked on a push notification and completed a survey.",
        "Query": "SELECT AVG(time_spent_seconds) FROM events WHERE push_notification_clicked = true AND survey_completed = true;",
        "GeneratedQuery": "SELECT AVG(DATEDIFF('date', ' notification_click_date')) \nFROM users \nJOIN orders \nON users.id = orders.user\\_id \nWHERE orders.amount IS NOT NULL;",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "Get the count of wishlist items for each user and sort them in descending order.",
        "Query": "SELECT fk_user_id, COUNT(*) as wishlist_count FROM wishlist GROUP BY fk_user_id ORDER BY wishlist_count DESC",
        "GeneratedQuery": "SELECT u.id, u.name, COUNT(w.product\\_id) as wishlist\\_count\nFROM users u\nLEFT JOIN (\n    SELECT user\\_id, product\\_id\n    FROM wishlists\n) w ON u.id = w.user\\_id\nGROUP BY u.id\nORDER BY wishlist\\_count DESC;\n\nNote: There is no \"wishlists\" table provided in the schema. You need to have a",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "Find the products in the cart that have a promotional discounted price less than $50, along with the customer's loyalty program tier level and the customer's accumulated loyalty points balance.",
        "Query": "SELECT T1.product_display_name, T3.accumulated_loyalty_points_balance, T3.loyalty_program_tier_level FROM products AS T1 INNER JOIN cart AS T2 ON T1.unique_product_identifier = T2.fk_product_id INNER JOIN customers_loyalty_program AS T3 ON T2.fk_user_id = T3.associated_customer_reference_id WHERE T1.promotional_discounted_price < 50",
        "GeneratedQuery": "SELECT p.id, p.name, p.price, u.loyalty\\_tier, u.loyalty\\_points\nFROM products p\nJOIN orders o ON p.id = o.product\\_id\nJOIN users u ON o.user\\_id = u.id\nWHERE p.price < 50 AND p.price < p.original\\_price;",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "What is the total discount amount redeemed by customers who have participated in exclusive beta testing and have a loyalty membership unique identifier greater than 1000?",
        "Query": "SELECT SUM(total_discount_amount_redeemed) FROM customers_loyalty_program WHERE participation_in_exclusive_beta_testing = TRUE AND loyalty_membership_unique_identifier > 1000",
        "GeneratedQuery": "SELECT SUM(amount) as total\\_discount\nFROM orders\nWHERE user\\_id IN (\n    SELECT id\n    FROM users\n    WHERE email LIKE '%beta%' AND loyalty\\_id > 1000\n)",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "Retrieve the total amount of all orders that contain products from the cart of user with ID 123 and have a shipping date after January 1, 2023.",
        "Query": "SELECT SUM(o.total_amount) FROM orders o JOIN cart c ON o.person_customer_id = c.fk_user_id WHERE c.fk_user_id = 123 AND o.shipping_date > '2023-01-01'",
        "GeneratedQuery": "SELECT SUM(amount)\nFROM orders\nWHERE user\\_id = 123 AND date > '2023-01-01';",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "What are the campaign names of the campaigns that have generated more than $1000 in revenue and have a cost per acquisition of less than $10?",
        "Query": "SELECT campaign_name FROM campaigns WHERE revenue_generated > 1000 AND cost_per_acquisition < 10",
        "GeneratedQuery": "I'm sorry for the confusion, but there is no \"campaigns\" table provided in the schema. I cannot generate a valid SQL statement without the necessary table or relevant columns. Could you please verify the table and column names in your query?",
        "ExecutionStatus": "Error",
        "ErrorMessage": "Invalid SQL syntax"
    },
    {
        "NL": "Show the average rating of reviews submitted by customers who are verified and have active subscriptions, and the number of helpful votes they received.",
        "Query": "SELECT AVG(T2.submitted_review_star_rating), AVG(T2.number_of_helpful_votes_received) FROM customerinfo AS T1 INNER JOIN product_reviews_and_ratings AS T2 ON T1.person_customer_id = T2.reviewing_customer_identifier WHERE T1.account_has_active_subscription = TRUE AND T2.verification_status_of_reviewer = TRUE",
        "GeneratedQuery": "I'm sorry for the confusion, but the schema provided doesn't include any table or column related to reviews, ratings, or subscriptions. Therefore, I can't generate an SQL statement that would accurately represent the given natural language query.\n\nIf you could provide more details or adjust the schema accordingly, I would be happy to help you generate the SQL statement.",
        "ExecutionStatus": "Error",
        "ErrorMessage": "Invalid SQL syntax"
    },
    {
        "NL": "Find the product name and average review rating for products with more than 100 reviews",
        "Query": "SELECT p.product_display_name, AVG(prar.submitted_review_star_rating) FROM products p JOIN product_reviews_and_ratings prar ON p.unique_product_identifier = prar.referenced_product_identifier GROUP BY p.product_display_name HAVING COUNT(prar.review_unique_identifier) > 100",
        "GeneratedQuery": "SELECT products.name, AVG(reviews.rating)\nFROM products\nJOIN orders ON products.id = orders.product\\_id\nJOIN reviews ON orders.id = reviews.order\\_id\nGROUP BY products.name\nHAVING COUNT(reviews.id) > 100;",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "Find the total number of orders placed by premium customers who have purchased products with an average supplier rating greater than 4 and have a total number of verified reviews greater than 1000, along with the total amount spent by these customers, the average rating given by them, and the total number of helpful votes received by their reviews.",
        "Query": "SELECT COUNT(DISTINCT o.order_id), SUM(o.total_amount), AVG(prar.submitted_review_star_rating), SUM(prar.number_of_helpful_votes_received) FROM orders o JOIN customerinfo c ON o.person_customer_id = c.person_customer_id JOIN product_reviews_and_ratings prar ON prar.referenced_product_identifier = (SELECT p.unique_product_identifier FROM products p JOIN suppliers s ON p.associated_supplier_reference_id = s.supplier_unique_identifier WHERE s.average_supplier_rating > 4 AND p.total_number_of_verified_reviews > 1000) WHERE c.person_is_premium = TRUE",
        "GeneratedQuery": "WITH premium\\_users AS (\nSELECT u.id\nFROM users u\nWHERE u.age >= 60\n),\npurchased\\_products AS (\nSELECT op.user\\_id\nFROM orders o\nJOIN order\\_products op ON o.id = op.order\\_id\nJOIN products p ON op.product\\_id = p.id\nJOIN suppliers s ON p.supplier\\_id = s.id\nWHERE s.rating >",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "List the orders with a discount applied greater than 10% in any currency.",
        "Query": "SELECT order_id, discount_applied, total_amount, created_at FROM orders WHERE discount_applied > 0.1 * total_amount;",
        "GeneratedQuery": "SELECT * FROM orders \nWHERE amount < 0.9 * (SELECT price FROM products WHERE id = orders.product_id);",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "Find the total number of products and the total price for each cart associated with a specific user.",
        "Query": "SELECT COUNT(*) AS total_number_of_products, SUM(total_price) AS total_price FROM cart GROUP BY fk_user_id;",
        "GeneratedQuery": "SELECT o.user\\_id, SUM(p.price) as total\\_price, COUNT(p.id) as total\\_products\nFROM orders o\nJOIN products p ON o.id = p.order\\_id\nWHERE o.user\\_id = [specific user id]\nGROUP BY o.user\\_id;",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "List all items in the wishlist where the expected purchase date is within the next 30 days and the priority level is 'high'.",
        "Query": "SELECT * FROM wishlist WHERE expected_purchase_date <= CURRENT_DATE + INTERVAL '30 days' AND priority_level = 'high';",
        "GeneratedQuery": "SELECT products.name, products.price\nFROM products\nJOIN wishlist ON products.id = wishlist.product\\_id\nWHERE wishlist.expected\\_date <= DATE\\_ADD(CURRENT\\_DATE, INTERVAL 30 DAY) AND wishlist.priority = 'high';",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "Find the total number of products supplied by each supplier, along with the average supplier rating and the number of inventories associated with each supplier, ordered by the total number of products supplied in descending order.",
        "Query": "SELECT supplier_unique_identifier, total_number_of_products_supplied, average_supplier_rating, COUNT(inventory.id) AS inventory_count FROM suppliers LEFT JOIN inventory ON suppliers.supplier_unique_identifier = inventory.supplier_id GROUP BY supplier_unique_identifier, total_number_of_products_supplied, average_supplier_rating ORDER BY total_number_of_products_supplied DESC;",
        "GeneratedQuery": "SELECT \n    suppliers.id, \n    SUM(orders.amount) AS total\\_products\\_supplied,\n    AVG(ratings.rating) AS average\\_supplier\\_rating,\n    COUNT(products.id) AS number\\_of\\_inventories\nFROM\n    orders\nJOIN\n    users AS suppliers ON orders.user\\_id = suppliers.id\nLEFT JOIN\n    (SELECT \n        product\\_id,",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "Retrieve the total time spent and the average scroll depth percentage for events where the event type is 'purchase' and the device platform is 'mobile'.",
        "Query": "SELECT SUM(time_spent_seconds) AS total_time_spent, AVG(scroll_depth_percentage) AS average_scroll_depth FROM events WHERE event_type = 'purchase' AND device_platform = 'mobile';",
        "GeneratedQuery": "SELECT SUM(duration) as total\\_time\\_spent, AVG(scroll\\_depth\\_percentage) as avg\\_scroll\\_depth\\_percentage\nFROM events\nWHERE event\\_type = 'purchase' AND device\\_platform = 'mobile';",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "Find all reviews of products that have been purchased more than 5 times, with the customer's review submission date and the total number of helpful votes received.",
        "Query": "SELECT T1.customer_review_submission_date, T1.number_of_helpful_votes_received FROM product_reviews_and_ratings AS T1 INNER JOIN transactions_and_payments AS T2 ON T1.referenced_product_identifier = T2.linked_order_reference_identifier WHERE T1.previous_product_purchases_count > 5",
        "GeneratedQuery": "SELECT p.name, r.review\\_date, r.helpful\\_votes\nFROM reviews r\nJOIN orders o ON r.order\\_id = o.id\nJOIN products p ON o.product\\_id = p.id\nGROUP BY p.name, r.review\\_date, r.helpful\\_votes\nHAVING COUNT(o.id) > 5;",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "Find the estimated delivery date and shipping cost for orders where the event type is 'order_placed' and the shipping status is 'shipped'.",
        "Query": "SELECT s.estimated_delivery, s.shipping_cost FROM shipping s JOIN events e ON s.fk_order_id = e.order_id WHERE e.event_type = 'order_placed' AND s.shipping_status = 'shipped';",
        "GeneratedQuery": "SELECT \n    orders.id AS order\\_id,\n    orders.date + INTERVAL '1 day' * products.stock AS estimated\\_delivery\\_date,\n    products.price AS shipping\\_cost\nFROM \n    orders\nJOIN \n    users ON orders.user\\_id = users.id\nJOIN \n    products ON users.id = products.id\nWHERE \n    orders.event_type = 'order\\_pl",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "Analyze the total number of clicks and the average time spent by customers from the United States who visited product pages of 'Electronics' category products and view those who spent the most time on the site, including product names and their respective suppliers.",
        "Query": "SELECT p.product_display_name, s.official_supplier_business_name, SUM(e.click_count) AS total_clicks, AVG(e.time_spent_seconds) AS average_time_spent FROM events e JOIN products p ON e.order_item_id = p.unique_product_identifier JOIN suppliers s ON p.associated_supplier_reference_id = s.supplier_unique_identifier WHERE e.location_country = 'United States' AND p.product_category_primary = 'Electronics' GROUP BY p.product_display_name, s.official_supplier_business_name ORDER BY average_time_spent DESC;",
        "GeneratedQuery": "SELECT p.name AS product\\_name, \n       supplier.name AS supplier\\_name,\n       SUM(o.amount) AS total\\_clicks,\n       AVG(o.date - u.date) AS avg\\_time\\_spent\nFROM users u\nJOIN orders o ON u.id = o.user\\_id\nJOIN products p ON o.product\\_id = p.id\nJOIN (SELECT id, name FROM products",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "List all the campaigns with their corresponding campaign status, start date, end date and total revenue generated, and also list the total quantity of products in the cart for each campaign",
        "Query": "SELECT c.campaign_name, c.campaign_status, c.start_date, c.end_date, c.revenue_generated, SUM(ct.quantity) AS total_quantity FROM campaigns c LEFT JOIN cart ct ON c.campaign_id = ct.fk_product_id GROUP BY c.campaign_name, c.campaign_status, c.start_date, c.end_date, c.revenue_generated",
        "GeneratedQuery": "SELECT o.campaign\\_id AS campaign\\_id,\nc.status AS campaign\\_status,\nc.start\\_date AS campaign\\_start\\_date,\nc.end\\_date AS campaign\\_end\\_date,\nSUM(o.amount) AS total\\_revenue,\nSUM(p.quantity) AS total\\_quantity\nFROM orders o\nJOIN campaigns c ON o.campaign\\_id = c.id\nJOIN order",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "List the anniversary_reward_voucher_status of customers and their corresponding shipping_status for orders with fk_order_id = 67890.",
        "Query": "SELECT T2.anniversary_reward_voucher_status, T1.shipping_status FROM shipping AS T1 INNER JOIN customers_loyalty_program AS T2 ON T1.fk_order_id = T2.associated_customer_reference_id WHERE T1.fk_order_id = 67890",
        "GeneratedQuery": "SELECT u.name AS customer\\_name, o.anniversary\\_reward\\_voucher\\_status, o.shipping\\_status\nFROM users u\nJOIN orders o ON u.id = o.user\\_id\nWHERE o.id = 67890;",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "Retrieve the loyalty_program_tier_level of customers who have reviewed a product referenced_product_identifier = 12345. Provide the review_unique_identifier and associated_review_image_urls.",
        "Query": "SELECT DISTINCT T2.loyalty_program_tier_level, T1.referenced_product_identifier, T1.associated_review_image_urls FROM product_reviews_and_ratings AS T1 INNER JOIN customers_loyalty_program AS T2 ON T1.reviewing_customer_identifier = T2.associated_customer_reference_id WHERE T1.referenced_product_identifier = 12345",
        "GeneratedQuery": "```sql\nSELECT u.loyalty_program_tier_level, r.review_unique_identifier, r.associated_review_image_urls\nFROM users u\nJOIN reviews r ON u.id = r.user_id\nWHERE EXISTS (\n    SELECT 1\n    FROM product_reviews pr\n    WHERE pr.review_id = r.id AND pr.referenced_product_identifier = 12",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "Find the total amount of all orders placed in the month of January 2023, along with the average tax amount applied to those orders.",
        "Query": "SELECT SUM(total_amount) AS total_order_amount, AVG(tax_amount) AS average_tax_amount FROM orders WHERE delivery_date >= '2023-01-01' AND delivery_date < '2023-02-01';",
        "GeneratedQuery": "SELECT SUM(amount) as total\\_amount, AVG(tax) as avg\\_tax\nFROM orders\nWHERE EXTRACT(MONTH FROM date) = 1 AND EXTRACT(YEAR FROM date) = 2023;",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "What is the total shipping cost for orders that have been shipped?",
        "Query": "SELECT SUM(shipping_cost) FROM shipping WHERE shipping_status = 'shipped'",
        "GeneratedQuery": "I'm sorry for the confusion, but the schema provided does not include a field for the shipping cost or a way to determine if an order has been shipped. To create a SQL query, I need more information about how to identify shipped orders and their corresponding shipping costs.\n\nHowever, assuming there is a 'shipping_cost' field in the 'orders' table and a boolean 'shipped' field (with 1 for true and 0 for false), the SQL statement could",
        "ExecutionStatus": "Error",
        "ErrorMessage": "Invalid SQL syntax"
    },
    {
        "NL": "Get the wishlists with the name of the wishlist item and its price at addition, along with the order status of the orders with matching campaign ID.",
        "Query": "SELECT w.product_name, w.price_at_addition, o.order_status FROM wishlist w LEFT JOIN orders o ON w.fk_product_id = o.campaign_id",
        "GeneratedQuery": "SELECT u.name AS wishlist\\_name, p.name AS item\\_name, p.price AS item\\_price, o.status AS order\\_status\nFROM users u\nJOIN orders o ON u.id = o.user\\_id\nJOIN (\nSELECT user\\_id, product\\_id AS wishlist\\_item\\_id, MIN(date) AS addition\\_date\nFROM orders\nWHERE campaign\\_id IS NOT NULL\nGROUP BY user\\_id",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "For each distinct product name in the wishlist, find the corresponding product id and brand name from the wishlist, as well as the order item id and item status from the order items table, where the wishlist product id matches the order item product id, and include the corresponding shipping address, shipping city, and shipping state from the shipping table.",
        "Query": "SELECT DISTINCT T1.product_name, T1.fk_product_id, T1.brand_name, T2.order_item_id, T2.item_status, T3.shipping_address, T3.shipping_city, T3.shipping_state FROM wishlist AS T1 INNER JOIN order_items AS T2 ON T1.fk_product_id = T2.product_id INNER JOIN shipping AS T3 ON T2.order_id = T3.fk_order_id",
        "GeneratedQuery": "SELECT DISTINCT p.name AS product\\_name,\n       p.id AS product\\_id,\n       p.name AS brand\\_name,\n       oi.id AS order\\_item\\_id,\n       oi.status AS item\\_status,\n       s.address AS shipping\\_address,\n       s.city AS shipping\\_city,\n       s.state AS shipping\\_state\nFROM wishlist w\nJOIN orders o ON w.",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "Retrieve all refunds initiated by the users where the refund status is 'pending'.",
        "Query": "SELECT * FROM refunds_returns WHERE refund_status = 'pending' AND refund_initiated_by = 'user';",
        "GeneratedQuery": "SELECT *\nFROM orders\nWHERE amount < 0 AND user\\_id IN (\n    SELECT id\n    FROM users\n);",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "Find the total amount of all orders placed by customers from the United States that were shipped using standard shipping methods and include a discount.",
        "Query": "SELECT SUM(o.total_amount) FROM orders o JOIN order_items oi ON o.order_id = oi.order_id WHERE o.shipping_address_country = 'United States' AND oi.is_returnable = false AND o.discount_applied > 0;",
        "GeneratedQuery": "SELECT SUM(amount)\nFROM orders\nWHERE user\\_id IN (\n    SELECT id\n    FROM users\n    WHERE email LIKE '%@us%'\n) AND amount IN (\n    SELECT order\\_id\n    FROM shipments\n    WHERE shipping\\_method = 'standard' AND includes\\_discount = true\n);",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "Find the event type, the campaign name, and the total number of products supplied by each supplier for events where the device type is 'mobile' and the campaign status is 'completed' and the supplier tax identification number is '123456789'.",
        "Query": "SELECT T1.event_type, T2.campaign_name, T3.total_number_of_products_supplied FROM events AS T1 INNER JOIN campaigns AS T2 ON T1.event_id = T2.campaign_id INNER JOIN suppliers AS T3 ON T2.campaign_id = T3.supplier_unique_identifier WHERE T1.device_type = 'mobile' AND T2.campaign_status = 'completed' AND T3.supplier_tax_identification_number = '123456789'",
        "GeneratedQuery": "SELECT suppliers.tax\\_id, SUM(products.stock)\nFROM orders\nJOIN users ON users.id = orders.user\\_id\nJOIN products ON products.id = orders.product\\_id\nJOIN (\nSELECT \nevent\\_type, \ncampaign\\_name, \nsupplier\\_id AS tax\\_id\nFROM campaigns\nJOIN events ON campaigns.id = events.campaign\\_id\nWHERE events.device\\_type",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "Find the average total transaction amount for customers who have made at least one purchase and have loyalty points greater than 1000, along with the number of wishlist items and average spent per order for these customers, grouped by city and country",
        "Query": "SELECT AVG(t.total_transaction_amount), COUNT(c.person_customer_id), AVG(c.preferences_avg_spent_per_order), c.address_city, c.address_country FROM customerinfo c JOIN transactions_and_payments t ON c.person_customer_id = t.corresponding_customer_reference_identifier WHERE c.person_loyalty_points > 1000 AND t.final_billed_amount > 0 GROUP BY c.address_city, c.address_country",
        "GeneratedQuery": "SELECT u.city, u.country, AVG(o.amount) as avg\\_total\\_transaction, COUNT(w.id) as num\\_wishlist\\_items, AVG(o.amount/op.order\\_count) as avg\\_spent\\_per\\_order\nFROM users u\nJOIN orders o ON u.id = o.user\\_id\nJOIN (\nSELECT user\\_id, COUNT(\\*) as order\\_count",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "List all the orders where the order status is 'Shipped' and the device platform is 'Windows'.",
        "Query": "SELECT o.order_id FROM orders o INNER JOIN events e ON o.order_id = e.order_id WHERE o.order_status = 'Shipped' AND e.device_platform = 'Windows'",
        "GeneratedQuery": "SELECT orders.\\* \nFROM orders \nJOIN users ON orders.user\\_id = users.id \nWHERE orders.amount IS NOT NULL AND users.email IN (\n    SELECT email \n    FROM users \n    JOIN orders ON users.id = orders.user\\_id \n    JOIN (\n        SELECT DISTINCT user\\_id \n        FROM orders \n        JOIN devices ON orders.id = devices.",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "Retrieve the inventory of products with stock status as 'reorder'.",
        "Query": "SELECT * FROM inventory WHERE stock_status = 'reorder';",
        "GeneratedQuery": "SELECT * FROM products WHERE stock = 'reorder';",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "Find all campaigns with their corresponding total reach, impressions and email open rate where the campaign type is 'Social Media' and the target audience is 'Young Adults', and also find the total refund amount for each campaign",
        "Query": "SELECT c.campaign_name, c.total_reach, c.impressions, c.email_open_rate, SUM(rr.refund_amount) AS total_refund_amount FROM campaigns c LEFT JOIN refunds_returns rr ON c.campaign_id = rr.fk_order_id WHERE c.campaign_type = 'Social Media' AND c.target_audience = 'Young Adults' GROUP BY c.campaign_name, c.total_reach, c.impressions, c.email_open_rate",
        "GeneratedQuery": "SELECT o.campaign\\_id, \n       COUNT(DISTINCT o.user\\_id) AS reach,\n       SUM(o.amount) AS impressions,\n       100.0 * SUM(CASE WHEN u.age BETWEEN 18 AND 35 THEN 1 ELSE 0 END) / COUNT(DISTINCT o.user\\_id) AS email\\_open\\_rate,",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "Find the average shipping cost for orders shipped to the United States",
        "Query": "SELECT AVG(T1.shipping_cost) FROM shipping AS T1 INNER JOIN orders AS T2 ON T1.fk_order_id = T2.order_id WHERE T2.shipping_address_country = 'United States'",
        "GeneratedQuery": "SELECT AVG(amount)\nFROM orders\nWHERE date IN (\n    SELECT date\n    FROM orders o\n    JOIN users u ON o.user\\_id = u.id\n    WHERE u.country = 'United States'\n);",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "Find the total billed amount for transactions where the corresponding customer made a refund and the refund amount was more than $50.",
        "Query": "SELECT SUM(final_billed_amount) FROM transactions_and_payments tp JOIN refunds_returns rr ON tp.linked_order_reference_identifier = rr.fk_order_id WHERE rr.refund_amount > 50;",
        "GeneratedQuery": "SELECT SUM(amount)\nFROM orders o1\nJOIN orders o2 ON o1.user\\_id = o2.user\\_id\nWHERE o1.amount < 0 AND o2.amount > 50;",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "Show the total amount of refunds and the total restocking fees for items in the inventory that belong to products that have a featured product flag set to true",
        "Query": "SELECT sum(refund_amount) as total_refund_amount, sum(restocking_fee) as total_restocking_fee FROM refunds_returns INNER JOIN products ON refunds_returns.fk_product_id = products.unique_product_identifier WHERE products.featured_product_flag = true AND refunds_returns.fk_product_id IN (SELECT referenced_product_id FROM inventory)",
        "GeneratedQuery": "SELECT SUM(amount) as total\\_refunds, SUM(price \\* stock) as total\\_restocking\\_fees\nFROM orders\nJOIN users ON users.id = orders.user\\_id\nJOIN products ON products.id = orders.product\\_id\nWHERE products.featured\\_product = true;",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "What is the average aggregate customer review rating for all products from suppliers in the USA, who have an average supplier rating of at least 4.5, and what is the average total number of products supplied by these suppliers?",
        "Query": "SELECT AVG(T2.aggregate_customer_review_rating) AS AVG_RATING, AVG(T1.total_number_of_products_supplied) AS AVG_PRODUCTS FROM suppliers AS T1 INNER JOIN products AS T2 ON T1.supplier_unique_identifier = T2.associated_supplier_reference_id WHERE T1.supplier_country_of_operation = 'USA' AND T1.average_supplier_rating >= 4.5",
        "GeneratedQuery": "SELECT AVG(review\\_rating) AS avg\\_review\\_rating, AVG(total\\_products) AS avg\\_total\\_products\nFROM (\nSELECT AVG(p.rating) AS review\\_rating, COUNT(o.product\\_id) AS total\\_products\nFROM orders o\nJOIN products p ON o.product\\_id = p.id\nJOIN users u ON o.user\\_id = u.id\nWHERE u.country",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "Show the total number of customers who have an active subscription and a Loyalty points greater than 1000.",
        "Query": "SELECT COUNT(*) FROM customerinfo WHERE account_has_active_subscription = true AND person_loyalty_points > 1000;",
        "GeneratedQuery": "WITH active\\_subscriptions AS (\nSELECT user\\_id\nFROM orders\nWHERE amount > 0\n),\nloyalty\\_points AS (\nSELECT user\\_id, SUM(price) as total\\_points\nFROM orders\nJOIN products ON orders.id = products.id\nGROUP BY user\\_id\n)\nSELECT COUNT(*)\nFROM active\\_subscriptions\nJOIN loyalty\\_points ON active\\_subscriptions.user\\_id = loyalty\\_",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "What is the product id and quantity for each order that has a transaction review score of more than 4.5 and has been fully paid?",
        "Query": "SELECT i.referenced_product_id, i.quantity FROM inventory i JOIN transactions_and_payments t ON i.id = t.corresponding_customer_reference_identifier WHERE t.transaction_review_score > 4.5 AND t.final_billed_amount = t.total_transaction_amount",
        "GeneratedQuery": "SELECT orders.id AS order\\_id, products.id AS product\\_id, orders.amount AS quantity\nFROM orders\nJOIN users ON orders.user\\_id = users.id\nJOIN products ON orders.id = products.id\nWHERE users.email IN (SELECT reviews.email FROM reviews WHERE reviews.score > 4.5) AND orders.amount = products.stock;",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "Find the names of products that have received a review with a sentiment analysis score greater than 0.7 and have a total number of verified reviews of at least 50.",
        "Query": "SELECT p.product_display_name FROM products p JOIN product_reviews_and_ratings prr ON p.unique_product_identifier = prr.referenced_product_identifier WHERE prr.sentiment_analysis_score > 0.7 GROUP BY p.product_display_name HAVING COUNT(prr.review_unique_identifier) >= 50;",
        "GeneratedQuery": "SELECT products.name\nFROM products\nJOIN orders ON products.id = orders.product_id\nJOIN (\n    SELECT review.product_id, COUNT(*) AS num_reviews\n    FROM reviews\n    WHERE review.verified = true\n    GROUP BY review.product_id\n) AS verified\\_reviews ON products.id = verified\\_reviews.product\\_id\nJOIN (\n    SELECT review.product_",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "List the inventory ids and referenced product ids of all inventory items with quantity less than the safety stock and the supplier id is 1.",
        "Query": "SELECT id, referenced_product_id FROM inventory WHERE quantity < safety_stock AND supplier_id = 1",
        "GeneratedQuery": "SELECT products.id, orders.product\\_id\nFROM products\nJOIN orders ON products.id = orders.product\\_id\nWHERE products.stock < (SELECT safety\\_stock FROM suppliers WHERE suppliers.id = 1);",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "Get the total discount amount redeemed and the total number of products supplied for customers who are eligible for special promotions and have a supplier with more than 100 products supplied",
        "Query": "SELECT clp.total_discount_amount_redeemed, s.total_number_of_products_supplied FROM customers_loyalty_program clp JOIN cart c ON clp.associated_customer_reference_id = c.fk_user_id JOIN suppliers s ON c.fk_product_id = s.supplier_unique_identifier WHERE clp.eligible_for_special_promotions = TRUE AND s.total_number_of_products_supplied > 100",
        "GeneratedQuery": "SELECT SUM(o.amount) AS total\\_discount, COUNT(p.id) AS total\\_products\nFROM users u\nJOIN orders o ON u.id = o.user\\_id\nJOIN products p ON o.id = p.order\\_id\nWHERE u.eligible\\_for\\_special\\_promotions = TRUE\nGROUP BY u.id\nHAVING COUNT(DISTINCT p.id) > 1",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "Find the total transaction amount and the number of reviews for each customer who has made a transaction and submitted a review for the same product.",
        "Query": "SELECT transactions_and_payments.corresponding_customer_reference_identifier, SUM(transactions_and_payments.total_transaction_amount) AS total_transaction_amount, COUNT(product_reviews_and_ratings.review_unique_identifier) AS number_of_reviews FROM transactions_and_payments JOIN product_reviews_and_ratings ON transactions_and_payments.corresponding_customer_reference_identifier = product_reviews_and_ratings.reviewing_customer_identifier GROUP BY transactions_and_payments.corresponding_customer_reference_identifier;",
        "GeneratedQuery": "SELECT u.id, SUM(o.amount) as total\\_transaction\\_amount, COUNT(r.id) as number\\_of\\_reviews\nFROM users u\nJOIN orders o ON u.id = o.user\\_id\nJOIN (\n    SELECT r.user\\_id, r.product\\_id\n    FROM reviews r\n) r ON u.id = r.user\\_id\nGROUP BY u.id;",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "Retrieve the product display name, promotional price, and the loyalty membership unique identifier for customers who have redeemed loyalty points for products that are in stock and have an aggregate customer review rating of at least 4.",
        "Query": "SELECT p.product_display_name, p.promotional_discounted_price, clp.loyalty_membership_unique_identifier\nFROM customers_loyalty_program clp\nJOIN cart c ON clp.associated_customer_reference_id = c.fk_user_id\nJOIN products p ON c.fk_product_id = p.unique_product_identifier\nWHERE clp.lifetime_loyalty_points_redeemed > 0 AND p.available_stock_quantity_in_units > 0 AND p.aggregate_customer_review_rating >= 4;",
        "GeneratedQuery": "SELECT p.name AS product\\_display\\_name, lp.promotional\\_price, l.id AS loyalty\\_membership\\_id\nFROM users u\nJOIN orders o ON u.id = o.user\\_id\nJOIN order\\_products op ON o.id = op.order\\_id\nJOIN products p ON op.product\\_id = p.id\nJOIN loyalty\\_programs lp ON u.id = lp.user\\_id\nJO",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "Find all orders in the cart where the product is a featured product and the estimated delivery date is after today.",
        "Query": "SELECT c.* FROM cart c JOIN products p ON c.fk_product_id = p.unique_product_identifier WHERE p.featured_product_flag = true AND c.estimated_delivery_date > CURRENT_DATE;",
        "GeneratedQuery": "SELECT orders.\\*\nFROM orders\nJOIN products ON orders.product\\_id = products.id\nWHERE products.featured = TRUE AND orders.date > CURDATE();",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "Find the total number of products supplied by each supplier and list them in descending order.",
        "Query": "SELECT supplier_unique_identifier, SUM(total_number_of_products_supplied) AS total_products_supplied FROM suppliers GROUP BY supplier_unique_identifier ORDER BY total_products_supplied DESC;",
        "GeneratedQuery": "SELECT supplier\\_id, SUM(quantity) as total\\_products\\_supplied\nFROM orders\nJOIN products ON orders.product\\_id = products.id\nGROUP BY supplier\\_id\nORDER BY total\\_products\\_supplied DESC;\n\nNote: The schema provided does not have a `supplier_id` or `quantity` field, so the above SQL statement assumes that those fields exist in the `orders` and `products` tables, respectively.",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "Retrieve the total amount of discounts applied to orders within the last year, grouped by campaign.",
        "Query": "SELECT campaign_id, SUM(discount_applied) as total_discount_applied FROM orders WHERE order_date >= NOW() - INTERVAL '1 year' GROUP BY campaign_id;",
        "GeneratedQuery": "SELECT campaign, SUM(discount) AS total\\_discount\nFROM orders\nJOIN (\n    SELECT user\\_id, SUM(price \\* amount \\* 0.1) AS discount, 'spring sale' AS campaign\n    FROM orders\n    JOIN products ON orders.product\\_id = products.id\n    WHERE date >= DATE\\_SUB(CURRENT\\_DATE, INTERVAL 1 YEAR)\n    GROUP BY user",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "Identify the top 5 customers who have the highest total number of edits made in their reviews and have submitted reviews with a review_unique_identifier that is either 100 or 200. Additionally, for these customers, find the average time spent on the product review page and the total number of events where they clicked more than 3 times and spent more than 10 seconds on the page, considering only events that happened after June 1, 2022. The results should be ordered by the total number of edits in descending order.",
        "Query": "SELECT p.reviewing_customer_identifier, COUNT(p.total_number_of_edits_made) AS total_edits, AVG(e.time_spent_seconds) AS avg_time_spent, COUNT(e.event_id) AS high_activity_events FROM product_reviews_and_ratings p LEFT JOIN events e ON p.reviewing_customer_identifier = e.person_customer_id WHERE p.review_unique_identifier IN (100, 200) AND e.event_type = 'product_review_page' AND e.time_spent_seconds > 10 AND e.click_count > 3 AND e.event_timestamp > '2022-06-01' GROUP BY p.reviewing_customer_identifier ORDER BY total_edits DESC LIMIT 5;",
        "GeneratedQuery": "WITH customer\\_reviews AS (\nSELECT user\\_id, COUNT(*) as total\\_edits\nFROM reviews\nWHERE review\\_unique\\_identifier IN (100, 200)\nGROUP BY user\\_id\n),\ncustomer\\_events AS (\nSELECT user\\_id, COUNT(\\*) as total\\_clicks, AVG(time\\_spent) as avg\\_time\\_spent\nFROM events\nWHERE time\\_spent >",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "Find all the orders with total price greater than 100 and the item is returnable.",
        "Query": "SELECT * FROM order_items WHERE total_price > 100 AND is_returnable = TRUE",
        "GeneratedQuery": "SELECT orders.\\*\nFROM orders\nJOIN products ON orders.product\\_id = products.id\nWHERE orders.amount \\* products.price > 100 AND products.returnable = TRUE;",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "Retrieve the official business name of suppliers who provide products with an expected restock date this month and have a supplier rating above 4.5, along with the names of customers who have ordered from these suppliers.",
        "Query": "SELECT DISTINCT s.official_supplier_business_name, ci.person_first_name, ci.person_last_name FROM suppliers s JOIN inventory i ON s.supplier_unique_identifier = i.supplier_id JOIN customerinfo ci ON ci.person_customer_id = i.id WHERE EXTRACT(YEAR FROM i.expected_restock_date) = EXTRACT(YEAR FROM CURRENT_DATE) AND EXTRACT(MONTH FROM i.expected_restock_date) = EXTRACT(MONTH FROM CURRENT_DATE) AND s.average_supplier_rating > 4.5",
        "GeneratedQuery": "SELECT DISTINCT u.name AS customer\\_name\nFROM users u\nJOIN orders o ON u.id = o.user\\_id\nJOIN (\n    SELECT supplier\\_id\n    FROM products\n    WHERE EXTRACT(MONTH FROM date\\_added) = EXTRACT(MONTH FROM CURRENT\\_DATE())\n    GROUP BY supplier\\_id\n    HAVING AVG(rating) > 4.5",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "Get the list of customers who have viewed their wishlist at least once and have made a purchase, along with their wishlist details, the number of reviews they have submitted, and the total amount spent by them. Include the event type and device platform for each customer.",
        "Query": "SELECT c.person_customer_id, w.id AS wishlist_id, w.price_at_addition, w.priority_level, w.expected_purchase_date, COUNT(DISTINCT prr.review_unique_identifier) AS total_reviews, SUM(e.cart_value) AS total_spent, e.event_type, e.device_platform FROM customerinfo c JOIN wishlist w ON c.person_customer_id = w.fk_user_id JOIN product_reviews_and_ratings prr ON c.person_customer_id = prr.reviewing_customer_identifier JOIN events e ON c.person_customer_id = e.person_customer_id WHERE w.last_viewed_at IS NOT NULL AND e.event_type = 'purchase' GROUP BY c.person_customer_id, w.id, w.price_at_addition, w.priority_level, w.expected_purchase_date, e.event_type, e.device_platform",
        "GeneratedQuery": "SELECT u.id, u.name, u.age, u.email, w.product\\_id, p.name AS wishlist\\_name, p.price, \n       COUNT(r.id) AS reviews, SUM(o.amount) AS total\\_spent, e.event\\_type, e.platform\nFROM users u\nJOIN (\n    SELECT user\\_id, product\\_id\n    FROM wishlist\\_views",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "List all customers who have registered after January 1, 2022, and have a loyalty point balance greater than 1000.",
        "Query": "SELECT person_first_name, person_last_name FROM customerinfo WHERE person_registration_date > '2022-01-01' AND person_loyalty_points > 1000;",
        "GeneratedQuery": "SELECT users.name \nFROM users \nWHERE users.date > '2022-01-01' \nAND users.id IN (\n    SELECT user\\_id \n    FROM orders \n    WHERE DATEDIFF(day, orders.date, GETDATE()) <= 30 \n) \nAND users.id IN (\n    SELECT DISTINCT customer\\_id \n    FROM loyalty\\_points",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "Find all reviews with a sentiment analysis score greater than 4 that were submitted by customers who have made more than 10 previous purchases and were reviewed on the same day as the last restock date of their associated product, excluding those products that are currently out of stock.",
        "Query": "SELECT prr.* FROM product_reviews_and_ratings prr JOIN inventory i ON prr.referenced_product_identifier = i.referenced_product_id WHERE prr.sentiment_analysis_score > 4 AND prr.previous_product_purchases_count > 10 AND DATE(prr.customer_review_submission_date) = DATE(i.last_restock_date) AND i.stock_status != 'out_of_stock'",
        "GeneratedQuery": "SELECT r.*\nFROM reviews r\nJOIN users u ON r.user\\_id = u.id\nJOIN orders o ON u.id = o.user\\_id\nJOIN products p ON r.product\\_id = p.id\nJOIN (\nSELECT product\\_id, MAX(date) as last\\_restock\\_date\nFROM orders\nWHERE amount > 0\nGROUP BY product\\_id\n) orl ON p.id = orl",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "Find all products with a standard retail price greater than $50 and the customers who have redeemed more than 1000 loyalty points and have an anniversary reward voucher status as true.",
        "Query": "SELECT p.*, c.* FROM products p JOIN customers_loyalty_program c ON p.unique_product_identifier = c.associated_customer_reference_id WHERE p.standard_retail_price_including_tax > 50 AND c.lifetime_loyalty_points_redeemed > 1000 AND c.anniversary_reward_voucher_status = TRUE",
        "GeneratedQuery": "SELECT products.name \nFROM products \nINNER JOIN orders ON products.id = orders.product_id \nINNER JOIN users ON orders.user_id = users.id \nWHERE products.price > 50 AND users.loyalty_points > 1000 AND users.anniversary_reward_voucher = TRUE;",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "Retrieve the first name, last name, and total discount amount redeemed for customers who are eligible for special promotions and have more than 1000 loyalty points.",
        "Query": "SELECT ci.person_first_name, ci.person_last_name, clp.total_discount_amount_redeemed FROM customerinfo ci JOIN customers_loyalty_program clp ON ci.person_customer_id = clp.associated_customer_reference_id WHERE clp.eligible_for_special_promotions = TRUE AND clp.accumulated_loyalty_points_balance > 1000;",
        "GeneratedQuery": "SELECT u.name AS first\\_name, \n       SUBSTRING\\_INDEX(u.name, ' ', -1) AS last\\_name, \n       SUM(p.price * o.amount) AS total\\_discount \nFROM users u \nJOIN orders o ON u.id = o.user\\_id \nJOIN products p ON o.id = p.order\\_id \nWHERE u.age >= 18 AND u",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "What is the total revenue generated by each campaign and the total amount spent by each order?",
        "Query": "SELECT SUM(T2.revenue_generated) AS total_revenue, SUM(T1.total_amount) AS total_amount FROM orders AS T1 INNER JOIN campaigns AS T2 ON T1.campaign_id = T2.campaign_id GROUP BY T2.campaign_id",
        "GeneratedQuery": "SELECT o.user\\_id AS campaign, SUM(o.amount) AS total\\_revenue, u.id AS order\\_id, SUM(o.amount) AS total\\_amount\\_spent\nFROM orders o\nJOIN users u ON o.user\\_id = u.id\nGROUP BY o.user\\_id, u.id;",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "Find the total orders for each customer who has a preferred payment method and sort the results in ascending order.",
        "Query": "SELECT T2.preferences_total_orders FROM customerinfo AS T1 INNER JOIN customerinfo AS T2 ON T1.person_customer_id = T2.person_customer_id WHERE T1.account_preferred_payment_method IS NOT NULL ORDER BY T2.preferences_total_orders ASC;",
        "GeneratedQuery": "SELECT u.name, SUM(o.amount) as total_orders\nFROM users u\nJOIN orders o ON u.id = o.user\\_id\nWHERE u.preferred\\_payment_method IS NOT NULL\nGROUP BY u.name\nORDER BY total\\_orders ASC;",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "Get the campaign name and total revenue generated for each campaign from the given campaign ID. Also, find the total billed amount in the transactions table for each campaign ID. Order the results by the total revenue in descending order.",
        "Query": "SELECT T1.campaign_name, T1.revenue_generated, SUM(T2.final_billed_amount) AS total_billed_amount FROM campaigns T1 INNER JOIN transactions_and_payments T2 ON T1.campaign_id = T2.linked_order_reference_identifier GROUP BY T1.campaign_name, T1.revenue_generated ORDER BY T1.revenue_generated DESC;",
        "GeneratedQuery": "SELECT campaigns.name, SUM(orders.amount) as total\\_revenue, SUM(transactions.billed\\_amount) as total\\_billed\\_amount\nFROM campaigns\nJOIN orders ON campaigns.id = orders.campaign\\_id\nJOIN transactions ON orders.id = transactions.order\\_id\nGROUP BY campaigns.id\nORDER BY total\\_revenue DESC;",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "Calculate the total revenue generated by successful campaigns that ended in the last 30 days.",
        "Query": "SELECT SUM(revenue_generated) FROM campaigns WHERE campaign_status = 'successful' AND end_date >= CURRENT_DATE - INTERVAL '30 days';",
        "GeneratedQuery": "SELECT SUM(amount)\nFROM orders\nJOIN users ON users.id = orders.user\\_id\nWHERE date >= CURDATE() - INTERVAL 30 DAY AND amount > 0;",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "Find the total number of products supplied by each supplier along with the corresponding inventory quantity for products with a safety stock greater than 10.",
        "Query": "SELECT s.total_number_of_products_supplied, i.quantity FROM suppliers s JOIN inventory i ON s.supplier_unique_identifier = i.supplier_id WHERE i.safety_stock > 10;",
        "GeneratedQuery": "SELECT suppliers.id, SUM(products.stock) as total\\_inventory\\_quantity\nFROM products\nJOIN (\n    SELECT id as user\\_id\n    FROM users\n) as suppliers\nON products.id = suppliers.user\\_id\nWHERE products.stock > 10\nGROUP BY suppliers.id;",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "List the customer loyalty program details for customers who have placed orders with a total amount greater than $100, including their loyalty points balance, loyalty tier level, and the campaign name for the order.",
        "Query": "SELECT T3.accumulated_loyalty_points_balance, T3.loyalty_program_tier_level, T1.campaign_name FROM campaigns AS T1 INNER JOIN orders AS T2 ON T1.campaign_id = T2.campaign_id INNER JOIN customers_loyalty_program AS T3 ON T2.person_customer_id = T3.associated_customer_reference_id WHERE T2.total_amount > 100",
        "GeneratedQuery": "SELECT u.name AS customer\\_name,\n       u.email AS customer\\_email,\n       SUM(o.amount) AS total\\_order\\_amount,\n       COALESCE(lp.points, 0) AS loyalty\\_points\\_balance,\n       lt.tier\\_level,\n       c.campaign\\_name\nFROM users u\nJOIN orders o ON u.id = o.user\\_id\nLEFT JOIN loyalty\\_points",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "Find the total revenue generated by each campaign type along with the total quantity of inventory for each product",
        "Query": "SELECT c.campaign_type, SUM(c.revenue_generated) AS total_revenue, SUM(i.quantity) AS total_quantity FROM campaigns c JOIN inventory i ON c.campaign_id = i.referenced_product_id GROUP BY c.campaign_type",
        "GeneratedQuery": "SELECT o.user\\_id AS campaign\\_type, SUM(o.amount) AS total\\_revenue, p.id AS product\\_id, SUM(p.stock) AS total\\_quantity\nFROM orders o\nJOIN users u ON o.user\\_id = u.id\nJOIN products p ON u.id = p.id\nGROUP BY o.user\\_id, p.id;",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "List the average number of stars given by customers who have placed more than 10 orders.",
        "Query": "SELECT AVG(pr.submitted_review_star_rating) FROM product_reviews_and_ratings pr JOIN customerinfo ci ON pr.reviewing_customer_identifier = ci.person_customer_id WHERE ci.preferences_total_orders > 10;",
        "GeneratedQuery": "SELECT AVG(stars)\nFROM (\n    SELECT COUNT(o.id) as num_orders, u.id\n    FROM users u\n    JOIN orders o ON u.id = o.user_id\n    GROUP BY u.id\n) subquery\nWHERE num_orders > 10;",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "Find the top 5 most purchased products with their average rating from customers who have purchased at least 2 products and have a loyalty membership tier level of Platinum, along with the total number of reviews for each product and the total loyalty points earned by each customer.",
        "Query": "WITH purchased_products AS ( SELECT T2.referenced_product_identifier, T1.associated_customer_reference_id, T2.submitted_review_star_rating FROM customers_loyalty_program AS T1 INNER JOIN product_reviews_and_ratings AS T2 ON T1.associated_customer_reference_id = T2.reviewing_customer_identifier ), count_table AS ( SELECT referenced_product_identifier, COUNT(referenced_product_identifier) AS count, AVG(submitted_review_star_rating) AS avg_rating FROM purchased_products GROUP BY referenced_product_identifier ) SELECT T2.referenced_product_identifier, T2.avg_rating, T3.loyalty_membership_unique_identifier, T3.lifetime_loyalty_points_earned, T2.count FROM purchased_products AS T1 INNER JOIN count_table AS T2 ON T1.referenced_product_identifier = T2.referenced_product_identifier INNER JOIN customers_loyalty_program AS T3 ON T1.associated_customer_reference_id = T3.associated_customer_reference_id WHERE T3.loyalty_program_tier_level = 'Platinum' AND T2.count > 2 ORDER BY T2.avg_rating DESC LIMIT 5",
        "GeneratedQuery": "```sql\nSELECT \n    p.id AS product_id, \n    p.name AS product_name, \n    AVG(r.rating) AS average_rating, \n    COUNT(o.id) AS total_purchases, \n    SUM(op.quantity) AS total_reviews, \n    SUM(lp.points) AS total_loyalty_points\nFROM \n    orders o",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "Find the total revenue generated by campaigns that were successful, defined as campaigns with an actual spent less than the budget.",
        "Query": "SELECT SUM(revenue_generated) AS total_revenue FROM campaigns WHERE actual_spent < budget AND campaign_status = 'successful';",
        "GeneratedQuery": "SELECT SUM(o.amount) AS total\\_revenue\nFROM orders o\nJOIN (\n    SELECT user\\_id, amount AS budget\n    FROM orders\n    GROUP BY user\\_id\n) b ON o.user\\_id = b.user\\_id\nWHERE o.amount < b.budget;",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "Retrieve the product display names and the number of orders for products that have been reviewed with a rating above 4 in the past month, along with the customer's first name and last name who placed the order.",
        "Query": "SELECT p.product_display_name, COUNT(e.order_id) AS order_count, ci.person_first_name, ci.person_last_name FROM products p JOIN events e ON p.unique_product_identifier = e.order_item_id JOIN customerinfo ci ON e.person_customer_id = ci.person_customer_id WHERE e.review_rating > 4 AND e.event_timestamp >= NOW() - INTERVAL '1 month' GROUP BY p.product_display_name, ci.person_first_name, ci.person_last_name;",
        "GeneratedQuery": "SELECT \n    p.name AS product\\_name,\n    COUNT(o.id) AS order\\_count,\n    u.name AS customer\\_name\nFROM \n    orders o\nJOIN \n    users u ON o.user\\_id = u.id\nJOIN \n    (\n        SELECT \n            product\\_id,\n            AVG(rating) AS average\\_rating\n        FROM \n            reviews\n        WHERE",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "Get the total quantity of all products in the inventory with a stock status of 'in stock' and a warehouse location of 'main warehouse', along with the product identifier and last updated timestamp.",
        "Query": "SELECT referenced_product_id, SUM(quantity) AS total_quantity, MAX(last_updated) AS last_updated FROM inventory WHERE stock_status = 'in stock' AND warehouse_location = 'main warehouse' GROUP BY referenced_product_id",
        "GeneratedQuery": "SELECT \n  id, \n  SUM(stock) as total_quantity, \n  MAX(date) as last_updated_timestamp\nFROM \n  products\nWHERE \n  stock > 0 AND \n  name = 'main warehouse';",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "Get the top 5 products with highest average customer review rating.",
        "Query": "SELECT T1.product_display_name, T1.aggregate_customer_review_rating FROM products AS T1 INNER JOIN product_reviews_and_ratings AS T2 ON T1.unique_product_identifier = T2.referenced_product_identifier GROUP BY T1.product_display_name, T1.aggregate_customer_review_rating ORDER BY T1.aggregate_customer_review_rating DESC LIMIT 5",
        "GeneratedQuery": "SELECT products.id, products.name, AVG(reviews.rating) as average\\_rating\nFROM products\nJOIN orders ON products.id = orders.product\\_id\nJOIN users ON orders.user\\_id = users.id\nJOIN reviews ON orders.id = reviews.order\\_id\nGROUP BY products.id, products.name\nORDER BY average\\_rating DESC\nLIMIT 5;",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "Get the average amount spent per order by each customer for orders placed in the last 30 days.",
        "Query": "SELECT customerinfo.person_customer_id, AVG(orders.total_amount) as average_spent_per_order FROM orders INNER JOIN customerinfo ON orders.person_customer_id = customerinfo.person_customer_id WHERE orders.order_date >= NOW() - INTERVAL '30 days' GROUP BY customerinfo.person_customer_id;",
        "GeneratedQuery": "SELECT u.name, AVG(o.amount)\nFROM users u\nJOIN orders o ON u.id = o.user\\_id\nWHERE o.date >= CURDATE() - INTERVAL 30 DAY\nGROUP BY u.name;",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "Retrieve all reviews where the reviewer is verified and the review has received more than 5 helpful votes.",
        "Query": "SELECT * FROM product_reviews_and_ratings WHERE verification_status_of_reviewer = TRUE AND number_of_helpful_votes_received > 5;",
        "GeneratedQuery": "I'm sorry for the confusion, but there seems to be a mistake in the query since there are no \"reviews\" or \"reviewer\" tables mentioned in the provided schema. I will assume you meant to query the \"orders\" table for orders with helpful votes and the \"users\" table for the verified reviewer. Here's the closest approximation to the query based on the given schema:\n\n```sql\nSELECT u.name\nFROM users u\nJOIN orders",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "Retrieve the details of products in the wishlist along with customer's first and last name for wishlists that have a reminder set and the product is still in stock.",
        "Query": "SELECT w.product_name, w.brand_name, w.category, w.price_at_addition, w.discount_at_addition, w.quantity, w.reminder_date, ci.person_first_name, ci.person_last_name FROM wishlist w JOIN customerinfo ci ON w.fk_user_id = ci.person_customer_id WHERE w.reminder_set = true AND w.stock_status_at_addition = true;",
        "GeneratedQuery": "SELECT users.name AS first\\_name, users.name AS last\\_name, products.name, products.price\nFROM users\nJOIN orders ON users.id = orders.user\\_id\nJOIN products ON orders.id = products.id\nWHERE orders.reminder\\_set = true AND products.stock > 0;",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "Retrieve the details of products that have been returned more than once due to 'damaged' reasons, along with the average cart value of those returns and the customer's email who initiated the returns, excluding products that are no longer active.",
        "Query": "SELECT p.product_display_name, rr.reason, ci.person_email, AVG(e.cart_value) AS avg_cart_value FROM products p JOIN refunds_returns rr ON p.unique_product_identifier = rr.fk_product_id JOIN events e ON rr.fk_order_id = e.order_id JOIN customerinfo ci ON rr.fk_user_id = ci.person_customer_id WHERE rr.reason = 'damaged' AND p.active_product_status = true GROUP BY p.product_display_name, rr.reason, ci.person_email HAVING COUNT(rr.id) > 1;",
        "GeneratedQuery": "SELECT p.id, p.name, p.price, p.stock, AVG(o.amount) AS avg_cart_value, u.email\nFROM products p\nJOIN orders o ON p.id = o.product_id\nJOIN users u ON o.user_id = u.id\nWHERE o.id IN (\n    SELECT ro.order_id\n    FROM returns r\n    JOIN reasons re ON r.",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "How many campaigns are of type 'email' and have an email open rate greater than 0.5?",
        "Query": "SELECT COUNT(campaign_id) FROM campaigns WHERE campaign_type = 'email' AND email_open_rate > 0.5;",
        "GeneratedQuery": "SELECT COUNT(\\*) \nFROM campaigns \nWHERE type = 'email' AND open\\_rate > 0.5;",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "Which products are shipped to the same state where shipping status is 'Delivered' and estimated delivery is within the next 7 days?",
        "Query": "SELECT DISTINCT T2.product_name FROM shipping AS T1 INNER JOIN wishlist AS T2 ON T2.id = T1.fk_order_id WHERE T1.shipping_state = (SELECT shipping_state FROM shipping WHERE shipping_status = 'Delivered') AND T1.estimated_delivery BETWEEN CURRENT_DATE AND CURRENT_DATE + INTERVAL '7 day'",
        "GeneratedQuery": "SELECT products.id, products.name\nFROM products\nJOIN orders ON products.id = orders.product\\_id\nWHERE orders.shipping\\_status = 'Delivered' AND DATE(orders.date) + INTERVAL 7 DAY >= CURDATE();",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "Find the total billed amount and the transaction date for all transactions that were part of campaigns with an ROI greater than 100% and used the payment method 'Credit Card'.",
        "Query": "SELECT TAP.final_billed_amount, TAP.transaction_date_and_time FROM transactions_and_payments AS TAP JOIN campaigns AS C ON TAP.promotional_offer_applied = TRUE AND TAP.applied_gift_card_code = C.discount_code WHERE C.roi > 100 AND TAP.payment_method_used = 'Credit Card';",
        "GeneratedQuery": "SELECT SUM(amount) as total\\_billed\\_amount, date\nFROM orders\nJOIN users ON users.id = orders.user\\_id\nWHERE payment\\_method = 'Credit Card' AND\n((SELECT SUM(amount) FROM orders o2 JOIN products p ON o2.product\\_id = p.id WHERE o2.user\\_id = users.id) /\n(SELECT SUM(price) FROM orders o3 JOIN products",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "Find the total amount spent by each customer on orders that included items with a warranty period of more than 1 year, and include only those orders which were shipped after January 1, 2023.",
        "Query": "SELECT o.person_customer_id, SUM(o.total_amount) AS total_spent FROM orders o JOIN order_items oi ON o.order_id = oi.order_id WHERE oi.warranty_period > 12 AND o.shipping_date > '2023-01-01' GROUP BY o.person_customer_id;",
        "GeneratedQuery": "SELECT u.name, SUM(o.amount)\nFROM users u\nJOIN orders o ON u.id = o.user\\_id\nJOIN products p ON o.id = p.order\\_id\nWHERE p.warranty > 12 AND o.date > '2023-01-01'\nGROUP BY u.name;",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "Find the total time spent on events by customers who have completed a survey, grouped by their device platform.",
        "Query": "SELECT device_platform, SUM(time_spent_seconds) as total_time_spent FROM events WHERE survey_completed = true GROUP BY device_platform;",
        "GeneratedQuery": "SELECT u.device\\_platform, SUM(TIMESTAMPDIFF(SECOND, o1.date, o2.date)) as total\\_time\nFROM users u\nJOIN orders o1 ON u.id = o1.user\\_id\nJOIN orders o2 ON u.id = o2.user\\_id\nWHERE u.survey\\_completed = true AND o2.id > o1.id\nGROUP BY u.device",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "Find the total number of push notifications clicked for events happening in the last 30 days.",
        "Query": "SELECT COUNT(*) AS total_push_notifications_clicked FROM events WHERE push_notification_clicked = true AND event_timestamp >= NOW() - INTERVAL '30 days';",
        "GeneratedQuery": "SELECT COUNT(\\*)\nFROM notifications\nWHERE date >= NOW() - INTERVAL 30 DAY AND action = 'clicked' AND type = 'push';",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "What are the total amount and order status of orders made by customers who have clicked push notifications and have also completed surveys, along with the total time spent and discount applied in their corresponding events?",
        "Query": "SELECT o.total_amount, o.order_status, SUM(e.time_spent_seconds), SUM(e.discount_applied) FROM orders o JOIN events e ON o.order_id = e.order_id WHERE e.push_notification_clicked = true AND e.survey_completed = true GROUP BY o.total_amount, o.order_status",
        "GeneratedQuery": "SELECT SUM(o.amount) as total\\_amount, \n       COUNT(o.id) as order\\_status\nFROM orders o\nJOIN users u ON o.user\\_id = u.id\nWHERE u.email IN (SELECT DISTINCT email \n                 FROM push\\_notifications)\nAND u.id IN (SELECT DISTINCT user\\_id \n             FROM surveys);\n\n-- Since the schema does not include '",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "List all orders that have a payment status of paid and were shipped via a carrier other than UPS",
        "Query": "SELECT T1.order_id, T1.payment_status, T2.carrier FROM orders AS T1 INNER JOIN shipping AS T2 ON T1.order_id = T2.fk_order_id WHERE T1.payment_status = 'paid' AND T2.carrier != 'UPS'",
        "GeneratedQuery": "SELECT * FROM orders \nWHERE amount IS NOT NULL AND date IS NOT NULL AND carrier != 'UPS';",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "Get the first and last name of customers who have placed an order with a total amount of more than $1000 and have an active subscription.",
        "Query": "SELECT T2.person_first_name, T2.person_last_name FROM orders AS T1 INNER JOIN customerinfo AS T2 ON T1.person_customer_id = T2.person_customer_id WHERE T1.total_amount > 1000 AND T2.account_has_active_subscription = TRUE",
        "GeneratedQuery": "SELECT users.name \nFROM users \nJOIN orders ON users.id = orders.user\\_id \nWHERE orders.amount > 1000 \nAND users.id IN (SELECT user\\_id FROM subscriptions WHERE status = 'active');",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "Find the loyalty membership unique identifiers for customers who made more than $1000 in transactions and received a special discount on their birthday.",
        "Query": "SELECT DISTINCT T1.loyalty_membership_unique_identifier FROM customers_loyalty_program AS T1 JOIN transactions_and_payments AS T2 ON T1.associated_customer_reference_id = T2.corresponding_customer_reference_identifier WHERE T2.total_transaction_amount > 1000 AND T1.customer_birthday_special_discount = TRUE;",
        "GeneratedQuery": "SELECT DISTINCT user\\_id\nFROM orders\nWHERE amount > 1000 AND date IN (\nSELECT date\nFROM orders\nWHERE email IN (\nSELECT email\nFROM users\nWHERE id IN (\nSELECT user\\_id\nFROM orders\nWHERE amount > 0 AND amount IS NOT NULL\n)\nGROUP BY email\nHAVING COUNT(DISTINCT date) = COUNT(DISTINCT DATE\\_FORMAT",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "Get the number of customers who are premium and have more than 10000 loyalty points.",
        "Query": "SELECT COUNT(person_customer_id) FROM customerinfo WHERE person_is_premium = True AND person_loyalty_points > 10000",
        "GeneratedQuery": "SELECT COUNT(DISTINCT u.id)\nFROM users u\nWHERE u.age >= 18 AND u.email NOT LIKE '%@freeemail.com';",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "What is the average total amount of orders for each city, along with the corresponding number of orders and customers in that city?",
        "Query": "SELECT T1.shipping_address_city, AVG(T1.total_amount), COUNT(T1.order_id), COUNT(DISTINCT T1.person_customer_id) FROM orders AS T1 INNER JOIN customerinfo AS T2 ON T1.person_customer_id = T2.person_customer_id GROUP BY T1.shipping_address_city",
        "GeneratedQuery": "SELECT u.city, AVG(o.amount) AS avg\\_amount, COUNT(DISTINCT o.user\\_id) AS num\\_users, COUNT(o.id) AS num\\_orders\nFROM (\n    SELECT id, name, SUBSTRING(email, INSTR(email, '@') + 1) AS city\n    FROM users\n) u\nJOIN orders o ON u.id = o.user\\_id",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "Retrieve the product display names and their associated supplier reference IDs for products that have been in stock for less than 10 units and have not been restocked since before January 1, 2023, and are in the 'Electronics' category.",
        "Query": "SELECT p.product_display_name, p.associated_supplier_reference_id FROM products p JOIN inventory i ON p.unique_product_identifier = i.referenced_product_id WHERE i.quantity < 10 AND i.last_restock_date < '2023-01-01' AND p.product_category_primary = 'Electronics';",
        "GeneratedQuery": "SELECT products.name AS product\\_display\\_name, orders.user\\_id AS supplier\\_reference\\_id\nFROM products\nJOIN orders ON products.id = orders.product\\_id\nWHERE products.stock < 10 AND products.date > '2023-01-01' AND products.category = 'Electronics';",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "What are the product names and prices of the items in the cart for a specific user?",
        "Query": "SELECT p.product_display_name, c.price_per_unit FROM cart c JOIN products p ON c.fk_product_id = p.unique_product_identifier WHERE c.fk_user_id = 1;",
        "GeneratedQuery": "SELECT products.name, products.price \nFROM orders \nJOIN products ON orders.id = products.id \nWHERE orders.user\\_id = specific\\_user\\_id;",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "Find the total number of transactions made by customers who have an active subscription, have a premium account, and have made a purchase in the last 30 days, and also find the average loyalty points earned by these customers, and the total average amount spent per order by these customers, and the average review score given by these customers for their transactions.",
        "Query": "SELECT COUNT(DISTINCT t1.transaction_unique_identifier), AVG(t2.person_loyalty_points), AVG(t2.preferences_avg_spent_per_order), AVG(t1.transaction_review_score) FROM transactions_and_payments AS t1 INNER JOIN customerinfo AS t2 ON t1.corresponding_customer_reference_identifier = t2.person_customer_id WHERE t2.account_has_active_subscription = TRUE AND t2.person_is_premium = TRUE AND t1.transaction_date_and_time > NOW() - INTERVAL '30 days'",
        "GeneratedQuery": "SELECT \n    COUNT(DISTINCT o.user\\_id) AS total\\_transactions,\n    AVG(lp.points) AS avg\\_loyalty\\_points,\n    AVG(o.amount) AS avg\\_amount\\_per\\_order,\n    AVG(r.score) AS avg\\_review\\_score\nFROM\n    orders o\nJOIN\n    users u ON o.user\\_id = u.",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "Find the average click count and total cart value for events of type 'Product View' on the 'Android' platform.",
        "Query": "SELECT AVG(click_count) AS avg_click_count, SUM(cart_value) AS total_cart_value FROM events WHERE event_type = 'Product View' AND device_platform = 'Android'",
        "GeneratedQuery": "SELECT AVG(o.amount) AS avg\\_cart\\_value, COUNT(o.id) AS avg\\_click\\_count\nFROM orders o\nJOIN users u ON o.user\\_id = u.id\nWHERE u.email LIKE '%android%' AND o.date IN (\n\tSELECT date\n\tFROM orders\n\tWHERE type = 'Product View'\n)",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "Find the total number of products that are active and have more than 1000 verified reviews.",
        "Query": "SELECT COUNT(unique_product_identifier) FROM products WHERE active_product_status = TRUE AND total_number_of_verified_reviews > 1000;",
        "GeneratedQuery": "SELECT COUNT(*)\nFROM products\nWHERE stock > 1000;",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "Find the number of suppliers for each country of operation, sorted in descending order.",
        "Query": "SELECT supplier_country_of_operation, COUNT(supplier_unique_identifier) FROM suppliers GROUP BY supplier_country_of_operation ORDER BY COUNT(supplier_unique_identifier) DESC;",
        "GeneratedQuery": "I'm sorry for the confusion, but the provided schema does not include any information about countries or suppliers. Therefore, it's not possible to generate a valid SQL statement for the given query. However, if you have a table containing the necessary information, please provide it and I will generate the SQL statement.",
        "ExecutionStatus": "Error",
        "ErrorMessage": "Invalid SQL syntax"
    },
    {
        "NL": "Retrieve the total refund amount and the date when the refund was processed for orders that had events marked as 'Return'.",
        "Query": "SELECT rf.refund_amount, rf.processed_date FROM refunds_returns rf JOIN events e ON rf.fk_order_id = e.order_id WHERE e.event_type = 'Return';",
        "GeneratedQuery": "SELECT SUM(amount) as total\\_refund, date\nFROM orders\nWHERE EXISTS (\n    SELECT 1\n    FROM events\n    WHERE orders.id = events.order\\_id AND events.type = 'Return'\n)",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "Find the total number of customers who are eligible for special promotions.",
        "Query": "SELECT count(*) FROM customers_loyalty_program WHERE eligible_for_special_promotions = TRUE;",
        "GeneratedQuery": "SELECT COUNT(DISTINCT users.id)\nFROM users\nWHERE users.age >= 18 AND users.age <= 30;",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "Find all products that have a standard retail price greater than 200 and an available stock quantity in units greater than 10",
        "Query": "SELECT * FROM products WHERE standard_retail_price_including_tax > 200 AND available_stock_quantity_in_units > 10",
        "GeneratedQuery": "SELECT * FROM products \nWHERE price > 200 AND stock > 10;",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "List all the customers who have two-factor authentication enabled and their loyalty points",
        "Query": "SELECT person_customer_id, person_loyalty_points FROM customerinfo WHERE securitytwo_factor_enabled = TRUE",
        "GeneratedQuery": "SELECT users.name, users.email\nFROM users\nWHERE users.id IN (\n    SELECT user\\_id\n    FROM orders\n    GROUP BY user\\_id\n    HAVING COUNT(DISTINCT amount) > 1\n);",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "What is the average total transaction amount for orders with a total amount greater than $1000, and what is the average number of loyalty points earned for these transactions, considering only customers who have participated in the exclusive beta testing program and have a loyalty membership unique identifier greater than 5000, and have made a payment using the same billing and shipping address, and have not had any chargeback requests, and their transaction status is 'completed', and the transaction date and time is within the last 6 months?",
        "Query": "SELECT AVG(T.total_transaction_amount), AVG(T.associated_loyalty_points_earned) FROM transactions_and_payments T INNER JOIN orders O ON T.linked_order_reference_identifier = O.order_id INNER JOIN customers_loyalty_program C ON T.corresponding_customer_reference_identifier = C.associated_customer_reference_id WHERE O.total_amount > 1000 AND C.participation_in_exclusive_beta_testing = TRUE AND C.loyalty_membership_unique_identifier > 5000 AND T.billing_address_street = T.shipping_address_street AND T.billing_address_city = T.shipping_address_city AND T.billing_address_state = T.shipping_address_state AND T.billing_address_country = T.shipping_address_country AND T.billing_address_zip_code = T.shipping_address_zip_code AND T.chargeback_request_status = FALSE AND T.transaction_status = 'completed' AND T.transaction_date_and_time > NOW() - INTERVAL '6 month'",
        "GeneratedQuery": "SELECT AVG(amount) as avg\\_total\\_transaction, AVG(loyalty\\_points) as avg\\_loyalty\\_points\nFROM orders\nJOIN users ON orders.user\\_id = users.id\nWHERE amount > 1000\nAND users.loyalty\\_membership\\_id > 5000\nAND users.beta\\_tester = true\nAND billing\\_address = shipping\\_address\nAND charge",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "Analyze the inventory data to identify products that are frequently restocked but have low sales volume. Specifically, find products that have been restocked more than 5 times in the last year, have a stock turnover rate less than 0.5, and have not been part of any completed orders within the last year. Additionally, include the last updated timestamp, expiry date, and the total quantity sold for each product.",
        "Query": "SELECT i.id, i.referenced_product_id, i.last_updated, i.expiry_date, COALESCE(SUM(oi.quantity), 0) AS total_quantity_sold FROM inventory i LEFT JOIN order_items oi ON i.referenced_product_id = oi.product_id WHERE i.last_restock_date > NOW() - INTERVAL '1 year' AND i.inventory_turnover_rate < 0.5 AND (oi.order_id IS NULL OR oi.order_item_id IS NULL OR oi.item_status = 'cancelled' OR oi.item_status = 'returned') GROUP BY i.id HAVING COUNT(i.last_restock_date) > 5 ORDER BY total_quantity_sold ASC;",
        "GeneratedQuery": "SELECT p.id, p.name, p.price, p.stock, MAX(o.date) as last\\_updated\\_timestamp, MIN(expiry\\_date) as expiry\\_date, SUM(o.amount) as total\\_quantity\\_sold\nFROM products p\nLEFT JOIN orders o ON p.id = o.product\\_id\nLEFT JOIN (\nSELECT user\\_id, product\\_id, COUNT(*) as",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "Retrieve the average time spent on the site by customers who clicked on a promotion email and placed an order.",
        "Query": "SELECT AVG(e.time_spent_seconds) AS avg_time_spent FROM events e JOIN orders o ON e.order_id = o.order_id WHERE e.email_opened = TRUE AND e.event_type = 'promotion_click';",
        "GeneratedQuery": "SELECT AVG(DATEDIFF('date', 'promotion\\_date')) AS average\\_time\nFROM orders\nWHERE user\\_id IN (\n    SELECT id\n    FROM users\n    WHERE email IN (\n        SELECT email\n        FROM orders\n        WHERE amount > 0\n    )\n);",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "List the number of customers grouped by their marital status and average income.",
        "Query": "SELECT person_marital_status, AVG(person_income) FROM customerinfo GROUP BY person_marital_status",
        "GeneratedQuery": "I'm sorry for the confusion, but the schema provided does not include any information about marital status or income for the users. Therefore, it is not possible to generate a valid SQL statement for the given query.",
        "ExecutionStatus": "Error",
        "ErrorMessage": "Invalid SQL syntax"
    },
    {
        "NL": "Retrieve the total discounted price and the estimated delivery date for all items in the cart that are also available in the products table.",
        "Query": "SELECT cart.discounted_total_price, cart.estimated_delivery_date FROM cart JOIN products ON cart.fk_product_id = products.unique_product_identifier;",
        "GeneratedQuery": "SELECT SUM(amount * price * (1 - discount)) AS total\\_discounted\\_price, date + INTERVAL '1 day' * delivery\\_time AS estimated\\_delivery\\_date\nFROM orders\nJOIN users ON orders.user\\_id = users.id\nJOIN products ON orders.id = products.id\nWHERE stock > 0;",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "Find the total loyalty points earned by customers who have made transactions in the last month and have an anniversary reward voucher status of true",
        "Query": "SELECT SUM(T1.accumulated_loyalty_points_balance) FROM customers_loyalty_program AS T1 JOIN transactions_and_payments AS T2 ON T1.associated_customer_reference_id = T2.corresponding_customer_reference_identifier WHERE T2.transaction_date_and_time > NOW() - INTERVAL '1 month' AND T1.anniversary_reward_voucher_status = TRUE",
        "GeneratedQuery": "SELECT SUM(amount) AS total\\_loyalty\\_points\nFROM orders\nWHERE date >= CURDATE() - INTERVAL 1 MONTH AND EXISTS (\n    SELECT 1\n    FROM users\n    WHERE users.id = orders.user\\_id AND anniversary\\_reward\\_voucher = true\n);",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "Find the number of events where the event type is 'ORDER_COMPLETION' and the device platform is 'ANDROID', and the customer has also left a review with 5 stars. Then, group these events by the event timestamp and find the total number of such events for each group. Finally, find the top 5 results with the highest total number of events.",
        "Query": "SELECT COUNT(*) AS total_events, T1.event_timestamp FROM events AS T1 INNER JOIN product_reviews_and_ratings AS T2 ON T1.person_customer_id = T2.reviewing_customer_identifier WHERE T1.event_type = 'ORDER_COMPLETION' AND T1.device_platform = 'ANDROID' AND T2.submitted_review_star_rating = 5 GROUP BY T1.event_timestamp ORDER BY total_events DESC LIMIT 5",
        "GeneratedQuery": "SELECT date, COUNT(*) as total\nFROM orders\nJOIN users ON orders.user\\_id = users.id\nJOIN (\n    SELECT order\\_id\n    FROM reviews\n    WHERE stars = 5 AND device\\_platform = 'ANDROID'\n) r ON orders.id = r.order\\_id\nWHERE event\\_type = 'ORDER\\_COMPLETION'\nGROUP BY date\nORDER BY total DESC\nLIMIT 5;",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "Find all users who have 'free shipping eligibility' as true and also have products in the wishlist which are currently out of stock.",
        "Query": "SELECT T1.associated_customer_reference_id FROM customers_loyalty_program AS T1 JOIN wishlist AS T2 ON T1.associated_customer_reference_id = T2.fk_user_id WHERE T1.free_shipping_eligibility = TRUE AND T2.stock_status_at_addition = FALSE",
        "GeneratedQuery": "SELECT users.\\* \nFROM users \nJOIN orders ON users.id = orders.user\\_id \nWHERE orders.free\\_shipping = true \nAND users.id IN (\nSELECT user\\_id \nFROM wishlists \nWHERE product\\_id NOT IN (\nSELECT id \nFROM products \nWHERE stock > 0\n)\n);",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "Get the total value of all carts for users who have completed a survey and have a cart status of 'active'",
        "Query": "SELECT SUM(c.total_price) FROM cart c JOIN events e ON c.fk_user_id = e.person_customer_id WHERE e.survey_completed = TRUE AND c.cart_status = 'active'",
        "GeneratedQuery": "SELECT SUM(o.amount)\nFROM orders o\nJOIN users u ON u.id = o.user\\_id\nWHERE u.survey\\_completed = TRUE AND o.cart\\_status = 'active';",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "Find the total shipping costs and the estimated delivery dates for orders that were part of successful campaigns (ROI > 100%) and had at least one item that was part of a refund request. Include the campaign name, shipping carrier, and the total price of items in the order.",
        "Query": "SELECT SUM(sh.shipping_cost) AS total_shipping_costs, sh.estimated_delivery, c.campaign_name, sh.carrier, SUM(oi.total_price) AS total_order_price FROM shipping sh JOIN order_items oi ON sh.fk_order_id = oi.order_id JOIN campaigns c ON oi.order_id = c.campaign_id JOIN refunds_returns rr ON oi.order_id = rr.fk_order_id WHERE c.roi > 100 AND rr.id IS NOT NULL GROUP BY sh.estimated_delivery, c.campaign_name, sh.carrier",
        "GeneratedQuery": "SELECT \n    o.user\\_id, \n    SUM(p.price \\* o.amount) AS total\\_price, \n    SUM(o.amount) AS total\\_shipping\\_costs, \n    o.date AS estimated\\_delivery\\_date, \n    u.name AS campaign\\_name, \n    s.name AS shipping\\_carrier\nFROM \n    orders o\nJOIN \n    users u",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "Get the campaign name and total reach for campaigns where the target audience is the same as the brand name of products in the wishlist",
        "Query": "SELECT c.campaign_name, c.total_reach FROM campaigns c JOIN wishlist w ON c.target_audience = w.brand_name GROUP BY c.campaign_name, c.total_reach",
        "GeneratedQuery": "SELECT DISTINCT u2.name AS campaign\\_name, SUM(o.amount) AS total\\_reach\nFROM users u1\nJOIN orders o ON u1.id = o.user\\_id\nJOIN users u2 ON u1.name = u2.name\nJOIN (\nSELECT user\\_id, product\\_id\nFROM wishlists\nWHERE is\\_wishlist = true\n) w ON o.user\\_id = w",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "Find the number of events where a survey was completed.",
        "Query": "SELECT COUNT(event_id) FROM events WHERE survey_completed = TRUE;",
        "GeneratedQuery": "I'm sorry for the confusion, but the schema provided does not include a table or column related to a \"survey\". Therefore, it is not possible to generate a valid SQL statement for the given query.",
        "ExecutionStatus": "Error",
        "ErrorMessage": "Invalid SQL syntax"
    },
    {
        "NL": "Find the total number of customers who have participated in the exclusive beta testing and have a loyalty membership unique identifier greater than 50000.",
        "Query": "SELECT COUNT(*) FROM customers_loyalty_program WHERE participation_in_exclusive_beta_testing = TRUE AND loyalty_membership_unique_identifier > 50000;",
        "GeneratedQuery": "SELECT COUNT(DISTINCT u.id)\nFROM users u\nJOIN orders o ON u.id = o.user_id\nWHERE o.amount > 0;  -- Assuming participation in beta testing is indicated by a non-zero order amount\nAND u.email REGEXP '^[0-9]{5,}$';  -- Assuming email uniquely identifies loyalty membership and it starts with 5 or more digits",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "Find all the chargeback dispute reasons from the transactions_and_payments table.",
        "Query": "SELECT DISTINCT chargeback_dispute_reason FROM transactions_and_payments;",
        "GeneratedQuery": "I'm sorry for the confusion, but there is no \"transactions_and_payments\" table provided in the schema. However, if we assume that there is an \"payments\" table associated with the chargeback disputes, here's the SQL query:\n\n```sql\nSELECT dispute_reason FROM payments;\n```\n\nIf you meant a different table or additional information, please clarify so I can provide the accurate SQL query.",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "Get the product identifier, review rating, and review feedback for reviews with a rating greater than 4 and a review length greater than 100 characters.",
        "Query": "SELECT referenced_product_identifier, submitted_review_star_rating, textual_review_feedback FROM product_reviews_and_ratings WHERE submitted_review_star_rating > 4 AND length_of_review_in_characters > 100",
        "GeneratedQuery": "I'm sorry for the confusion, but there seems to be a mistake in the query as there is no \"review rating\" or \"review feedback\" field mentioned in the provided schema. I'll assume you meant to query the \"orders\" table for orders with an \"amount\" greater than 4 (assuming it's in thousands) and a comment with a length greater than 100 characters. Here's the SQL query for that:\n\n```sql\nSELECT",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "Find the average shipping fee for orders that were created from carts where the estimated delivery date is before June 1, 2023, and the cart status is 'completed'.",
        "Query": "SELECT AVG(o.shipping_fee) FROM orders o JOIN cart c ON o.created_at = c.added_at WHERE c.estimated_delivery_date < '2023-06-01' AND c.cart_status = 'completed'",
        "GeneratedQuery": "SELECT AVG(amount)\nFROM orders\nWHERE user_id IN (\n    SELECT user\\_id\n    FROM (\n        SELECT user\\_id, MIN(date + INTERVAL estimated\\_delivery\\_time DAY) AS estimated\\_delivery\\_date\n        FROM orders\n        JOIN carts ON orders.id = carts.order\\_id\n        GROUP BY user\\_id\n    ) AS subquery\n    WHERE estimated\\_",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "Get the refund amount and refund status for all refunds where the refund method is 'credit' and the status is 'processed'.",
        "Query": "SELECT refund_amount, refund_status FROM refunds_returns WHERE refund_method = 'credit' AND status = 'processed'",
        "GeneratedQuery": "SELECT SUM(amount) AS refund\\_amount, 'processed' AS refund\\_status\nFROM orders\nWHERE refund\\_method = 'credit' AND status = 'processed' AND status = 'refund';",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "Find the names of customers who have accumulated more than 1000 loyalty points and are eligible for special promotions.",
        "Query": "SELECT c.person_first_name, c.person_last_name FROM customerinfo c JOIN customers_loyalty_program l ON c.person_customer_id = l.associated_customer_reference_id WHERE l.accumulated_loyalty_points_balance > 1000 AND l.eligible_for_special_promotions = TRUE;",
        "GeneratedQuery": "SELECT name \nFROM users \nWHERE id IN (\n    SELECT user\\_id \n    FROM orders \n    GROUP BY user\\_id \n    HAVING SUM(amount) > 1000\n);",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "Retrieve the first name, last name, and total amount spent by each premium customer in transactions, along with the number of transactions they made.",
        "Query": "SELECT ci.person_first_name, ci.person_last_name, SUM(tp.total_transaction_amount) AS total_spent, COUNT(tp.transaction_unique_identifier) AS total_transactions FROM customerinfo ci JOIN transactions_and_payments tp ON ci.person_customer_id = tp.corresponding_customer_reference_identifier WHERE ci.person_is_premium = TRUE GROUP BY ci.person_first_name, ci.person_last_name",
        "GeneratedQuery": "SELECT u.name AS first\\_name, \n       SUBSTRING(u.name FROM POSITION(' ' IN u.name) + 1) AS last\\_name,\n       SUM(o.amount) AS total\\_amount\\_spent,\n       COUNT(o.id) AS number\\_of\\_transactions\nFROM users u\nJOIN orders o ON u.id = o.user\\_id\nWHERE u.email LIKE '%p",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "Retrieve the total transaction amounts and referral bonus points earned for customers who participated in the exclusive beta testing and have personalized product recommendations.",
        "Query": "SELECT T2.total_transaction_amount, T1.referral_bonus_points_earned FROM customers_loyalty_program AS T1 JOIN transactions_and_payments AS T2 ON T1.associated_customer_reference_id = T2.corresponding_customer_reference_identifier WHERE T1.participation_in_exclusive_beta_testing = TRUE AND T1.personalized_product_recommendations IS NOT NULL;",
        "GeneratedQuery": "SELECT SUM(amount) as total\\_transaction\\_amounts, 0 as referral\\_bonus\\_points\nFROM orders\nWHERE user\\_id IN (\n    SELECT id\n    FROM users\n    WHERE name IN ('exclusive beta testers')\n)\nAND id IN (\n    SELECT user\\_id\n    FROM users\n    WHERE age IS NOT NULL\n)\nUNION ALL\nSELECT 0 as total\\_transaction\\_amounts",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "What are the product names and quantities of all items in orders with a total price greater than $100?",
        "Query": "SELECT product_name, quantity FROM order_items WHERE total_price > 100",
        "GeneratedQuery": "SELECT products.name, SUM(orders.amount) as quantity\nFROM products\nJOIN orders ON products.id = orders.product\\_id\nGROUP BY products.name\nHAVING SUM(orders.amount * products.price) > 100;",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "Retrieve details of all wishlisted products where the price at addition is less than 50% of the current purchase price of the product in inventory, and the product has been on the wishlist for more than 30 days but has not been viewed in the last 15 days, also provide the name of the product, the user's ID who added it to the wishlist, and the current stock status of the product.",
        "Query": "SELECT w.*, i.purchase_price, i.stock_status, w.product_name FROM wishlist w JOIN inventory i ON w.fk_product_id = i.referenced_product_id WHERE w.price_at_addition < 0.5 * i.purchase_price AND w.added_at <= NOW() - INTERVAL '30 days' AND w.last_viewed_at <= NOW() - INTERVAL '15 days'",
        "GeneratedQuery": "SELECT p.name, u.id, p.stock\nFROM users u\nJOIN orders o ON u.id = o.user_id\nJOIN (\n    SELECT wishlist.product_id, MIN(wishlist.date) AS addition_date\n    FROM orders wishlist\n    WHERE wishlist.amount = 0\n) AS wishlist\\_dates ON p.id = wishlist\\_dates.product\\_id\nJOIN products p ON",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "What is the shipping status of the orders which have estimated delivery before '2022-01-01'?",
        "Query": "SELECT DISTINCT shipping_status FROM shipping WHERE estimated_delivery < '2022-01-01'",
        "GeneratedQuery": "SELECT Orders.id, Orders.user\\_id, Orders.amount, Orders.date, 'pending' as shipping\\_status\nFROM orders\nWHERE Orders.date < '2022-01-01';",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "Retrieve all product names and their associated supplier reference IDs for products that have a minimum threshold for restocking set to 5 or less and have a promotional discount applied, showing only active products.",
        "Query": "SELECT product_display_name, associated_supplier_reference_id FROM products WHERE minimum_threshold_for_restocking <= 5 AND percentage_discount_applied > 0 AND active_product_status = true;",
        "GeneratedQuery": "SELECT products.name, products.id\nFROM products\nJOIN orders ON products.id = orders.product\\_id\nWHERE products.stock <= 5 AND orders.amount < products.price AND products.status = 'active';",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "Find all orders where the total amount is greater than 100 and the shipping fee is less than 20.",
        "Query": "SELECT * FROM orders WHERE total_amount > 100 AND shipping_fee < 20;",
        "GeneratedQuery": "SELECT \\* \nFROM orders \nWHERE amount > 100 AND amount + (SELECT shipping\\_fee FROM shipping\\_rates WHERE id = orders.user\\_id) < 20;",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "Retrieve the number of unique customers who added items to their wishlist from a mobile device and have at least one item with a reminder set.",
        "Query": "SELECT COUNT(DISTINCT w.fk_user_id) AS unique_customers FROM wishlist w JOIN events e ON w.session_id = e.session_id WHERE e.device_platform LIKE '%Mobile%' AND w.reminder_set = TRUE;",
        "GeneratedQuery": "SELECT COUNT(DISTINCT u.id)\nFROM users u\nJOIN orders o ON u.id = o.user\\_id\nWHERE o.device = 'mobile' AND EXISTS (\n    SELECT 1\n    FROM orders o2\n    WHERE o2.user\\_id = u.id AND o2.reminder_set = TRUE\n);",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "What is the total amount and tax amount for all orders?",
        "Query": "SELECT SUM(total_amount) AS total_amount, SUM(tax_amount) AS tax_amount FROM orders",
        "GeneratedQuery": "SELECT SUM(amount) AS total\\_amount, 0 AS tax\\_amount\nFROM orders;",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "List the event types and their timestamps for customers who have a loyalty points balance greater than 500, and find out the event types that occurred on weekends.",
        "Query": "SELECT e.event_type, e.event_timestamp FROM events e INNER JOIN customerinfo c ON e.person_customer_id = c.person_customer_id WHERE c.person_loyalty_points > 500 AND EXTRACT(DOW FROM e.event_timestamp) IN (0, 6);",
        "GeneratedQuery": "SELECT date, event\\_type\nFROM (\nSELECT DATE(orders.date) AS date,\nCASE\nWHEN DAYOFWEEK(orders.date) IN (1, 7) THEN 'weekend'\nELSE 'weekday'\nEND AS event\\_type\nFROM orders\nJOIN users ON orders.user\\_id = users.id\nWHERE users.loyalty\\_points > 500\n) AS subquery",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "Show all reviews with a star rating greater than 4.",
        "Query": "SELECT * FROM product_reviews_and_ratings WHERE submitted_review_star_rating > 4;",
        "GeneratedQuery": "I'm sorry for the confusion, but there is no \"reviews\" table mentioned in the schema you provided. I cannot generate a valid SQL statement without the necessary schema information. Could you please provide the correct schema or rephrase the query to match the given schema?",
        "ExecutionStatus": "Error",
        "ErrorMessage": "Invalid SQL syntax"
    },
    {
        "NL": "Find the names of the customers who made previous purchases and submitted reviews with more than 4 stars and are verified, and their corresponding review ratings.",
        "Query": "SELECT T1.person_first_name, T1.person_last_name, T2.submitted_review_star_rating FROM customerinfo AS T1 INNER JOIN product_reviews_and_ratings AS T2 ON T1.person_customer_id = T2.referenced_product_identifier WHERE T2.verification_status_of_reviewer = TRUE AND T2.previous_product_purchases_count > 0 AND T2.submitted_review_star_rating > 4",
        "GeneratedQuery": "SELECT u.name, r.rating\nFROM users u\nJOIN orders o ON u.id = o.user\\_id\nJOIN reviews r ON u.id = r.user\\_id\nWHERE r.stars > 4 AND u.is\\_verified = TRUE;",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "Find all customer information with their review ratings and the associated review image URLs for customers who have submitted a review with a rating of 5 stars and number of helpful votes received is greater than 10.",
        "Query": "SELECT T2.person_customer_id, T2.review_rating, T1.associated_review_image_urls FROM product_reviews_and_ratings AS T1 INNER JOIN events AS T2 ON T1.referenced_product_identifier = T2.order_id WHERE T1.submitted_review_star_rating = 5 AND T1.number_of_helpful_votes_received > 10",
        "GeneratedQuery": "SELECT u.id, u.name, u.age, u.email\nFROM users u\nJOIN (\n    SELECT user\\_id\n    FROM reviews\n    WHERE rating = 5 AND helpful\\_votes > 10\n) t ON u.id = t.user\\_id;\n\nNote: There is no \"review ratings\" and \"review image URLs\" columns in the provided schema. I assumed you meant \"reviews\" table with columns",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "Find the total amount spent on all orders for which email was opened and the payment method was 'PayPal'.",
        "Query": "SELECT SUM(o.total_amount) FROM orders o INNER JOIN events e ON o.order_id = e.order_id WHERE e.email_opened = TRUE AND e.payment_method = 'PayPal'",
        "GeneratedQuery": "SELECT SUM(amount)\nFROM orders\nJOIN users ON orders.user\\_id = users.id\nWHERE email IS NOT NULL AND payment\\_method = 'PayPal';",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "Find the total revenue generated by all campaigns with a budget greater than $1000, along with the total number of clicks and impressions for each campaign, and also include the number of customers who made a purchase after clicking on an ad, and the total amount they spent, grouped by campaign name",
        "Query": "SELECT c.campaign_name, SUM(c.revenue_generated) AS total_revenue, SUM(c.clicks) AS total_clicks, SUM(c.impressions) AS total_impressions, COUNT(DISTINCT e.person_customer_id) AS total_customers, SUM(e.cart_value) AS total_spent FROM campaigns c JOIN events e ON c.campaign_id = (SELECT campaign_id FROM events WHERE event_type = 'click' AND person_customer_id = e.person_customer_id) WHERE c.budget > 1000 AND e.event_type = 'purchase' GROUP BY c.campaign_name",
        "GeneratedQuery": "SELECT o.campaign\\_name, SUM(o.amount) AS revenue,\n       COUNT(DISTINCT o.user\\_id) AS unique\\_customers,\n       SUM(o.amount) FILTER (WHERE o.user_id IS NOT NULL) AS customer\\_spent\nFROM orders o\nJOIN campaigns c ON o.campaign\\_id = c.id\nWHERE c.budget > 100",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "List the total amount and discount applied for each order for orders made in 2023.",
        "Query": "SELECT order_id, total_amount, discount_applied FROM orders WHERE order_date >= '2023-01-01' AND order_date < '2024-01-01'",
        "GeneratedQuery": "SELECT orders.id, SUM(amount) as total\\_amount, 0 as discount\\_applied\nFROM orders\nWHERE EXTRACT(YEAR FROM date) = 2023\nGROUP BY orders.id;",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "Find all orders that were shipped in the last month and list their shipping status, estimated delivery date, and shipping cost.",
        "Query": "SELECT shipping_status, estimated_delivery, shipping_cost FROM shipping WHERE shipped_date >= (CURRENT_DATE - INTERVAL '1 month');",
        "GeneratedQuery": "SELECT o.id, o.user\\_id, o.amount, o.date, s.status, s.estimated\\_delivery\\_date, s.cost\nFROM orders o\nJOIN shipments s ON o.id = s.order\\_id\nWHERE o.date >= DATE\\_SUB(CURRENT\\_DATE, INTERVAL 1 MONTH);",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "What are the product names and average review ratings of all products that have more than 100 reviews?",
        "Query": "SELECT product_display_name, aggregate_customer_review_rating FROM products WHERE total_number_of_verified_reviews > 100",
        "GeneratedQuery": "SELECT products.name, AVG(reviews.rating)\nFROM products\nJOIN orders ON products.id = orders.product\\_id\nJOIN reviews ON orders.id = reviews.order\\_id\nGROUP BY products.name\nHAVING COUNT(reviews.id) > 100;",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "Retrieve the average total price of all order items shipped to customers in the state of New York, along with the count of such orders.",
        "Query": "SELECT AVG(oi.total_price) AS average_total_price, COUNT(oi.order_id) AS order_count FROM order_items oi JOIN shipping s ON oi.order_id = s.fk_order_id WHERE s.shipping_state = 'New York';",
        "GeneratedQuery": "SELECT AVG(p.price * o.amount) AS avg\\_total\\_price, COUNT(o.id) AS order\\_count\nFROM orders o\nJOIN users u ON o.user\\_id = u.id\nWHERE u.email LIKE '%@ny%';",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "Calculate the total refund amount for each product that was part of a campaign and identify the campaign name and type for each product.",
        "Query": "SELECT r.fk_product_id, c.campaign_name, c.campaign_type, SUM(r.refund_amount) AS total_refund_amount FROM refunds_returns r JOIN campaigns c ON r.request_date BETWEEN c.start_date AND c.end_date GROUP BY r.fk_product_id, c.campaign_name, c.campaign_type;",
        "GeneratedQuery": "SELECT p.id, p.name, SUM(o.amount) as total\\_refund, c.name, c.type\nFROM products p\nJOIN orders o ON p.id = o.product\\_id\nJOIN campaigns c ON p.id = c.product\\_id\nWHERE o.amount < 0\nGROUP BY p.id, c.name, c.type;",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "Retrieve the last restock date and the primary contact person name for suppliers who have supplied products with a purchase price greater than 100.",
        "Query": "SELECT i.last_restock_date, s.primary_contact_person_name FROM inventory i JOIN suppliers s ON i.supplier_id = s.supplier_unique_identifier WHERE i.purchase_price > 100;",
        "GeneratedQuery": "SELECT MAX(p1.date) AS last\\_restock\\_date, u.name AS primary\\_contact\\_person\nFROM products p1\nJOIN users u ON p1.user\\_id = u.id\nJOIN orders o ON p1.id = o.product\\_id\nWHERE o.amount > 0 -- assuming a positive amount means a purchase\nAND p1.price > 100\nGROUP BY u.name;",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "Find the email open rate, campaign name, and shipping cost for each campaign, along with the estimated delivery date and shipping address of the corresponding shipping order.",
        "Query": "SELECT T1.email_open_rate, T1.campaign_name, T2.shipping_cost, T2.estimated_delivery, T2.shipping_address FROM campaigns T1 INNER JOIN shipping T2 ON T1.campaign_id = T2.fk_order_id",
        "GeneratedQuery": "SELECT o.user\\_id AS email,\n       c.name AS campaign\\_name,\n       SUM(p.price * o.amount) / COUNT(DISTINCT u.id) AS email\\_open\\_rate,\n       o.amount AS shipping\\_cost,\n       o.date AS estimated\\_delivery\\_date,\n       s.address AS shipping\\_address\nFROM orders o\nJOIN users u ON u.id = o.",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "What is the total amount for orders and the corresponding order item id where payment status is paid?",
        "Query": "SELECT T1.total_amount, T2.order_item_id FROM orders AS T1 INNER JOIN order_items AS T2 ON T1.order_id = T2.order_id WHERE T1.payment_status = 'paid'",
        "GeneratedQuery": "SELECT SUM(amount) as total\\_amount, id as order\\_item\\_id\nFROM orders\nWHERE payment\\_status = 'paid'\nGROUP BY id;",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "Find the total final billed amount for all transactions that occurred in the year 2022 and had a refund initiated.",
        "Query": "SELECT SUM(final_billed_amount) FROM transactions_and_payments WHERE EXTRACT(YEAR FROM transaction_date_and_time) = 2022 AND refund_status = TRUE;",
        "GeneratedQuery": "SELECT SUM(amount)\nFROM orders\nWHERE YEAR(date) = 2022 AND EXISTS (\n    SELECT 1\n    FROM orders o2\n    WHERE o2.user\\_id = orders.user\\_id AND o2.id < orders.id AND o2.amount < 0\n);",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "Retrieve the customer details of all premium users who have an active subscription and have made more than 10 orders.",
        "Query": "SELECT * FROM customerinfo WHERE person_is_premium = true AND account_has_active_subscription = true AND preferences_total_orders > 10;",
        "GeneratedQuery": "SELECT users.*\nFROM users\nJOIN orders ON users.id = orders.user\\_id\nWHERE users.age >= 65 -- assuming \"premium users\" means users aged 65 or above\nAND orders.date >= CURDATE() - INTERVAL 1 MONTH -- assuming \"active subscription\" means subscribed within the last month\nGROUP BY users.id\nHAVING COUNT(orders.id) > 10;",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "Find all customers who have at least one item in their wishlist and have an active subscription, along with the estimated delivery date of their shipments.",
        "Query": "SELECT c.person_first_name, c.person_last_name, w.expected_purchase_date, s.estimated_delivery FROM customerinfo c JOIN wishlist w ON c.person_customer_id = w.fk_user_id JOIN shipping s ON c.person_customer_id = s.fk_order_id WHERE c.account_has_active_subscription = TRUE AND w.wishlist_status = 'active'",
        "GeneratedQuery": "SELECT u.name, MIN(o.date) as estimated\\_delivery\\_date\nFROM users u\nJOIN orders o ON u.id = o.user\\_id\nWHERE u.id IN (\nSELECT user\\_id\nFROM orders\nWHERE amount > 0\n)\nAND u.id IN (\nSELECT DISTINCT user\\_id\nFROM subscriptions\n)\nGROUP BY u.name;",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "What is the average star rating given by customers who have made more than 5 previous purchases?",
        "Query": "SELECT AVG(submitted_review_star_rating) FROM product_reviews_and_ratings WHERE previous_product_purchases_count > 5",
        "GeneratedQuery": "I'm sorry for the confusion, but the schema you provided does not include a 'star rating' field. I will assume that there is a ratings table with the following structure: ratings(id, user\\_id, star\\_rating, product\\_id, date). Here's the SQL query:\n\n```sql\nSELECT AVG(star_rating)\nFROM ratings\nJOIN (\n    SELECT user_id\n    FROM orders\n    GROUP BY",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "Find the official supplier business name, registered business address, and primary contact person name for each supplier who has supplied products to a customer who has placed an order, returned or requested a refund on a product that was added to their wishlist during the last 6 months, and also find the campaign name for each campaign that has a budget greater than the average spent for each campaign, the campaign start date, and the campaign end date.",
        "Query": "SELECT T4.official_supplier_business_name, T4.registered_business_address, T4.primary_contact_person_name, T7.campaign_name, T7.start_date, T7.end_date FROM wishlist AS T1 INNER JOIN cart AS T2 ON T1.fk_user_id = T2.fk_user_id INNER JOIN refunds_returns AS T3 ON T2.id = T3.fk_order_id INNER JOIN suppliers AS T4 ON T4.supplier_unique_identifier = T3.fk_product_id INNER JOIN campaigns AS T7 ON T7.total_reach > ( SELECT AVG(T6.actual_spent) FROM campaigns AS T6 ) WHERE T1.added_at > NOW() - INTERVAL '6 month'",
        "GeneratedQuery": "SELECT p.name AS supplier\\_name, p.email AS business\\_address, u.name AS contact\\_person, c.name AS campaign\\_name, c.start\\_date, c.end\\_date\nFROM products p\nJOIN users u ON p.id = u.id\nJOIN orders o ON u.id = o.user\\_id\nJOIN campaign\\_products cp ON p.id = cp.product\\_id\nJOIN campaigns c ON cp",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "Identify the top 10 suppliers with the highest average supplier rating, and list the total number of products they have supplied, the total quantity of their products in the inventory, and the average purchase price of their products. Also, find the average rating of the reviews for their products and the total number of reviews for their products. Filter the results to only include suppliers who have supplied products with a shelf life of more than 30 days.",
        "Query": "SELECT s.supplier_unique_identifier, AVG(s.average_supplier_rating) AS average_rating, SUM(i.quantity) AS total_quantity, AVG(i.purchase_price) AS average_purchase_price, AVG(pr.submitted_review_star_rating) AS average_review_rating, COUNT(pr.review_unique_identifier) AS total_reviews FROM suppliers s JOIN inventory i ON s.supplier_unique_identifier = i.supplier_id JOIN product_reviews_and_ratings pr ON i.referenced_product_id = pr.referenced_product_identifier WHERE i.shelf_life > 30 GROUP BY s.supplier_unique_identifier ORDER BY AVG(s.average_supplier_rating) DESC LIMIT 10",
        "GeneratedQuery": "SELECT p.supplier\\_id, \n       COUNT(DISTINCT p.id) AS total\\_products, \n       SUM(p.stock) AS total\\_quantity, \n       AVG(p.price) AS avg\\_purchase\\_price, \n       AVG(r.rating) AS avg\\_product\\_rating, \n       COUNT(r.id) AS total\\_reviews\nFROM   products p",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "Find the total billed amount for all transactions initiated by customers from a specific country, say 'USA', who made a payment using a digital wallet.",
        "Query": "SELECT SUM(t.final_billed_amount) FROM transactions_and_payments t JOIN refunds_returns r ON t.transaction_unique_identifier = r.fk_order_id WHERE t.billing_address_country = 'USA' AND t.digital_wallet_used IS NOT NULL;",
        "GeneratedQuery": "SELECT SUM(amount)\nFROM orders\nWHERE user\\_id IN (\n    SELECT id\n    FROM users\n    WHERE country = 'USA'\n) AND EXISTS (\n    SELECT 1\n    FROM payments\n    WHERE orders.id = payments.order_id AND payment_method = 'digital wallet'\n);",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "Find the total revenue generated from campaigns that used the discount code 'SUMMER2023'.",
        "Query": "SELECT SUM(revenue_generated) FROM campaigns WHERE discount_code = 'SUMMER2023'",
        "GeneratedQuery": "SELECT SUM(amount) AS total\\_revenue\nFROM orders\nWHERE EXISTS (\n    SELECT 1\n    FROM campaigns\n    WHERE orders.id = campaigns.order\\_id AND discount\\_code = 'SUMMER2023'\n);",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "Find all refund requests that were processed within the last 30 days and were made for products supplied by 'TechGiants Inc.'.",
        "Query": "SELECT rr.* FROM refunds_returns rr JOIN products p ON rr.fk_product_id = p.unique_product_identifier JOIN suppliers s ON p.associated_supplier_reference_id = s.supplier_unique_identifier WHERE rr.processed_date >= NOW() - INTERVAL '30 days' AND s.official_supplier_business_name = 'TechGiants Inc.';",
        "GeneratedQuery": "SELECT *\nFROM orders\nWHERE date >= CURDATE() - INTERVAL 30 DAY AND user\\_id IN (\n    SELECT id\n    FROM users\n    WHERE email = 'TechGiants Inc.'\n);",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "What are the campaign names and their corresponding campaign statuses?",
        "Query": "SELECT campaign_name, campaign_status FROM campaigns",
        "GeneratedQuery": "I'm sorry for the confusion, but the schema you've provided does not include a table or column related to \"campaign names\" or \"campaign statuses\". Therefore, I cannot generate a valid SQL statement for your query.\n\nHowever, if you have a table named \"campaigns\" with columns \"name\" and \"status\", the SQL statement would look like this:\n\n```sql\nSELECT name, status FROM campaigns;\n```",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "Find all customers who have shopped at least once, have a loyalty membership, and have provided feedback with an engagement score greater than 0.5. Also, list the average rating of the products they have reviewed, the total loyalty points they have accumulated, and the number of times they have edited their reviews. Filter the results to only include customers who are eligible for special promotions and have a loyalty tier level of 'Gold' or higher.",
        "Query": "SELECT c.associated_customer_reference_id, AVG(pr.submitted_review_star_rating) AS average_rating, SUM(c.accumulated_loyalty_points_balance) AS total_loyalty_points, SUM(pr.total_number_of_edits_made) AS total_edits FROM customers_loyalty_program c JOIN product_reviews_and_ratings pr ON c.associated_customer_reference_id = pr.reviewing_customer_identifier WHERE c.eligible_for_special_promotions = TRUE AND c.loyalty_program_tier_level IN ('Gold', 'Platinum') AND c.customer_feedback_engagement_score > 0.5 AND pr.user_has_edited_review = TRUE GROUP BY c.associated_customer_reference_id",
        "GeneratedQuery": "SELECT u.id, u.name, u.age, u.email, AVG(r.rating) AS average\\_rating, SUM(l.points) AS loyalty\\_points, COUNT(r.id) AS review\\_edits\nFROM users u\nJOIN orders o ON u.id = o.user\\_id\nJOIN loyalty l ON u.id = l.user\\_id AND l.tier >= 'Gold' AND l.",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "Get the total number of products supplied, average supplier rating, primary contact person name, and primary contact email address for each supplier who has not supplied any products to a customer who has placed an order and also has not supplied any products to a customer who has returned or requested a refund on a product that was added to their wishlist during the last 6 months, and also find the campaign name for each campaign that has a budget greater than the average spent for each campaign, the campaign start date, and the campaign end date.",
        "Query": "SELECT T2.total_number_of_products_supplied, T2.average_supplier_rating, T2.primary_contact_person_name, T2.primary_contact_email_address, T6.campaign_name, T6.start_date, T6.end_date FROM cart AS T1 INNER JOIN suppliers AS T2 ON T2.supplier_unique_identifier NOT IN ( SELECT T3.fk_product_id FROM cart AS T3 WHERE T3.fk_user_id IN ( SELECT T4.fk_user_id FROM wishlist AS T4 WHERE T4.added_at > NOW() - INTERVAL '6 month' ) OR T3.id IN ( SELECT T5.fk_order_id FROM refunds_returns AS T5 ) ) INNER JOIN campaigns AS T6 ON T6.total_reach > ( SELECT AVG(T7.actual_spent) FROM campaigns AS T7 ) WHERE T1.id ISNULL",
        "GeneratedQuery": "SELECT \n    s.id AS supplier\\_id,\n    COUNT(p.id) AS total\\_products\\_supplied,\n    AVG(r.rating) AS average\\_supplier\\_rating,\n    u.name AS primary\\_contact\\_person\\_name,\n    u.email AS primary\\_contact\\_email,\n    c.name AS campaign\\_name,\n    c.start\\_date AS campaign\\_start\\_date,\n    c",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "Find the total transaction amount and the average final billed amount for each order status from the transactions_and_payments and orders tables, excluding fraudulent transactions.",
        "Query": "SELECT o.order_status, SUM(t.total_transaction_amount) AS total_transaction_amount, AVG(t.final_billed_amount) AS average_final_billed_amount FROM transactions_and_payments t JOIN orders o ON t.linked_order_reference_identifier = o.order_id WHERE t.is_transaction_fraudulent = FALSE GROUP BY o.order_status;",
        "GeneratedQuery": "SELECT o.order\\_status, \n       SUM(op.amount) AS total\\_transaction\\_amount, \n       AVG(op.amount + p.price) AS average\\_final\\_billed\\_amount\nFROM orders o\nJOIN transactions\\_and\\_payments op ON o.id = op.order\\_id\nJOIN products p ON op.product\\_id = p.id\nWHERE op.is\\_fraudulent = false",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "Find the average transaction amount for each customer who has placed at least one transaction and also has orders in their cart, excluding those who have not logged in for more than a year.",
        "Query": "SELECT ci.person_first_name, ci.person_last_name, AVG(tp.total_transaction_amount) AS average_transaction_amount FROM customerinfo ci JOIN transactions_and_payments tp ON ci.person_customer_id = tp.corresponding_customer_reference_identifier JOIN cart c ON ci.person_customer_id = c.fk_user_id WHERE ci.person_last_login > NOW() - INTERVAL '1 year' GROUP BY ci.person_first_name, ci.person_last_name",
        "GeneratedQuery": "SELECT u.name, AVG(o.amount)\nFROM users u\nJOIN orders o ON u.id = o.user\\_id\nJOIN products p ON o.id = p.id\nWHERE u.date > DATE\\_SUB(CURRENT\\_DATE, INTERVAL 1 YEAR)\nGROUP BY u.name;",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "Find the total number of orders made by customers who have given 5-star reviews and have purchased a product at least twice, along with the total amount spent by these customers and the average sentiment analysis score of their reviews",
        "Query": "SELECT COUNT(T1.order_id) AS total_orders, SUM(T1.total_amount) AS total_amount_spent, AVG(T2.sentiment_analysis_score) AS avg_sentiment_score FROM orders AS T1 INNER JOIN product_reviews_and_ratings AS T2 ON T1.person_customer_id = T2.reviewing_customer_identifier WHERE T2.submitted_review_star_rating = 5 AND T2.previous_product_purchases_count >= 2",
        "GeneratedQuery": "SELECT COUNT(DISTINCT o.user\\_id) as num\\_orders,\nSUM(o.amount) as total\\_amount,\nAVG(r.score) as avg\\_sentiment\\_score\nFROM orders o\nJOIN (\nSELECT user\\_id, AVG(score) as score\nFROM reviews\nWHERE score = 5\nGROUP BY user\\_id\n) r\nON o.user\\_id = r.user\\_",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "Find the campaign id and total reach of all campaigns with a budget greater than $1000.",
        "Query": "SELECT campaign_id, total_reach FROM campaigns WHERE budget > 1000",
        "GeneratedQuery": "SELECT campaigns.id, SUM(orders.amount) as total\\_reach\nFROM orders\nJOIN users ON users.id = orders.user\\_id\nJOIN (\nSELECT id as campaign\\_id, SUM(amount) as budget\nFROM orders\nGROUP BY id\n) as campaigns ON campaigns.campaign\\_id = orders.id\nWHERE budget > 1000\nGROUP BY campaigns.id;",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "What is the count of customers with free shipping eligibility set to true?",
        "Query": "SELECT COUNT(*) FROM customers_loyalty_program WHERE free_shipping_eligibility = TRUE",
        "GeneratedQuery": "SELECT COUNT(\\*) \nFROM users \nWHERE id IN (\n    SELECT user\\_id \n    FROM orders \n    WHERE amount = 0\n);",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "Find the customer birthday special discount status and the total discount amount redeemed for customers who have placed orders with a total amount greater than $50 and have a loyalty program tier level of 'Gold', including the product name and quantity of each order item, and the total transaction amount, grouped by the customer reference ID?",
        "Query": "SELECT clpm.customer_birthday_special_discount, SUM(clpm.total_discount_amount_redeemed) AS total_discount_amount_redeemed, oi.product_name, oi.quantity, tap.total_transaction_amount FROM customers_loyalty_program AS clpm INNER JOIN orders AS o ON clpm.associated_customer_reference_id = o.person_customer_id INNER JOIN order_items AS oi ON o.order_id = oi.order_id INNER JOIN transactions_and_payments AS tap ON o.order_id = tap.linked_order_reference_identifier WHERE o.total_amount > 50 AND clpm.loyalty_program_tier_level = 'Gold' GROUP BY clpm.associated_customer_reference_id, clpm.customer_birthday_special_discount, oi.product_name, oi.quantity, tap.total_transaction_amount",
        "GeneratedQuery": "```\nSELECT u.id AS customer_id, u.name AS customer_name, u.age AS customer_age, u.email AS customer_email, \n       'Gold' AS loyalty_program_tier_level, \n       SUM(o.amount) AS total_discount_amount_redeemed, \n       p.name AS product_name, \n       qty AS quantity_of_each_order_item,",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "Find the average annual loyalty spending threshold for customers who have participated in exclusive beta testing and have a higher total reach than the average total reach of all campaigns.",
        "Query": "SELECT AVG(T1.annual_loyalty_spending_threshold) FROM customers_loyalty_program AS T1 INNER JOIN campaigns AS T2 ON T1.associated_customer_reference_id = T2.campaign_id WHERE T1.participation_in_exclusive_beta_testing = TRUE AND T2.total_reach > (SELECT AVG(total_reach) FROM campaigns)",
        "GeneratedQuery": "SELECT AVG(loyalty\\_spending) AS average\\_annual\\_loyalty\\_spending\nFROM (\nSELECT users.id, SUM(orders.amount) AS loyalty\\_spending\nFROM users\nJOIN orders ON users.id = orders.user\\_id\nWHERE users.id IN (\nSELECT user\\_id\nFROM exclusive\\_betas\n)\nGROUP BY users.id\n) AS customer\\_loyalty\nWHERE",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "List all campaigns that ended before January 1, 2023.",
        "Query": "SELECT * FROM campaigns WHERE end_date < '2023-01-01';",
        "GeneratedQuery": "I'm sorry for the confusion, but the schema provided doesn't seem to include any information about \"campaigns\" or their end dates. Therefore, it's not possible to convert the given natural language query into a valid SQL statement.",
        "ExecutionStatus": "Error",
        "ErrorMessage": "Invalid SQL syntax"
    },
    {
        "NL": "What are the product names and average ratings of products with more than 5 reviews in the wishlist?",
        "Query": "SELECT T2.product_name, AVG(T1.submitted_review_star_rating) FROM product_reviews_and_ratings AS T1 INNER JOIN wishlist AS T2 ON T1.referenced_product_identifier = T2.fk_product_id GROUP BY T2.product_name HAVING COUNT(T1.review_unique_identifier) > 5",
        "GeneratedQuery": "SELECT products.name, AVG(ratings)\nFROM products\nJOIN wishlists ON products.id = wishlists.product\\_id\nGROUP BY products.id\nHAVING COUNT(wishlists.id) > 5;\n\nNote: There is no \"ratings\" column in the provided schema, so I assumed it's an omission and added it as a column in the wishlists table. If this is not the case, please provide",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "What are the product names and the total price of each order item for all the orders with the campaign name 'Campaign X'?",
        "Query": "SELECT T3.product_name, T3.total_price FROM campaigns AS T1 INNER JOIN orders AS T2 ON T1.campaign_id = T2.campaign_id INNER JOIN order_items AS T3 ON T2.order_id = T3.order_id WHERE T1.campaign_name = 'Campaign X'",
        "GeneratedQuery": "SELECT p.name, SUM(o.amount * p.price) as total\\_price\nFROM orders o\nJOIN users u ON o.user\\_id = u.id\nJOIN products p ON o.id = p.id\nWHERE u.email IN (\nSELECT email\nFROM users\nWHERE name = 'Campaign X'\n)\nGROUP BY p.name;",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "Retrieve the total number of loyalty points earned by each customer who has participated in the exclusive beta testing program.",
        "Query": "SELECT associated_customer_reference_id, SUM(lifetime_loyalty_points_earned) AS total_loyalty_points FROM customers_loyalty_program WHERE participation_in_exclusive_beta_testing = true GROUP BY associated_customer_reference_id;",
        "GeneratedQuery": "SELECT u.name, SUM(o.amount) as total_points\nFROM users u\nJOIN orders o ON u.id = o.user_id\nWHERE u.email IN (SELECT email FROM users WHERE name = 'exclusive beta testers')\nGROUP BY u.name;",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "Find the total shipping cost for each order that has an estimated delivery date later than January 1, 2023, and list the results sorted by the shipping cost in descending order.",
        "Query": "SELECT fk_order_id, SUM(shipping_cost) AS total_shipping_cost FROM shipping WHERE estimated_delivery > '2023-01-01' GROUP BY fk_order_id ORDER BY total_shipping_cost DESC;",
        "GeneratedQuery": "SELECT o.id, SUM(p.price * o.amount) AS total\\_shipping\\_cost\nFROM orders o\nJOIN products p ON o.id = p.order\\_id\nWHERE o.date > '2023-01-01'\nGROUP BY o.id\nORDER BY total\\_shipping\\_cost DESC;",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "What is the average review rating of products with a retail price higher than 500 and a minimum threshold for restocking higher than 50, and what is the average textual review feedback length of these reviews?",
        "Query": "SELECT AVG(T1.submitted_review_star_rating), AVG(T1.length_of_review_in_characters) FROM product_reviews_and_ratings AS T1 INNER JOIN products AS T2 ON T1.referenced_product_identifier = T2.unique_product_identifier WHERE T2.standard_retail_price_including_tax > 500 AND T2.minimum_threshold_for_restocking > 50",
        "GeneratedQuery": "SELECT AVG(reviews.rating) AS avg\\_rating, AVG(LENGTH(reviews.feedback)) AS avg\\_feedback\\_length\nFROM products\nJOIN reviews ON products.id = reviews.product\\_id\nWHERE products.price > 500 AND products.stock > 50;",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "Get the average loyalty points of customers who have made at least one order",
        "Query": "SELECT AVG(T1.person_loyalty_points) FROM customerinfo AS T1 INNER JOIN wishlist AS T2 ON T1.person_customer_id = T2.fk_user_id INNER JOIN order_items AS T3 ON T2.fk_product_id = T3.product_id GROUP BY T1.person_loyalty_points",
        "GeneratedQuery": "SELECT AVG(loyalty\\_points)\nFROM (\nSELECT SUM(p.price \\* o.amount) AS loyalty\\_points\nFROM users u\nJOIN orders o ON u.id = o.user\\_id\nJOIN products p ON o.id = p.order\\_id\nGROUP BY u.id\nHAVING COUNT(o.id) >= 1\n) AS subquery;",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "Find the total amount of all orders placed and the corresponding final billed amount for transactions where the first time customer transaction flag is true.",
        "Query": "SELECT SUM(o.total_amount) as total_order_amount, SUM(t.final_billed_amount) as total_final_billed_amount FROM orders o JOIN transactions_and_payments t ON o.order_id = t.linked_order_reference_identifier WHERE t.first_time_customer_transaction = true;",
        "GeneratedQuery": "SELECT SUM(amount) as total\\_amount, SUM(amount) as final\\_billed\\_amount\nFROM orders\nWHERE id IN (\nSELECT MIN(id)\nFROM orders\nWHERE users.id = orders.user\\_id\nGROUP BY users.id\nHAVING COUNT(DISTINCT users.id) = 1\n);",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "List the campaign names and the number of customers who have made a purchase through each campaign in the last 60 days.",
        "Query": "SELECT c.campaign_name, COUNT(DISTINCT t.corresponding_customer_reference_identifier) FROM campaigns c JOIN transactions_and_payments t ON c.campaign_id = t.linked_order_reference_identifier WHERE t.transaction_date_and_time > NOW() - INTERVAL '60 day' GROUP BY c.campaign_name",
        "GeneratedQuery": "SELECT campaigns.name, COUNT(DISTINCT orders.user\\_id) as num\\_customers\nFROM orders\nJOIN (\n    SELECT id as campaign\\_id, name\n    FROM campaigns\n    WHERE campaigns.date >= NOW() - INTERVAL '60 day'\n) as campaigns\nON orders.campaign\\_id = campaigns.campaign\\_id\nGROUP BY campaigns.name;\n\nNote: The schema provided does not",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "Find the total number of customers who are premium members and have made at least one order in the last year, along with the average time spent on the site.",
        "Query": "SELECT COUNT(DISTINCT ci.person_customer_id), AVG(e.time_spent_seconds) AS avg_time_spent_seconds FROM customerinfo ci JOIN events e ON ci.person_customer_id = e.person_customer_id WHERE ci.person_is_premium = TRUE AND e.event_timestamp >= NOW() - INTERVAL '1 year' AND e.event_type = 'order';",
        "GeneratedQuery": "WITH premium\\_users AS (\nSELECT id\nFROM users\nWHERE age >= 60\n),\nlast\\_year\\_orders AS (\nSELECT user\\_id\nFROM orders\nWHERE date >= DATE\\_SUB(CURRENT\\_DATE, INTERVAL 1 YEAR)\n)\nSELECT COUNT(DISTINCT premium\\_users.id) AS total\\_premium\\_customers,\nAVG(TIMESTAMPDIFF(MINUTE, orders",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "Find the total amount spent by customers who have made more than one transaction.",
        "Query": "SELECT T2.corresponding_customer_reference_identifier, SUM(T1.total_amount) FROM orders AS T1 INNER JOIN transactions_and_payments AS T2 ON T1.order_id = T2.linked_order_reference_identifier GROUP BY T2.corresponding_customer_reference_identifier HAVING COUNT(T1.order_id) > 1",
        "GeneratedQuery": "SELECT SUM(amount)\nFROM orders\nWHERE user\\_id IN (\n    SELECT user\\_id\n    FROM orders\n    GROUP BY user\\_id\n    HAVING COUNT(\\*) > 1\n);",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "Find the total revenue generated from all campaigns that ended after January 1, 2023.",
        "Query": "SELECT SUM(revenue_generated) FROM campaigns WHERE end_date > '2023-01-01'",
        "GeneratedQuery": "SELECT SUM(amount)\nFROM orders\nWHERE date > '2023-01-01';",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "Find the customers who have purchased products with an average rating greater than 4 and get the product name and rating for each of them.",
        "Query": "SELECT T3.person_first_name, T3.person_last_name, T1.product_display_name, T1.aggregate_customer_review_rating FROM products AS T1 INNER JOIN product_reviews_and_ratings AS T2 ON T1.unique_product_identifier = T2.referenced_product_identifier INNER JOIN customerinfo AS T3 ON T2.reviewing_customer_identifier = T3.person_customer_id WHERE T1.aggregate_customer_review_rating > 4",
        "GeneratedQuery": "SELECT u.name AS customer\\_name, p.name AS product\\_name, avg(r.rating) AS average\\_rating\nFROM users u\nJOIN orders o ON u.id = o.user\\_id\nJOIN order\\_items oi ON o.id = oi.order\\_id\nJOIN products p ON oi.product\\_id = p.id\nJOIN ratings r ON p.id = r.product\\_id\nGROUP BY",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "How many orders were placed during a campaign with id 1?",
        "Query": "SELECT COUNT(order_id) FROM orders WHERE campaign_id = 1",
        "GeneratedQuery": "SELECT COUNT(\\*) FROM orders WHERE campaign\\_id = 1;\n\nNote: I'm assuming there is a 'campaign\\_id' column in the 'orders' table based on the query context. If this assumption is incorrect, please provide more information or adjust the schema accordingly.",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "List the customers who have ordered items with a warranty period of more than 2 years.",
        "Query": "SELECT T1.person_first_name, T1.person_last_name FROM customerinfo AS T1 INNER JOIN order_items AS T2 ON T1.person_customer_id = T2.order_id WHERE T2.warranty_period > 730",
        "GeneratedQuery": "SELECT DISTINCT u.name\nFROM users u\nJOIN orders o ON u.id = o.user\\_id\nJOIN products p ON o.id = p.id\nWHERE p.name IN ('warranty\\_1', 'warranty\\_2')\nAND p.stock > 0;\n\nNote: It is assumed that there is a 'warranty\\_1' and 'warranty\\_2'",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "Find all transactions where the customer has not previously made a purchase and the order was shipped to a billing address in the same city as the shipping address.",
        "Query": "SELECT t.* FROM transactions_and_payments t JOIN cart c ON t.linked_order_reference_identifier = c.id WHERE t.first_time_customer_transaction = TRUE AND t.billing_address_city = t.shipping_address_city",
        "GeneratedQuery": "SELECT o1.*\nFROM orders o1\nLEFT JOIN orders o2 ON o1.user\\_id = o2.user\\_id AND o1.id < o2.id\nWHERE o2.id IS NULL\nAND o1.date = (\n    SELECT MAX(o3.date)\n    FROM orders o3\n    WHERE o1.user\\_id = o3.user\\_id AND o3.id < o1.",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "What is the total amount spent by customers who have accumulated more than 1000 loyalty points and have placed orders with a total amount greater than $100, including the total discount applied and the tax amount, grouped by the loyalty program tier level?",
        "Query": "SELECT SUM(o.total_amount) AS total_amount, clpm.loyalty_program_tier_level FROM customers_loyalty_program AS clpm INNER JOIN orders AS o ON clpm.associated_customer_reference_id = o.person_customer_id WHERE clpm.accumulated_loyalty_points_balance > 1000 AND o.total_amount > 100 GROUP BY clpm.loyalty_program_tier_level",
        "GeneratedQuery": "SELECT t.tier\\_level, SUM(o.amount + d.discount - t.tax) as total\\_spent\nFROM users u\nJOIN orders o ON u.id = o.user\\_id\nJOIN (\nSELECT user\\_id, SUM(p.price * o.quantity) as loyalty\\_points, t.tier\\_level, SUM(t.tax\\_rate * (p.price * o.quant",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "Find the average star rating of reviews for products with a net weight greater than 1 kilogram.",
        "Query": "SELECT AVG(T1.submitted_review_star_rating) FROM product_reviews_and_ratings AS T1 INNER JOIN products AS T2 ON T1.referenced_product_identifier = T2.unique_product_identifier WHERE T2.net_weight_in_kilograms > 1",
        "GeneratedQuery": "I'm sorry for the confusion, but the schema provided does not include a \"reviews\" table, which would be necessary to find the average star rating. However, I can provide you with the SQL statement to find the products with a net weight greater than 1 kilogram, assuming that the \"products\" table has a \"weight\" column representing the net weight.\n\nSQL:\n```vbnet\nSELECT AVG(price)\nFROM products\nWHERE weight >",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "Find the average rating of suppliers that have supplied more than 100 products.",
        "Query": "SELECT AVG(average_supplier_rating) AS average_rating FROM suppliers WHERE total_number_of_products_supplied > 100;",
        "GeneratedQuery": "I'm sorry for the confusion, but the schema provided doesn't include any rating or supplier information. However, I'll provide a SQL query that would work if the schema included these details.\n\nSQL:\n```\nSELECT AVG(rating)\nFROM suppliers\nWHERE (\n  SELECT COUNT(*)\n  FROM products\n  WHERE suppliers.id = products.supplier_id\n) > 100;\n```\n\nPlease",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "Get all wishlist items for users who have placed orders with a payment status of 'paid' and order status of 'delivered' and also get the shipping details of those orders.",
        "Query": "SELECT w.*, s.* FROM wishlist w JOIN orders o ON w.fk_user_id = o.person_customer_id JOIN shipping s ON o.order_id = s.fk_order_id WHERE o.payment_status = 'paid' AND o.order_status = 'delivered'",
        "GeneratedQuery": "SELECT u.id, u.name, u.age, u.email, p.id as product\\_id, p.name as product\\_name, p.price, p.stock, o.id as order\\_id, o.amount, o.date, s.city, s.street, s.zip\nFROM users u\nJOIN orders o ON u.id = o.user\\_id\nJOIN order\\_status os ON o.status\\_",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "Which customers have accumulated more than 1000 loyalty points and are eligible for free shipping?",
        "Query": "SELECT associated_customer_reference_id FROM customers_loyalty_program WHERE accumulated_loyalty_points_balance > 1000 AND free_shipping_eligibility = TRUE",
        "GeneratedQuery": "SELECT DISTINCT users.id, users.name, users.age, users.email\nFROM users\nJOIN (\n    SELECT user\\_id\n    FROM orders\n    GROUP BY user\\_id\n    HAVING SUM(amount) > 1000\n) AS order\\_totals\nON users.id = order\\_totals.user\\_id;",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "Get the average time spent per session and the average cart value for sessions where the email was opened and a push notification was clicked.",
        "Query": "SELECT AVG(time_spent_seconds) AS average_time_spent, AVG(cart_value) AS average_cart_value FROM events WHERE email_opened = true AND push_notification_clicked = true;",
        "GeneratedQuery": "SELECT AVG(DATEDIFF('date', 'time_of_open_email')), AVG(amount)\nFROM sessions\nJOIN users ON sessions.user\\_id = users.id\nJOIN orders ON sessions.id = orders.session\\_id\nWHERE opened\\_email = true AND clicked\\_push\\_notification = true;",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "Find the total revenue generated by each campaign along with the total number of transactions made during the campaign's active period.",
        "Query": "SELECT c.campaign_name, SUM(c.revenue_generated) AS total_revenue, COUNT(t.transaction_unique_identifier) AS total_transactions FROM campaigns c LEFT JOIN transactions_and_payments t ON t.transaction_date_and_time BETWEEN c.start_date AND c.end_date GROUP BY c.campaign_name;",
        "GeneratedQuery": "SELECT o.user\\_id AS campaign, SUM(o.amount) AS total\\_revenue, COUNT(o.id) AS total\\_transactions\nFROM orders o\nJOIN users u ON o.user\\_id = u.id\nGROUP BY o.user\\_id;",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "Find all the customers who have a total order value greater than $1000, have their newsletter subscription enabled, have a premium account, and have returned at least one product with a restocking fee, and also find the average number of products supplied by the supplier with the highest average supplier rating who is operating in the same country as the customer, and the total shipping cost for all the orders of these customers.",
        "Query": "SELECT T1.person_customer_id, T1.person_first_name, T1.person_last_name, AVG(T3.total_number_of_products_supplied), SUM(T4.shipping_cost) FROM customerinfo AS T1 INNER JOIN refunds_returns AS T2 ON T1.person_customer_id = T2.fk_user_id INNER JOIN suppliers AS T3 ON T3.supplier_country_of_operation = T1.address_country INNER JOIN shipping AS T4 ON T4.fk_order_id = T2.fk_order_id WHERE T1.preferences_total_orders * T1.preferences_avg_spent_per_order > 1000 AND T1.preferences_newsletter_subscription = TRUE AND T1.person_is_premium = TRUE AND T2.restocking_fee > 0 AND T3.average_supplier_rating = (SELECT MAX(average_supplier_rating) FROM suppliers) GROUP BY T1.person_customer_id, T1.person_first_name, T1.person_last_name",
        "GeneratedQuery": "```\nSELECT u.id, u.name, u.email, AVG(o.amount) as avg_order_amount, AVG(p.stock) as avg_stock, SUM(op.shipping_cost) as total_shipping_cost\nFROM users u\nJOIN orders o ON u.id = o.user_id\nJOIN products op ON o.id = op.order_id\nJOIN (\n    SE",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "Find the total revenue generated by campaigns that targeted customers who prefer a specific favorite category.",
        "Query": "SELECT SUM(c.revenue_generated) FROM campaigns c JOIN customerinfo ci ON ci.preferences_favorite_category = c.target_audience;",
        "GeneratedQuery": "SELECT SUM(amount)\nFROM orders\nJOIN users ON orders.user\\_id = users.id\nWHERE EXISTS (\n    SELECT 1\n    FROM (\n        SELECT user\\_id, MIN(products.id) AS favorite_product_id\n        FROM orders\n        JOIN products ON orders.id = products.order_id\n        GROUP BY user\\_id\n    ) AS favorite_products\n    WHERE favorite_",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "Identify the highest and lowest stock levels for products supplied by suppliers who have an average supplier rating of less than 3.5, along with the product's last updated date and the supplier's official business name.",
        "Query": "SELECT i.referenced_product_id, MIN(i.quantity) AS lowest_stock_level, MAX(i.quantity) AS highest_stock_level, i.last_updated, s.official_supplier_business_name FROM inventory i JOIN suppliers s ON i.supplier_id = s.supplier_unique_identifier WHERE s.average_supplier_rating < 3.5 GROUP BY i.referenced_product_id, i.last_updated, s.official_supplier_business_name",
        "GeneratedQuery": "SELECT p.id, MAX(p.stock) AS max\\_stock, MIN(p.stock) AS min\\_stock, MAX(o.date) AS last\\_updated\\_date\nFROM products p\nJOIN (\n    SELECT user\\_id\n    FROM orders\n    GROUP BY user\\_id\n    HAVING AVG(amount) < 3.5\n) AS low\\_rated\\_suppliers\nON p.id = orders.product",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "What is the average refund amount and status for each return type?",
        "Query": "SELECT T1.return_type, AVG(T1.refund_amount), T1.status FROM refunds_returns AS T1 INNER JOIN wishlist AS T2 ON T1.fk_product_id = T2.fk_product_id GROUP BY T1.return_type, T1.status",
        "GeneratedQuery": "SELECT return_type, AVG(refund_amount) AS avg\\_refund_amount, COUNT(*) AS count\nFROM (\n    SELECT r.return\\_type, o.amount AS refund\\_amount, 'refunded' AS status\n    FROM orders o\n    JOIN returns r ON o.id = r.order_id\n    WHERE o.amount < 0\n) t\nGROUP BY return\\_type;",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "Find all the transactions where the payment method used is 'visa' and the corresponding customer reference identifier is 12345.",
        "Query": "SELECT * FROM transactions_and_payments WHERE payment_method_used = 'visa' AND corresponding_customer_reference_identifier = 12345",
        "GeneratedQuery": "SELECT orders.\\*\nFROM orders\nJOIN users ON orders.user\\_id = users.id\nWHERE users.email = '12345' AND orders.amount IS NOT NULL;",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "Get the order id, total amount, and shipping fee for all orders with a payment status of 'paid' and a total amount greater than 100.",
        "Query": "SELECT order_id, total_amount, shipping_fee FROM orders WHERE payment_status = 'paid' AND total_amount > 100",
        "GeneratedQuery": "SELECT orders.id, SUM(amount) as total\\_amount, 0 as shipping\\_fee\nFROM orders\nJOIN users ON orders.user\\_id = users.id\nWHERE payment\\_status = 'paid' AND SUM(amount) > 100\nGROUP BY orders.id;",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "Which customers have spent more than $1000 in the last year and have a lifetime loyalty points earned of more than 5000, and also show the average loyalty points balance and the count of orders for these customers, including the top 3 products they have ordered with the highest retail price?",
        "Query": "SELECT clp.associated_customer_reference_id, AVG(clp.accumulated_loyalty_points_balance), COUNT(o.order_id), p.product_display_name, p.standard_retail_price_including_tax FROM customers_loyalty_program clp JOIN orders o ON clp.associated_customer_reference_id = o.person_customer_id JOIN order_items oi ON o.order_id = oi.order_id JOIN products p ON oi.product_id = p.unique_product_identifier WHERE o.order_date > NOW() - INTERVAL '1 year' AND o.total_amount > 1000 AND clp.lifetime_loyalty_points_earned > 5000 GROUP BY clp.associated_customer_reference_id, p.product_display_name, p.standard_retail_price_including_tax ORDER BY p.standard_retail_price_including_tax DESC LIMIT 3",
        "GeneratedQuery": "```sql\nSELECT u.id, u.name, AVG(lp.balance) AS avg_balance, COUNT(o.user_id) AS order_count,\n       p1.name AS top_product1, p2.name AS top_product2, p3.name AS top_product3\nFROM users u\nJOIN orders o ON u.id = o.user_id\nJOIN (\n    SELECT user_id,",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "Find the number of orders and total amount of all orders for each shipping state that have a discount applied.",
        "Query": "SELECT COUNT(order_id), SUM(total_amount), shipping_address_state FROM orders WHERE discount_applied IS NOT NULL GROUP BY shipping_address_state",
        "GeneratedQuery": "SELECT shipping\\_state, COUNT(*) as num\\_orders, SUM(amount) as total\\_amount\nFROM orders\nWHERE discount IS NOT NULL\nGROUP BY shipping\\_state;",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "Find all the carts where the total price is greater than 50 and the cart status is 'active'.",
        "Query": "SELECT * FROM cart WHERE total_price > 50 AND cart_status = 'active'",
        "GeneratedQuery": "SELECT users.id, users.name, users.age, users.email, SUM(products.price * orders.amount) as total\\_price\nFROM users\nJOIN orders ON users.id = orders.user\\_id\nJOIN products ON orders.id = products.id\nWHERE orders.status = 'active' AND total\\_price > 50\nGROUP BY users.id, users.name, users.name, users.age, users.",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "What is the total amount spent by customers who have accumulated more than 1000 loyalty points, have a loyalty program tier level of 'gold', have not had any chargeback requests, have made a payment using the same billing and shipping address, have purchased at least one item with a price per unit greater than $50, and have a customer feedback engagement score greater than 4, and what is the average number of loyalty points earned by these customers, considering only orders with a total amount greater than $500 and a delivery date within the last 3 months?",
        "Query": "SELECT SUM(O.total_amount), AVG(C.accumulated_loyalty_points_balance) FROM orders O INNER JOIN transactions_and_payments T ON O.order_id = T.linked_order_reference_identifier INNER JOIN customers_loyalty_program C ON T.corresponding_customer_reference_identifier = C.associated_customer_reference_id INNER JOIN order_items I ON O.order_id = I.order_id WHERE C.accumulated_loyalty_points_balance > 1000 AND C.loyalty_program_tier_level = 'gold' AND T.chargeback_request_status = FALSE AND T.billing_address_street = T.shipping_address_street AND T.billing_address_city = T.shipping_address_city AND T.billing_address_state = T.shipping_address_state AND T.billing_address_country = T.shipping_address_country AND T.billing_address_zip_code = T.shipping_address_zip_code AND I.price_per_unit > 50 AND C.customer_feedback_engagement_score > 4 AND O.total_amount > 500 AND O.delivery_date > NOW() - INTERVAL '3 month'",
        "GeneratedQuery": "SELECT \n    SUM(o.amount) AS total\\_amount\\_spent,\n    AVG(lp.points) AS avg\\_loyalty\\_points\nFROM \n    users u\nJOIN \n    orders o ON u.id = o.user\\_id\nJOIN \n    loyalty\\_program lp ON u.id = lp.user\\_id\nLEFT JOIN \n    chargebacks cb ON u.id = cb.user",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "Get the total number of orders, total transaction amount, and average loyalty points earned per order for customers who have made a purchase in the last 30 days, have a premium account, and have a total of at least 2 wishlist items, along with the average scroll depth percentage and click count for these customers",
        "Query": "SELECT COUNT(DISTINCT t.linked_order_reference_identifier), SUM(t.total_transaction_amount), AVG(t.associated_loyalty_points_earned), AVG(e.scroll_depth_percentage), AVG(e.click_count) FROM customerinfo c JOIN transactions_and_payments t ON c.person_customer_id = t.corresponding_customer_reference_identifier JOIN events e ON c.person_customer_id = e.person_customer_id WHERE c.person_is_premium = TRUE AND t.transaction_date_and_time > NOW() - INTERVAL '30 day' AND c.preferences_wishlist_items >= 2 GROUP BY c.person_customer_id",
        "GeneratedQuery": "SELECT \n    COUNT(o.id) AS total\\_orders,\n    SUM(o.amount) AS total\\_transaction\\_amount,\n    AVG(o.id) AS avg\\_loyalty\\_points\\_per\\_order,\n    AVG(p.click\\_count) AS avg\\_click\\_count,\n    AVG(p.scroll\\_depth\\_percentage) AS avg\\_scroll\\_depth\\_percentage",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "Find the total revenue generated by each campaign along with the number of total conversions and the number of products added to wishlists during the campaign period.",
        "Query": "SELECT c.campaign_name, SUM(c.revenue_generated) AS total_revenue, SUM(c.conversions) AS total_conversions, COUNT(w.id) AS total_wishlist_additions FROM campaigns c LEFT JOIN wishlist w ON w.added_at BETWEEN c.start_date AND c.end_date GROUP BY c.campaign_name;",
        "GeneratedQuery": "SELECT o.campaign, SUM(o.amount) AS total\\_revenue, COUNT(o.id) AS total\\_conversions, SUM(w.added\\_to\\_wishlist) AS products\\_added\\_to\\_wishlists\nFROM orders o\nLEFT JOIN campaigns c ON o.date BETWEEN c.start\\_date AND c.end\\_date\nLEFT JOIN wishlists w ON o.date BETWEEN w",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "What are the total amounts of orders made by each customer who has left a review?",
        "Query": "SELECT T1.total_amount FROM orders AS T1 INNER JOIN product_reviews_and_ratings AS T2 ON T1.person_customer_id = T2.reviewing_customer_identifier",
        "GeneratedQuery": "SELECT u.name, SUM(o.amount)\nFROM users u\nJOIN orders o ON u.id = o.user\\_id\nJOIN (\n    SELECT DISTINCT user\\_id\n    FROM reviews\n) r ON u.id = r.user\\_id\nGROUP BY u.name;",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "List all products that have been added to a wishlist with a priority level of high and are currently out of stock, along with the customer's notes and the product's detailed description, considering only products that have a standard retail price less than $50 and are from a specific brand.",
        "Query": "SELECT p.product_display_name, p.detailed_product_description, w.notes FROM wishlist w JOIN products p ON w.fk_product_id = p.unique_product_identifier JOIN inventory i ON p.unique_product_identifier = i.referenced_product_id WHERE w.priority_level = 'high' AND i.quantity = 0 AND p.standard_retail_price_including_tax < 50 AND p.global_brand_affiliation = 'Specific Brand'",
        "GeneratedQuery": "SELECT products.id, products.name, products.price, products.description, wishlists.notes\nFROM products\nJOIN orders ON products.id = orders.product_id\nJOIN users ON orders.user_id = users.id\nJOIN wishlists ON orders.id = wishlists.order_id\nWHERE products.stock = 0 AND products.price < 50 AND products.brand = 'specific brand' AND wishlists.priority =",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "Retrieve all reviews that have been flagged as inappropriate and the customer's first and last name.",
        "Query": "SELECT pr.textual_review_feedback, ci.person_first_name, ci.person_last_name FROM product_reviews_and_ratings pr JOIN customerinfo ci ON pr.reviewing_customer_identifier = ci.person_customer_id WHERE pr.flagged_as_inappropriate = TRUE;",
        "GeneratedQuery": "SELECT users.name \nFROM users \nJOIN orders \nON users.id = orders.user\\_id \nWHERE orders.id IN (\n    SELECT review\\_id \n    FROM flags \n    WHERE reason = 'inappropriate'\n);",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "Retrieve the product display name and the average review star rating for all products that have received at least 5 reviews.",
        "Query": "SELECT p.product_display_name, AVG(pr.submitted_review_star_rating) AS average_rating FROM products p JOIN product_reviews_and_ratings pr ON p.unique_product_identifier = pr.referenced_product_identifier GROUP BY p.product_display_name HAVING COUNT(pr.review_unique_identifier) >= 5;",
        "GeneratedQuery": "SELECT products.name AS product\\_display\\_name, AVG(reviews.star\\_rating) AS average\\_review\\_star\\_rating\nFROM products\nJOIN (\n    SELECT product\\_id, AVG(star\\_rating) AS star\\_rating\n    FROM reviews\n    GROUP BY product\\_id\n) AS reviews ON products.id = reviews.product\\_id\nWHERE reviews.star\\_rating IS NOT NULL\nGROUP BY products.name",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "Get the total discount amount redeemed by customers in the loyalty program.",
        "Query": "SELECT SUM(total_discount_amount_redeemed) FROM customers_loyalty_program;",
        "GeneratedQuery": "SELECT SUM(amount) \nFROM orders \nWHERE user\\_id IN (\n    SELECT id \n    FROM users \n    WHERE email LIKE '%loyalty%'\n);",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "Find the number of reviews and ratings where the review was flagged as inappropriate.",
        "Query": "SELECT COUNT(*) FROM product_reviews_and_ratings WHERE flagged_as_inappropriate = TRUE;",
        "GeneratedQuery": "I'm sorry for the confusion, but the provided schema does not include a \"reviews\" table, so it's not possible to generate a SQL query for the given natural language query. However, I can help you generate a SQL query if you provide a correct schema or modify the query to fit the existing schema.",
        "ExecutionStatus": "Error",
        "ErrorMessage": "Invalid SQL syntax"
    },
    {
        "NL": "Retrieve the average star rating for products that have received more than 50 helpful votes.",
        "Query": "SELECT AVG(submitted_review_star_rating) FROM product_reviews_and_ratings WHERE number_of_helpful_votes_received > 50;",
        "GeneratedQuery": "I'm sorry for the confusion, but the schema you provided does not include a table or column for star ratings or helpful votes. I would need that information to generate an accurate SQL query. However, I can give you a general template for the query you're asking for:\n\nSQL:\n```\nSELECT AVG(rating)\nFROM products\nWHERE stock > 50 AND \n      (SELECT COUNT(*) FROM votes WHERE product_id = products",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "For all the customers who have both placed an order and added at least one item to their wishlist, display the customer's name, order count, wishlist count, and average order total amount.",
        "Query": "SELECT T1.person_customer_id, COUNT(T1.order_id), COUNT(T2.id), AVG(T1.total_amount) FROM orders AS T1 INNER JOIN wishlist AS T2 ON T1.person_customer_id = T2.fk_user_id GROUP BY T1.person_customer_id HAVING COUNT(T1.order_id) > 0 AND COUNT(T2.id) > 0;",
        "GeneratedQuery": "SELECT u.name, COUNT(o.id) AS order\\_count, COUNT(w.id) AS wishlist\\_count, AVG(o.amount) AS avg\\_order\\_total\nFROM users u\nJOIN orders o ON u.id = o.user\\_id\nLEFT JOIN (\n SELECT DISTINCT user\\_id\n FROM wishlist\n) w ON u.id = w.user\\_id\nGROUP BY u.",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "Retrieve the transaction details of all fraudulent transactions.",
        "Query": "SELECT * FROM transactions_and_payments WHERE is_transaction_fraudulent = TRUE;",
        "GeneratedQuery": "I'm sorry for the confusion, but the schema provided doesn't seem to include any information about what constitutes a \"fraudulent transaction\". In order to generate an accurate SQL query, I would need more information about how to identify such transactions.\n\nFor example, if there were a column in the `orders` table indicating whether each transaction was fraudulent or not, the query might look something like this:\n```\nSELECT users.name, orders.amount, orders",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "What is the average amount spent per order for customers with a premium account?",
        "Query": "SELECT AVG(preferences_avg_spent_per_order) FROM customerinfo WHERE person_is_premium = True",
        "GeneratedQuery": "SELECT AVG(amount) \nFROM orders \nJOIN users ON orders.user\\_id = users.id \nWHERE users.age > 50;",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "Find the total number of loyalty points accumulated by customers who have redeemed more than 100 loyalty points and have at least one product in their cart with a promotional discount of more than 20%.",
        "Query": "SELECT SUM(clp.accumulated_loyalty_points_balance) FROM customers_loyalty_program clp JOIN cart c ON clp.associated_customer_reference_id = c.fk_user_id JOIN products p ON c.fk_product_id = p.unique_product_identifier WHERE clp.lifetime_loyalty_points_redeemed > 100 AND p.percentage_discount_applied > 20;",
        "GeneratedQuery": "WITH redeemed\\_points AS (\nSELECT user\\_id, SUM(amount) as total\\_points\nFROM orders\nGROUP BY user\\_id\nHAVING total\\_points > 100\n),\npromo\\_discounts AS (\nSELECT user\\_id\nFROM orders\nJOIN products ON orders.id = products.order\\_id\nWHERE products.price < 0.8\\*products.normal\\_price\n)\nSELECT COUNT(",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "Find all reviews with a rating of 5 and the customer has edited the review at least once.",
        "Query": "SELECT * FROM product_reviews_and_ratings WHERE submitted_review_star_rating = 5 AND user_has_edited_review = TRUE AND total_number_of_edits_made > 0",
        "GeneratedQuery": "I'm sorry for the confusion, but there seems to be a mistake in the query as there are no \"reviews\" or \"rating\" fields mentioned in the provided schema. However, I will provide a SQL query for a similar scenario using the existing schema.\n\nTo find all orders with an amount greater than or equal to 5 from users who have at least two orders, you can use the following SQL statement:\n\n```sql\nSELECT users.id, users.name",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "Retrieve the shipping details for all orders where the shipping status is 'delivered', along with the total price of items in those orders.",
        "Query": "SELECT s.id, s.estimated_delivery, s.shipped_date, s.shipping_cost, s.shipping_address, s.shipping_city, s.shipping_state, s.shipping_zipcode, s.shipping_country, s.shipping_status, s.tracking_number, s.carrier, SUM(oi.total_price) AS total_order_price FROM shipping s JOIN order_items oi ON s.fk_order_id = oi.order_id WHERE s.shipping_status = 'delivered' GROUP BY s.id, s.estimated_delivery, s.shipped_date, s.shipping_cost, s.shipping_address, s.shipping_city, s.shipping_state, s.shipping_zipcode, s.shipping_country, s.shipping_status, s.tracking_number, s.carrier;",
        "GeneratedQuery": "SELECT o.id AS order\\_id, u.name AS username, u.email AS useremail, o.date AS orderdate, SUM(p.price) AS totalprice\nFROM orders o\nJOIN users u ON u.id = o.user\\_id\nJOIN products p ON p.id = o.id\nWHERE o.shipping\\_status = 'delivered'\nGROUP BY o.id, u.name, u.email",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "Find the customer information and transaction details of all customers who have applied for a refund, along with the refund amount and the product they purchased, also including the shipping address and the estimated delivery date. Ensure that the customer is not a premium customer and the transaction amount is greater than 100.",
        "Query": "SELECT T1.person_first_name, T1.person_last_name, T1.address_street, T2.linked_order_reference_identifier, T2.transaction_unique_identifier, T2.total_transaction_amount, T3.fk_product_id, T3.refund_amount, T4.shipping_city, T4.shipping_zipcode, T4.shipping_address, T4.estimated_delivery FROM customerinfo AS T1 INNER JOIN transactions_and_payments AS T2 ON T2.corresponding_customer_reference_identifier = T1.person_customer_id INNER JOIN refunds_returns AS T3 ON T3.fk_user_id = T1.person_customer_id INNER JOIN shipping AS T4 ON T4.fk_order_id = T3.fk_order_id WHERE T1.person_is_premium = FALSE AND T2.total_transaction_amount > 100 AND T3.is_refundable = TRUE",
        "GeneratedQuery": "SELECT u.id, u.name, u.age, u.email, o.id, o.user\\_id, o.amount, o.date, r.refund\\_amount, p.id, p.name, p.price, p.stock, s.shipping\\_address, s.estimated\\_delivery\\_date\nFROM users u\nJOIN orders o ON u.id = o.user\\_id\nJOIN refunds r ON",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "Find the total amount of transactions for customers who have placed an order with a total amount greater than 100, have a loyalty program status with a balance greater than 100, and have made a transaction in the last 30 days. Also, include the customer's name and order status in the results.",
        "Query": "SELECT SUM(tp.total_transaction_amount), ci.person_first_name, ci.person_last_name, o.order_status FROM transactions_and_payments tp INNER JOIN orders o ON tp.linked_order_reference_identifier = o.order_id INNER JOIN customerinfo ci ON tp.corresponding_customer_reference_identifier = ci.person_customer_id WHERE o.total_amount > 100 AND ci.account_account_balance > 100 AND tp.transaction_date_and_time >= NOW() - INTERVAL '30 day' GROUP BY ci.person_first_name, ci.person_last_name, o.order_status",
        "GeneratedQuery": "SELECT u.name, SUM(o.amount) as total\\_transaction\\_amount\nFROM users u\nJOIN orders o ON u.id = o.user\\_id\nJOIN (\nSELECT user\\_id, SUM(amount) as total\\_order\\_amount\nFROM orders\nWHERE date >= NOW() - INTERVAL 30 DAY\nGROUP BY user\\_id\n) t ON u.id = t.user\\_id\nW",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "Find all products that have an average customer review rating greater than or equal to 4.5, and are supplied by a supplier with an average supplier rating greater than or equal to 4.5, and have a standard retail price including tax less than or equal to $100, and are flagged as environmentally sustainable, and are featured products, and have a total number of verified reviews greater than or equal to 1000, and have a shipping weight measurement in kilograms less than or equal to 5 kilograms.",
        "Query": "SELECT p.* FROM products p INNER JOIN suppliers s ON p.associated_supplier_reference_id = s.supplier_unique_identifier WHERE p.aggregate_customer_review_rating >= 4.5 AND s.average_supplier_rating >= 4.5 AND p.standard_retail_price_including_tax <= 100 AND p.environmentally_sustainable_product = TRUE AND p.featured_product_flag = TRUE AND p.total_number_of_verified_reviews >= 1000 AND p.shipping_weight_measurement_in_kilograms <= 5",
        "GeneratedQuery": "SELECT * FROM products\nWHERE price * 1.05 <= 100\nAND sustainable = TRUE\nAND featured = TRUE\nAND (\n    SELECT AVG(rating) FROM reviews\n    WHERE product\\_id = products.id\n    AND verified = TRUE\n) >= 4.5\nAND shipping\\_weight_kg <= 5;",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "Retrieve the total transaction amount for each transaction where the transaction status is 'completed' and the fraud detection flagged is false.",
        "Query": "SELECT SUM(total_transaction_amount) FROM transactions_and_payments WHERE transaction_status = 'completed' AND fraud_detection_flagged = false;",
        "GeneratedQuery": "SELECT SUM(amount) as total\\_transaction\\_amount\nFROM orders\nWHERE status = 'completed' AND fraud\\_detected = false;",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "Find the total number of products supplied by each supplier, and the average rating of each supplier, and the total number of verified reviews for each product supplied by each supplier, and the average retail price of each product supplied by each supplier, and the total number of transactions made for each product supplied by each supplier.",
        "Query": "SELECT t1.supplier_unique_identifier, COUNT(DISTINCT t2.unique_product_identifier), AVG(t1.average_supplier_rating), AVG(t2.total_number_of_verified_reviews), AVG(t2.standard_retail_price_including_tax), COUNT(DISTINCT t3.transaction_unique_identifier) FROM suppliers AS t1 INNER JOIN products AS t2 ON t1.supplier_unique_identifier = t2.associated_supplier_reference_id INNER JOIN transactions_and_payments AS t3 ON t3.linked_order_reference_identifier = t2.unique_product_identifier GROUP BY t1.supplier_unique_identifier",
        "GeneratedQuery": "SELECT \n    suppliers.id, \n    COUNT(DISTINCT products.id) as total_products,\n    AVG(ratings.rating) as average_rating,\n    SUM(ratings.verified) as total_verified_reviews,\n    AVG(products.price) as average_retail_price,\n    SUM(orders.id) as total_transactions\nFROM \n    (SELECT",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "Find the total number of premium customers who have made more than 10 orders and have a loyalty points balance greater than 500.",
        "Query": "SELECT COUNT(*) FROM customerinfo WHERE person_is_premium = true AND preferences_total_orders > 10 AND person_loyalty_points > 500;",
        "GeneratedQuery": "SELECT COUNT(\\*)\nFROM users\nWHERE age >= 65 AND (\n  SELECT COUNT(\\*)\n  FROM orders\n  WHERE users.id = orders.user\\_id\n) > 10 AND (\n  SELECT SUM(amount)\n  FROM orders\n  WHERE users.id = orders.user\\_id\n) > 500;",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "Find all customers who have initiated a refund and have a transaction status of 'Completed'.",
        "Query": "SELECT DISTINCT corresponding_customer_reference_identifier FROM transactions_and_payments WHERE refund_initiation_date IS NOT NULL AND transaction_status = 'Completed'",
        "GeneratedQuery": "SELECT u.*\nFROM users u\nJOIN orders o ON u.id = o.user\\_id\nWHERE o.amount < 0 AND o.date IS NOT NULL;",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "Find the total number of customers who have an active subscription and are over 30 years old.",
        "Query": "SELECT COUNT(*) FROM customerinfo WHERE account_has_active_subscription = true AND DATE_PART('year', AGE(person_date_of_birth)) > 30;",
        "GeneratedQuery": "SELECT COUNT(DISTINCT users.id)\nFROM users\nJOIN orders ON users.id = orders.user\\_id\nWHERE users.age > 30 AND orders.date >= CURDATE();",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "Retrieve the average star rating of reviews for products that have received more than 50 helpful votes and were submitted by premium customers who have made more than 10 purchases, along with the customer's first name and last name, filtering out reviews that are flagged as inappropriate and sorting the results by the customer's last name in descending order.",
        "Query": "SELECT AVG(prar.submitted_review_star_rating) AS average_star_rating, ci.person_first_name, ci.person_last_name FROM product_reviews_and_ratings prar JOIN customerinfo ci ON prar.reviewing_customer_identifier = ci.person_customer_id WHERE prar.number_of_helpful_votes_received > 50 AND ci.person_is_premium = TRUE AND ci.preferences_total_orders > 10 AND prar.flagged_as_inappropriate = FALSE GROUP BY ci.person_first_name, ci.person_last_name ORDER BY ci.person_last_name DESC;",
        "GeneratedQuery": "SELECT u.name AS customer\\_name, AVG(r.star\\_rating) AS avg\\_star\\_rating\nFROM users u\nJOIN orders o ON u.id = o.user\\_id\nJOIN reviews r ON o.id = r.order\\_id\nWHERE r.helpful\\_votes > 50 AND u.is\\_premium = TRUE AND o.id IN (\n    SELECT o2.id\n    FROM",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "Find the total number of orders placed by customers who are premium members and have an active subscription.",
        "Query": "SELECT COUNT(*) FROM orders INNER JOIN customerinfo ON orders.person_customer_id = customerinfo.person_customer_id WHERE customerinfo.person_is_premium = true AND customerinfo.account_has_active_subscription = true;",
        "GeneratedQuery": "SELECT COUNT(\\*)\nFROM orders\nWHERE user\\_id IN (\n    SELECT id\n    FROM users\n    WHERE age >= 18 AND email LIKE '%premium%'\n) AND date > CURDATE();",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "Get the details of all campaigns that have a start date later than '2022-01-01' and are of type 'email'",
        "Query": "SELECT * FROM campaigns WHERE start_date > '2022-01-01' AND campaign_type = 'email'",
        "GeneratedQuery": "I'm sorry for the confusion, but there are no campaigns or start dates in the provided schema. I assume you meant to ask for orders with a date later than '2022-01-01' and a type of 'email' in the users table. Here's the converted SQL query:\n\n```sql\nSELECT users.id, users.name, users.age, users.email, orders.id, orders.user_id, orders.",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "What is the number of customers who are eligible for special promotions and have accumulated more than 1000 loyalty points, along with the total discount amount redeemed and the total number of helpful votes received by reviews submitted by these customers, grouped by the loyalty program tier level?",
        "Query": "SELECT T1.loyalty_program_tier_level, COUNT(DISTINCT T1.associated_customer_reference_id), SUM(T1.total_discount_amount_redeemed), SUM(T2.number_of_helpful_votes_received) FROM customers_loyalty_program AS T1 INNER JOIN product_reviews_and_ratings AS T2 ON T1.associated_customer_reference_id = T2.reviewing_customer_identifier WHERE T1.accumulated_loyalty_points_balance > 1000 AND T1.eligible_for_special_promotions = TRUE GROUP BY T1.loyalty_program_tier_level",
        "GeneratedQuery": "SELECT t.tier_level, COUNT(DISTINCT u.id) as num\\_customers, SUM(o.discount) as total\\_discount, SUM(r.helpful_votes) as total\\_helpful\\_votes\nFROM users u\nJOIN orders o ON u.id = o.user\\_id\nJOIN (\n    SELECT loyalty\\_program\\_id, tier\\_level\n    FROM loyalty\\_program",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "Find the number of orders shipped in the past 24 hours, grouped by shipping status.",
        "Query": "SELECT shipping_status, COUNT(*) FROM shipping WHERE shipped_date >= NOW() - INTERVAL '24 hours' GROUP BY shipping_status",
        "GeneratedQuery": "SELECT shipping\\_status, COUNT(\\*) \nFROM orders \nWHERE date >= NOW() - INTERVAL 24 HOUR \nGROUP BY shipping\\_status;",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "Find all non-premium customers who have not placed any orders this year and have a subscription, list their email, phone number, and last login date.",
        "Query": "SELECT ci.person_email, ci.person_phone_number, ci.person_last_login FROM customerinfo ci LEFT JOIN orders o ON ci.person_customer_id = o.person_customer_id WHERE ci.person_is_premium = FALSE AND ci.account_has_active_subscription = TRUE AND (o.order_date IS NULL OR EXTRACT(YEAR FROM o.order_date) != EXTRACT(YEAR FROM CURRENT_DATE))",
        "GeneratedQuery": "SELECT email, phone, last\\_login\nFROM users\nWHERE id NOT IN (\n    SELECT user\\_id\n    FROM orders\n    WHERE YEAR(date) = YEAR(CURRENT\\_DATE())\n) AND id IN (\n    SELECT user\\_id\n    FROM subscriptions\n) AND age != 'premium';",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "What is the average shipping cost for orders that have been shipped and have a shipping status of 'delivered'?",
        "Query": "SELECT AVG(shipping_cost) FROM shipping WHERE shipping_status = 'delivered' AND shipped_date IS NOT NULL",
        "GeneratedQuery": "SELECT AVG(amount)\nFROM orders\nWHERE shipping_status = 'delivered';",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "What are the order IDs and shipping costs for orders that have been shipped and have a shipping status of 'delivered'?",
        "Query": "SELECT o.order_id, s.shipping_cost FROM orders o JOIN shipping s ON o.order_id = s.fk_order_id WHERE s.shipping_status = 'delivered' AND s.shipped_date IS NOT NULL",
        "GeneratedQuery": "SELECT orders.id, orders.amount AS shipping\\_cost\nFROM orders\nJOIN users ON orders.user\\_id = users.id\nWHERE orders.date IS NOT NULL AND orders.shipping\\_status = 'delivered';",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "Find the total revenue generated for each campaign along with the total shipping cost for the corresponding orders",
        "Query": "SELECT c.campaign_name, SUM(c.revenue_generated) AS total_revenue, SUM(s.shipping_cost) AS total_shipping_cost FROM campaigns c JOIN shipping s ON c.campaign_id = s.fk_order_id GROUP BY c.campaign_name",
        "GeneratedQuery": "SELECT o.campaign, SUM(o.amount) AS total\\_revenue, SUM(p.price * o.quantity) AS total\\_shipping\\_cost\nFROM orders o\nJOIN products p ON o.product\\_id = p.id\nGROUP BY o.campaign;",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "List all customers who have a newsletter subscription and their wishlist items.",
        "Query": "SELECT person_email, product_name FROM customerinfo JOIN wishlist ON customerinfo.person_customer_id = wishlist.fk_user_id WHERE preferences_newsletter_subscription = true;",
        "GeneratedQuery": "SELECT users.name, products.name \nFROM users \nJOIN orders ON users.id = orders.user\\_id \nWHERE users.email IN (SELECT email FROM subscriptions) \nAND orders.id IN (SELECT product\\_id FROM wishlists);",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "Find the total number of loyalty points for customers with free shipping eligibility and the average supplier rating of their suppliers.",
        "Query": "SELECT SUM(clpb.accumulated_loyalty_points_balance) AS total_loyalty_points, AVG(s.average_supplier_rating) AS average_supplier_rating FROM customers_loyalty_program clpb JOIN order_items oi ON clpb.associated_customer_reference_id = oi.order_id JOIN suppliers s ON oi.product_id = s.supplier_unique_identifier WHERE clpb.free_shipping_eligibility = TRUE",
        "GeneratedQuery": "SELECT \n    COUNT(DISTINCT u.id) AS total_loyalty_points, \n    AVG(p.rating) AS avg_supplier_rating\nFROM \n    users u\nJOIN \n    orders o ON u.id = o.user\\_id\nJOIN \n    (SELECT \n        supplier\\_id, \n        AVG(rating) AS rating\n    FROM \n        product\\_",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "Find all reviews that have a sentiment analysis score greater than or equal to 0.8, and are from customers who have made at least 5 previous purchases, and have a review approval moderation status of 'Approved', and have a review moderator note containing the word 'Excellent', and are associated with products that have a standard retail price including tax greater than $50, and are from suppliers with an average supplier rating greater than or equal to 4.5, and are flagged as environmentally sustainable, and have a total number of verified reviews greater than or equal to 500.",
        "Query": "SELECT prr.* FROM product_reviews_and_ratings prr INNER JOIN products p ON prr.referenced_product_identifier = p.unique_product_identifier INNER JOIN suppliers s ON p.associated_supplier_reference_id = s.supplier_unique_identifier WHERE prr.sentiment_analysis_score >= 0.8 AND prr.previous_product_purchases_count >= 5 AND prr.review_approval_moderation_status = 'Approved' AND prr.review_moderator_notes LIKE '%Excellent%' AND p.standard_retail_price_including_tax > 50 AND s.average_supplier_rating >= 4.5 AND p.environmentally_sustainable_product = TRUE AND p.total_number_of_verified_reviews >= 500",
        "GeneratedQuery": "SELECT reviews.\\*\nFROM reviews\nJOIN users ON reviews.user\\_id = users.id\nJOIN orders ON users.id = orders.user\\_id\nJOIN products ON reviews.product\\_id = products.id\nJOIN suppliers ON products.supplier\\_id = suppliers.id\nWHERE reviews.sentiment\\_score >= 0.8\nAND orders.count >= 5\nAND reviews.moderation\\_status = 'Approved'",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "What is the average supplier rating?",
        "Query": "SELECT AVG(average_supplier_rating) FROM suppliers",
        "GeneratedQuery": "I'm sorry for the confusion, but the schema provided does not include any table or column related to a \"supplier rating\". Therefore, I cannot generate a valid SQL statement for the given query.",
        "ExecutionStatus": "Error",
        "ErrorMessage": "Invalid SQL syntax"
    },
    {
        "NL": "Get the total amount of all refunds where the refund status is 'approved' and the refund method is 'credit'.",
        "Query": "SELECT SUM(refund_amount) FROM refunds_returns WHERE refund_status = 'approved' AND refund_method = 'credit';",
        "GeneratedQuery": "SELECT SUM(amount) \nFROM orders \nWHERE refund_status = 'approved' AND refund_method = 'credit';",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "What is the average revenue generated per campaign?",
        "Query": "SELECT AVG(revenue_generated) FROM campaigns",
        "GeneratedQuery": "SELECT AVG(amount) \nFROM orders \nJOIN users ON orders.user\\_id = users.id;",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "Find all unique product identifiers where the standard retail price is greater than the promotional price, and the percentage discount is greater than 0.",
        "Query": "SELECT unique_product_identifier FROM products WHERE standard_retail_price_including_tax > promotional_discounted_price AND percentage_discount_applied > 0",
        "GeneratedQuery": "SELECT DISTINCT products.id\nFROM products\nJOIN (\n    SELECT user\\_id, amount, date\n    FROM orders\n) AS orders ON TRUE\nWHERE products.price > (\n    SELECT price\n    FROM products\n    WHERE products.id = orders.user\\_id\n) AND (\n    (products.price - (\n        SELECT price\n        FROM products\n        WHERE products.id = orders.user\\_id",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "List the shipping details for orders with a shipping status of 'shipped' in the last 30 days.",
        "Query": "SELECT s.shipping_address, s.shipping_city, s.shipping_state, s.shipping_zipcode, s.shipping_country, s.shipping_status, s.tracking_number FROM shipping s JOIN orders o ON s.fk_order_id = o.order_id WHERE s.shipping_status = 'shipped' AND o.shipping_date >= NOW() - INTERVAL '30 days'",
        "GeneratedQuery": "SELECT orders.id, users.name, users.email, orders.amount, orders.date\nFROM orders\nJOIN users ON orders.user\\_id = users.id\nWHERE orders.date >= NOW() - INTERVAL 30 DAY AND orders.shipping\\_status = 'shipped';",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "Get the total discount amount redeemed and the last loyalty point update date for customers who have an accumulated loyalty points balance greater than 500 and are eligible for special promotions.",
        "Query": "SELECT total_discount_amount_redeemed, last_loyalty_point_update_date FROM customers_loyalty_program WHERE accumulated_loyalty_points_balance > 500 AND eligible_for_special_promotions = TRUE;",
        "GeneratedQuery": "SELECT SUM(discount\\_amount) as total\\_discount, MAX(update\\_date) as last\\_loyalty\\_point\\_update\nFROM users\nJOIN loyalty\\_programs\nON users.id = loyalty\\_programs.user\\_id\nWHERE loyalty\\_points > 500 AND eligible\\_for\\_special\\_promotions = true;",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "Retrieve the total number of loyalty points earned by customers who have made more than 5 orders and have free shipping eligibility.",
        "Query": "SELECT SUM(l.lifetime_loyalty_points_earned) FROM customers_loyalty_program l JOIN customerinfo c ON l.associated_customer_reference_id = c.person_customer_id WHERE c.preferences_total_orders > 5 AND l.free_shipping_eligibility = TRUE;",
        "GeneratedQuery": "SELECT COUNT(DISTINCT u.id)\nFROM users u\nJOIN orders o ON u.id = o.user\\_id\nWHERE o.amount = 0 AND (\n    SELECT COUNT(*)\n    FROM orders o2\n    WHERE o2.user\\_id = u.id\n) > 5;",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "Find the total number of transactions for each customer.",
        "Query": "SELECT corresponding_customer_reference_identifier, COUNT(transaction_unique_identifier) AS total_transactions FROM transactions_and_payments GROUP BY corresponding_customer_reference_identifier;",
        "GeneratedQuery": "SELECT user\\_id, COUNT(*) as total\\_transactions\nFROM orders\nGROUP BY user\\_id;",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "Retrieve the average time spent on the events related to orders that have a payment method of 'Credit Card' and occurred in the year 2022, grouped by the event type.",
        "Query": "SELECT e.event_type, AVG(e.time_spent_seconds) AS avg_time_spent FROM events e JOIN orders o ON e.order_id = o.order_id WHERE o.payment_method = 'Credit Card' AND e.event_timestamp BETWEEN '2022-01-01' AND '2022-12-31' GROUP BY e.event_type;",
        "GeneratedQuery": "SELECT event\\_type, AVG(time\\_spent)\nFROM (\nSELECT \nEVENTS.event\\_type,\nSUM(EVENTS.duration) AS time\\_spent\nFROM EVENTS\nJOIN orders ON EVENTS.order\\_id = orders.id\nWHERE orders.payment\\_method = 'Credit Card' AND EXTRACT(YEAR FROM orders.date) = 2022\nGROUP BY EVENTS.order\\_",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "Retrieve a comprehensive report for each customer, which includes the total time spent on the site, average cart value, number of unique sessions, the most common device platform, and the average review rating. Additionally, for each customer, calculate the total amount spent on orders, the average shipping fee per item, and the average tax amount per item. This report should be ordered by the total time spent in descending order.",
        "Query": "SELECT e.person_customer_id, SUM(e.time_spent_seconds) AS total_time_spent, AVG(e.cart_value) AS avg_cart_value, COUNT(DISTINCT e.session_id) AS unique_sessions, MODE() WITHIN GROUP (ORDER BY e.device_platform) AS most_common_device_platform, AVG(e.review_rating) AS avg_review_rating, COALESCE(SUM(oi.total_price), 0) AS total_amount_spent, COALESCE(AVG(oi.shipping_fee), 0) AS avg_shipping_fee_per_item, COALESCE(AVG(oi.tax_amount), 0) AS avg_tax_amount_per_item FROM events e LEFT JOIN order_items oi ON e.order_id = oi.order_id GROUP BY e.person_customer_id ORDER BY total_time_spent DESC;",
        "GeneratedQuery": "SELECT u.id, u.name, \n       SUM(DATEDIFF(hour, o.date, LAG(o.date) OVER (PARTITION BY u.id ORDER BY o.date))) as total\\_time\\_spent,\n       AVG(o.amount / COUNT(DISTINCT o.id)) as avg\\_cart\\_value,\n       COUNT(DISTINCT o.id) as num",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "Find the total transaction amount and the review approval moderation status for transactions that have been flagged as fraudulent and have a review approval moderation status of 'approved'.",
        "Query": "SELECT T2.total_transaction_amount, T1.review_approval_moderation_status FROM product_reviews_and_ratings AS T1 INNER JOIN transactions_and_payments AS T2 ON T1.referenced_product_identifier = T2.linked_order_reference_identifier WHERE T2.is_transaction_fraudulent = TRUE AND T1.review_approval_moderation_status = 'approved'",
        "GeneratedQuery": "SELECT SUM(amount) as total\\_transaction\\_amount, 'approved' as review\\_approval\\_moderation\\_status\nFROM orders\nWHERE flagged = 'true' AND review\\_approval\\_moderation\\_status = 'approved';",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "Find all female customers above 40 years old with more than 1000 loyalty points.",
        "Query": "SELECT * FROM customerinfo WHERE person_gender = 'F' AND EXTRACT(YEAR FROM AGE(CURRENT_DATE, person_date_of_birth)) > 40 AND person_loyalty_points > 1000",
        "GeneratedQuery": "SELECT users.name\nFROM users\nJOIN orders ON users.id = orders.user\\_id\nWHERE users.age > 40 AND users.name LIKE '%female%'\nGROUP BY users.name\nHAVING SUM(orders.amount) > 1000;",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "Find all transactions where the customer has made a purchase using a digital wallet and the product is currently in stock, also find the quantity of the product in the inventory.",
        "Query": "SELECT t.transaction_unique_identifier, t.digital_wallet_used, i.quantity FROM transactions_and_payments t JOIN inventory i ON t.linked_order_reference_identifier = i.referenced_product_id WHERE t.digital_wallet_used IS NOT NULL AND i.stock_status = 'In Stock'",
        "GeneratedQuery": "SELECT orders.id, users.name, products.name, products.price, orders.amount, products.stock\nFROM orders\nJOIN users ON orders.user\\_id = users.id\nJOIN products ON orders.id = products.id\nWHERE users.email LIKE '%@%.%' AND products.stock > 0;",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "Analyze the engagement of customers by calculating the average time spent on the website, the total number of clicks, and the number of reviews they have provided, for customers who have placed an order in the past year and have a loyalty tier level of 'Gold'. The results should be grouped by city and ordered by the number of reviews in descending order.",
        "Query": "SELECT e.location_city, AVG(e.time_spent_seconds) AS avg_time_spent, SUM(e.click_count) AS total_clicks, COUNT(e.review_rating) AS total_reviews FROM events e JOIN customerinfo c ON e.person_customer_id = c.person_customer_id JOIN customers_loyalty_program cl ON c.person_customer_id = cl.associated_customer_reference_id WHERE e.event_timestamp > NOW() - INTERVAL '1 year' AND cl.loyalty_program_tier_level = 'Gold' GROUP BY e.location_city ORDER BY total_reviews DESC;",
        "GeneratedQuery": "SELECT u.city, AVG(time\\_spent) AS avg\\_time\\_spent, SUM(clicks) AS total\\_clicks, COUNT(reviews) AS num\\_reviews\nFROM users u\nJOIN orders o ON u.id = o.user\\_id\nWHERE u.loyalty\\_tier = 'Gold' AND o.date >= DATE(NOW()) - INTERVAL 1 YEAR\nGROUP",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "List all columns for the orders table",
        "Query": "SELECT * FROM information_schema.columns WHERE table_name = 'orders'",
        "GeneratedQuery": "SELECT * FROM orders;",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "Find all orders where the order status is 'pending' and the shipping address city is 'New York'.",
        "Query": "SELECT * FROM orders WHERE order_status = 'pending' AND shipping_address_city = 'New York';",
        "GeneratedQuery": "SELECT * FROM orders\nWHERE status = 'pending' AND\nshipping_address->>'city' = 'New York';",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "Get the details of all wishlist items that have been added by customers who have made at least one purchase with a total transaction amount greater than $100.",
        "Query": "SELECT w.* FROM wishlist w JOIN cart c ON w.fk_user_id = c.fk_user_id JOIN transactions_and_payments t ON c.id = t.linked_order_reference_identifier WHERE t.total_transaction_amount > 100",
        "GeneratedQuery": "SELECT * FROM products \nWHERE id IN (\n  SELECT product\\_id \n  FROM wishlists \n  WHERE user\\_id IN (\n    SELECT user\\_id \n    FROM orders \n    GROUP BY user\\_id \n    HAVING SUM(amount) > 100\n  )\n);",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "Retrieve the total number of customers who are eligible for special promotions and have an accumulated loyalty points balance greater than 1000.",
        "Query": "SELECT COUNT(*) FROM customers_loyalty_program WHERE eligible_for_special_promotions = true AND accumulated_loyalty_points_balance > 1000;",
        "GeneratedQuery": "SELECT COUNT(DISTINCT u.id)\nFROM users u\nWHERE u.age >= 18 AND u.age <= 65\nAND EXISTS (\n    SELECT 1\n    FROM orders o\n    WHERE o.user_id = u.id\n    GROUP BY o.user_id\n    HAVING SUM(o.amount) > 1000\n);",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "Calculate the total quantity of inventory that is past the expiry date for all products.",
        "Query": "SELECT SUM(i.quantity) AS total_expired_quantity FROM inventory i WHERE i.expiry_date < CURRENT_DATE;",
        "GeneratedQuery": "SELECT SUM(stock) as total\\_quantity\nFROM products\nWHERE date < CURDATE();",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "Retrieve all the columns from the customerinfo table where the customer's preferred language is 'English'.",
        "Query": "SELECT * FROM customerinfo WHERE person_preferred_language = 'English';",
        "GeneratedQuery": "I'm sorry for the confusion, but the schema you provided does not include a \"customerinfo\" table. However, if you meant to retrieve all the columns from the \"users\" table where the customer's preferred language is 'English', the query would be:\n\n```sql\nSELECT * FROM users WHERE email LIKE '%@English%';\n```\n\nPlease note that the 'email' column is used as a proxy for the customer's preferred language, as",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "Find the total amount of all orders shipped to the city of New York and their corresponding product names",
        "Query": "SELECT SUM(T1.total_amount), T3.product_name FROM orders AS T1 INNER JOIN wishlist AS T3 ON T1.person_customer_id = T3.fk_user_id WHERE T1.shipping_address_city = 'New York' GROUP BY T3.product_name",
        "GeneratedQuery": "SELECT SUM(orders.amount) as total\\_amount, products.name as product\\_name\nFROM orders\nJOIN users ON orders.user\\_id = users.id\nJOIN products ON users.email LIKE '%NY%'\nGROUP BY products.name;",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "Find the total number of products in each cart for users who have opened their email and have a review rating greater than 3",
        "Query": "SELECT COUNT(DISTINCT c.fk_product_id) FROM cart c JOIN events e ON c.fk_user_id = e.person_customer_id WHERE e.email_opened = TRUE AND e.review_rating > 3 GROUP BY c.fk_user_id",
        "GeneratedQuery": "SELECT u.id, SUM(p.stock) as total\\_products\nFROM users u\nJOIN orders o ON u.id = o.user\\_id\nJOIN (\nSELECT user\\_id\nFROM reviews\nWHERE rating > 3\n) r ON u.id = r.user\\_id\nJOIN orders o2 ON u.id = o2.user\\_id\nJOIN order\\_items oi ON o2.id = o",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "Get the product details and the average review rating for products that have been purchased by customers who have also opened an email.",
        "Query": "SELECT p.product_display_name, p.aggregate_customer_review_rating FROM products p JOIN events e ON p.unique_product_identifier = e.order_item_id WHERE e.email_opened = TRUE;",
        "GeneratedQuery": "SELECT p.id, p.name, p.price, p.stock, AVG(r.rating)\nFROM products p\nJOIN orders o ON p.id = o.product_id\nJOIN users u ON o.user_id = u.id\nJOIN reviews r ON p.id = r.product_id\nWHERE u.email IS NOT NULL\nGROUP BY p.id, p.name, p.price, p.stock",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "What are the total transaction amounts for each payment method used and the corresponding total billed amounts?",
        "Query": "SELECT payment_method_used, SUM(total_transaction_amount) as total_transaction_amount, SUM(final_billed_amount) as total_billed_amount FROM transactions_and_payments GROUP BY payment_method_used",
        "GeneratedQuery": "SELECT pm.payment\\_method, SUM(o.amount) as total\\_transaction\\_amount, SUM(p.price * o.amount) as total\\_billed\\_amount\nFROM (\nSELECT o.id as order\\_id, u.email as payment\\_method\nFROM orders o\nJOIN users u ON o.user\\_id = u.id\nWHERE u.email IS NOT NULL\n) pm\nJOIN orders o ON pm.order",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "List all customers who have a total loyalty points value greater than 1000 and are subscribed to the newsletter.",
        "Query": "SELECT person_first_name, person_last_name, person_loyalty_points, preferences_newsletter_subscription FROM customerinfo WHERE person_loyalty_points > 1000 AND preferences_newsletter_subscription = true;",
        "GeneratedQuery": "SELECT u.name\nFROM users u\nJOIN orders o ON u.id = o.user\\_id\nWHERE o.amount > 1000 AND u.email IN (SELECT s.email FROM subscriptions s WHERE s.newsletter = true);",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "Find all loyalty members who have never participated in exclusive beta testing but are eligible for special promotions.",
        "Query": "SELECT * FROM customers_loyalty_program WHERE participation_in_exclusive_beta_testing = 'f' AND eligible_for_special_promotions = 't'",
        "GeneratedQuery": "SELECT u.*\nFROM users u\nWHERE u.id IN (\n    SELECT DISTINCT user\\_id\n    FROM orders\n    WHERE user\\_id NOT IN (\n        SELECT user\\_id\n        FROM orders\n        WHERE amount > 1000\n    )\n) AND u.age >= 18;",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "Retrieve a comprehensive list of products that have received reviews with a sentiment analysis score higher than 3.5, along with the average number of verified reviews and the total number of edits made to those reviews. Additionally, provide the product display name, primary material composition, and the estimated production cost per unit, considering only those products that have been reviewed more than 100 times.",
        "Query": "SELECT p.product_display_name, p.primary_material_composition, p.estimated_production_cost_per_unit, AVG(prr.sentiment_analysis_score) AS avg_sentiment_score, SUM(prr.total_number_of_edits_made) AS total_edits_made FROM product_reviews_and_ratings prr JOIN products p ON prr.referenced_product_identifier = p.unique_product_identifier WHERE prr.sentiment_analysis_score > 3.5 GROUP BY p.unique_product_identifier HAVING COUNT(prr.review_unique_identifier) > 100;",
        "GeneratedQuery": "SELECT p.name AS product\\_display\\_name,\n       p.material AS primary\\_material\\_composition,\n       p.cost AS estimated\\_production\\_cost\\_per\\_unit,\n       AVG(r.sentiment\\_score) AS average\\_sentiment\\_score,\n       COUNT(DISTINCT r.id) AS total\\_reviews,\n       SUM(r.edits) AS total\\_edits\nFROM products p",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "Find the total number of transactions for each campaign and the total revenue generated for each campaign.",
        "Query": "SELECT T2.campaign_name, COUNT(T1.linked_order_reference_identifier), SUM(T1.final_billed_amount) FROM transactions_and_payments T1 INNER JOIN campaigns T2 ON T1.linked_order_reference_identifier = T2.campaign_id GROUP BY T2.campaign_name",
        "GeneratedQuery": "SELECT o.user\\_id AS campaign, COUNT(o.id) AS total\\_transactions, SUM(o.amount) AS total\\_revenue\nFROM orders o\nGROUP BY o.user\\_id;",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "Get the customer birthday special discount status and the order date for customers who have placed orders with a payment status of 'paid' and have participated in exclusive beta testing.",
        "Query": "SELECT cltp.customer_birthday_special_discount, ord.order_date FROM customers_loyalty_program cltp JOIN orders ord ON cltp.associated_customer_reference_id = ord.person_customer_id WHERE ord.payment_status = 'paid' AND cltp.participation_in_exclusive_beta_testing = TRUE",
        "GeneratedQuery": "SELECT u.name AS customer\\_birthday\\_special\\_discount\\_status, o.date AS order\\_date\nFROM users u\nJOIN orders o ON u.id = o.user\\_id\nWHERE o.amount IS NOT NULL AND o.status = 'paid' AND u.id IN (SELECT user\\_id FROM exclusive\\_beta\\_testers);",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "Find all premium customers who have an active subscription and a wishlist with more than 1 item.",
        "Query": "SELECT ci.person_customer_id, ci.person_first_name, ci.person_last_name, w.id AS wishlist_id, COUNT(w.fk_product_id) AS item_count FROM customerinfo ci JOIN wishlist w ON ci.person_customer_id = w.fk_user_id WHERE ci.person_is_premium = true AND ci.account_has_active_subscription = true GROUP BY ci.person_customer_id, ci.person_first_name, ci.person_last_name, w.id HAVING COUNT(w.fk_product_id) > 1;",
        "GeneratedQuery": "SELECT DISTINCT u.*\nFROM users u\nJOIN orders o ON u.id = o.user\\_id\nJOIN (\n    SELECT user\\_id\n    FROM orders\n    WHERE status = 'active'\n) active\\_orders ON u.id = active\\_orders.user\\_id\nJOIN wishlists w ON u.id = w.user\\_id\nWHERE u.premium = TRUE\nAND w.item\\_count >",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "Find the total number of reviews left by customers who have a non-premium account.",
        "Query": "SELECT COUNT(*) AS total_reviews FROM product_reviews_and_ratings pr INNER JOIN customerinfo c ON pr.reviewing_customer_identifier = c.person_customer_id WHERE c.person_is_premium = FALSE;",
        "GeneratedQuery": "SELECT COUNT(*)\nFROM orders\nWHERE user\\_id IN (\n    SELECT id\n    FROM users\n    WHERE age IS NOT NULL\n);",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "What are the total amounts and shipping fees for orders placed by customers who have made previous purchases at least five times, and what are the associated review scores of the orders, grouped by the customer's identifier and the order's delivery date?",
        "Query": "SELECT SUM(total_amount) AS total_order_amount, SUM(shipping_fee) AS total_shipping_fee, AVG(sentiment_analysis_score) AS average_review_score, T1.person_customer_id, T1.delivery_date FROM orders AS T1 INNER JOIN product_reviews_and_ratings AS T2 ON T1.person_customer_id = T2.reviewing_customer_identifier WHERE T2.previous_product_purchases_count >= 5 GROUP BY T1.person_customer_id, T1.delivery_date",
        "GeneratedQuery": "SELECT u.id AS user\\_id, o.date AS delivery\\_date, SUM(o.amount) AS total\\_amount, 0 AS shipping\\_fees, AVG(r.score) AS review\\_score\nFROM users u\nJOIN orders o ON u.id = o.user\\_id\nJOIN (\n    SELECT user\\_id\n    FROM orders\n    GROUP BY user\\_id\n    HAVING COUNT(*)",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "Find the total number of customers who have more than 1000 accumulated loyalty points balance and are eligible for special promotions.",
        "Query": "SELECT COUNT(*) FROM customers_loyalty_program WHERE accumulated_loyalty_points_balance > 1000 AND eligible_for_special_promotions = TRUE;",
        "GeneratedQuery": "SELECT COUNT(DISTINCT u.id)\nFROM users u\nJOIN orders o ON u.id = o.user\\_id\nWHERE o.amount \\* (CURRENT\\_DATE - o.date) > 1000;",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "What is the total quantity of products with a fragile item indicator of true and an available stock quantity greater than 1000?",
        "Query": "SELECT SUM(i.quantity) FROM inventory i INNER JOIN products p ON i.referenced_product_id = p.unique_product_identifier WHERE p.fragile_item_indicator = true AND p.available_stock_quantity_in_units > 1000",
        "GeneratedQuery": "SELECT SUM(stock) \nFROM products \nWHERE fragile_item = true AND stock > 1000;",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "Get the details of all customers who have active subscription and are premium.",
        "Query": "SELECT * FROM customerinfo WHERE account_has_active_subscription = TRUE AND person_is_premium = TRUE",
        "GeneratedQuery": "SELECT users.id, users.name, users.age, users.email \nFROM users \nJOIN orders ON users.id = orders.user\\_id \nWHERE orders.amount > 0 AND users.name IN ('premium1', 'premium2', 'premium3');",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "Identify the top 5 products with the highest total refund amounts, considering only completed refund requests.",
        "Query": "SELECT p.unique_product_identifier, p.product_display_name, SUM(r.refund_amount) as total_refund_amount FROM products p JOIN refunds_returns r ON p.unique_product_identifier = r.fk_product_id WHERE r.status = 'completed' GROUP BY p.unique_product_identifier, p.product_display_name ORDER BY total_refund_amount DESC LIMIT 5;",
        "GeneratedQuery": "SELECT products.id, products.name, SUM(orders.amount) as total\\_refund\\_amount\nFROM products\nJOIN orders ON products.id = orders.product\\_id\nWHERE orders.date IS NOT NULL\nGROUP BY products.id, products.name\nORDER BY total\\_refund\\_amount DESC\nLIMIT 5;",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "What are the campaign names and the total amount of each order for all the orders?",
        "Query": "SELECT T1.campaign_name, T2.total_amount FROM campaigns AS T1 INNER JOIN orders AS T2 ON T1.campaign_id = T2.campaign_id",
        "GeneratedQuery": "SELECT NULL AS campaign\\_name, SUM(amount) AS total\\_amount\nFROM orders\nGROUP BY user\\_id;",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "Find the total revenue generated from campaigns that have generated more than $1000 in revenue and also list the average shipping cost for orders placed under these campaigns.",
        "Query": "SELECT c.campaign_name, SUM(o.total_amount) AS total_revenue, AVG(s.shipping_cost) AS average_shipping_cost FROM campaigns c JOIN orders o ON c.campaign_id = o.campaign_id JOIN shipping s ON o.order_id = s.fk_order_id WHERE c.revenue_generated > 1000 GROUP BY c.campaign_name",
        "GeneratedQuery": "SELECT AVG(p.price * o.amount) as avg\\_shipping\\_cost\nFROM orders o\nJOIN products p ON o.id = p.order\\_id\nJOIN users u ON o.user\\_id = u.id\nWHERE u.id IN (\nSELECT user\\_id\nFROM orders\nJOIN products ON orders.id = products.order\\_id\nGROUP BY user\\_id\nHAVING SUM(price \\*",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "Retrieve the average sentiment analysis score of reviews for products that have had a promotional discount applied and were added to the wishlist within the last 90 days. Additionally, include the total number of reviews for these products and the average esthetic rating given by customers.",
        "Query": "SELECT p.product_display_name, AVG(prr.sentiment_analysis_score) AS average_sentiment, COUNT(prr.review_unique_identifier) AS total_reviews, AVG(prr.submitted_review_star_rating) AS average_rating FROM product_reviews_and_ratings prr JOIN products p ON prr.referenced_product_identifier = p.unique_product_identifier JOIN wishlist w ON p.unique_product_identifier = w.fk_product_id WHERE p.percentage_discount_applied > 0 AND w.added_at >= CURRENT_DATE - INTERVAL '90 days' GROUP BY p.product_display_name;",
        "GeneratedQuery": "SELECT AVG(reviews.score) AS average\\_sentiment,\n       AVG(reviews.esthetic\\_rating) AS average\\_esthetic,\n       COUNT(reviews.id) AS total\\_reviews\nFROM reviews\nJOIN products ON reviews.product\\_id = products.id\nJOIN orders ON reviews.order\\_id = orders.id\nWHERE products.price < (SELECT price FROM promotions WHERE promotions.product\\_",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "What are the product names and their corresponding prices in the wishlist where the billing address city is 'New York' in the transactions table?",
        "Query": "SELECT w.product_name, w.price_at_addition FROM wishlist w JOIN transactions_and_payments tp ON w.fk_user_id = tp.corresponding_customer_reference_identifier WHERE tp.billing_address_city = 'New York'",
        "GeneratedQuery": "SELECT products.name, products.price\nFROM products\nJOIN orders ON products.id = orders.product\\_id\nJOIN users ON orders.user\\_id = users.id\nWHERE users.email IN (\n    SELECT transactions.email\n    FROM transactions\n    WHERE transactions.city = 'New York'\n);",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "Retrieve the average price per unit of products in orders, along with the average discount applied per order item, for those items that have a return period of more than 30 days.",
        "Query": "SELECT AVG(price_per_unit) as avg_price_per_unit, AVG(discount_applied) as avg_discount_applied FROM order_items WHERE return_period > 30;",
        "GeneratedQuery": "SELECT AVG(products.price) AS avg\\_price, \n       AVG(orders.amount / products.price) AS avg\\_discount \nFROM products \nJOIN orders ON products.id = orders.product\\_id \nWHERE DATEDIFF(orders.date, CURDATE()) > 30;",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "Retrieve the top 5 customers based on the total amount spent on orders, along with the number of orders and the average order value, filtering for orders placed on a desktop device.",
        "Query": "SELECT e.person_customer_id, COUNT(o.order_id) AS number_of_orders, SUM(o.total_amount) AS total_spent, AVG(o.total_amount) AS average_order_value FROM events e JOIN orders o ON e.order_id = o.order_id WHERE e.device_type = 'desktop' GROUP BY e.person_customer_id ORDER BY total_spent DESC LIMIT 5;",
        "GeneratedQuery": "SELECT u.name, COUNT(o.id) as num\\_of\\_orders, AVG(o.amount) as avg\\_order\\_value\nFROM users u\nJOIN orders o ON u.id = o.user\\_id\nWHERE o.device = 'desktop'\nGROUP BY u.name\nORDER BY SUM(o.amount) DESC\nLIMIT 5;",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "Retrieve the total transaction amount and final billed amount for all transactions where the transaction is marked as fraudulent and the total transaction amount is greater than 1000.",
        "Query": "SELECT total_transaction_amount, final_billed_amount FROM transactions_and_payments WHERE is_transaction_fraudulent = true AND total_transaction_amount > 1000;",
        "GeneratedQuery": "SELECT SUM(amount) as total\\_transaction\\_amount, SUM(amount) as final\\_billed\\_amount\nFROM orders\nWHERE fraudulent = true AND amount > 1000;",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "Find all order IDs and their corresponding shipping costs where the delivery date is after '2020-01-01' and the shipping status is 'delivered'.",
        "Query": "SELECT T1.order_id, T2.shipping_cost FROM orders AS T1 INNER JOIN shipping AS T2 ON T1.order_id = T2.fk_order_id WHERE T1.delivery_date > '2020-01-01' AND T2.shipping_status = 'delivered';",
        "GeneratedQuery": "SELECT orders.id, orders.amount AS shipping\\_cost\nFROM orders\nJOIN users ON orders.user\\_id = users.id\nWHERE orders.date > '2020-01-01' AND orders.shipping\\_status = 'delivered';",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "Retrieve the total number of transactions, the total transaction amount, and the average transaction amount for each supplier's transactions.",
        "Query": "SELECT s.official_supplier_business_name, COUNT(t.transaction_unique_identifier) AS total_transactions, SUM(t.total_transaction_amount) AS total_transaction_amount, AVG(t.total_transaction_amount) AS average_transaction_amount FROM transactions_and_payments t, suppliers s WHERE t.linked_order_reference_identifier = s.supplier_unique_identifier GROUP BY s.official_supplier_business_name;",
        "GeneratedQuery": "SELECT p.name AS supplier,\n       COUNT(o.id) AS total_transactions,\n       SUM(o.amount) AS total_transaction_amount,\n       AVG(o.amount) AS average_transaction_amount\nFROM orders o\nJOIN products p ON o.user_id = p.id\nGROUP BY p.name;",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "Find the average income of customers who have a wishlist and have ordered a product at least once.",
        "Query": "SELECT AVG(T1.person_income) AS average_income FROM customerinfo AS T1 INNER JOIN cart AS T2 ON T1.person_customer_id = T2.fk_user_id WHERE T1.preferences_wishlist_items > 0 AND T1.preferences_total_orders > 0",
        "GeneratedQuery": "SELECT AVG(total\\_orders) AS average\\_income\nFROM (\n    SELECT u.id, SUM(o.amount) AS total\\_orders\n    FROM users u\n    JOIN orders o ON u.id = o.user\\_id\n    WHERE u.id IN (\n        SELECT user\\_id\n        FROM orders\n        GROUP BY user\\_id\n        HAVING COUNT(DISTINCT id) >",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "Retrieve the total quantity of each product in the inventory with a stock status of 'available' and a stock threshold greater than or equal to 10.",
        "Query": "SELECT referenced_product_id, SUM(quantity) AS total_quantity FROM inventory WHERE stock_status = 'available' AND stock_threshold >= 10 GROUP BY referenced_product_id;",
        "GeneratedQuery": "SELECT products.name, SUM(products.stock) as total\\_quantity\nFROM products\nWHERE products.stock_status = 'available' AND products.stock >= 10\nGROUP BY products.name;",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "What are the total prices and product names of the order items for a specific order?",
        "Query": "SELECT oi.total_price, p.product_display_name FROM order_items oi JOIN products p ON oi.product_id = p.unique_product_identifier WHERE oi.order_id = 1;",
        "GeneratedQuery": "SELECT p.name, SUM(o.amount) as total\\_price\nFROM orders o\nJOIN products p ON o.product\\_id = p.id\nWHERE o.order\\_id = ?\nGROUP BY p.id;",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "Find the total revenue generated by all campaigns and the total cost per acquisition",
        "Query": "SELECT SUM(revenue_generated) AS total_revenue, SUM(cost_per_acquisition) AS total_cost_per_acquisition FROM campaigns",
        "GeneratedQuery": "SELECT SUM(amount) AS total\\_revenue, \nAVG(amount / (SELECT COUNT(DISTINCT o.user\\_id) FROM orders o WHERE o.user\\_id = u.id)) AS avg\\_cost\\_per\\_acquisition\nFROM orders o\nJOIN users u ON u.id = o.user\\_id;",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "Find the total cart value and the event type for each cart status where the cart status is 'active' and the event type is 'checkout'",
        "Query": "SELECT SUM(c.total_price), e.event_type FROM cart c JOIN events e ON c.id = e.order_id WHERE c.cart_status = 'active' AND e.event_type = 'checkout' GROUP BY e.event_type",
        "GeneratedQuery": "SELECT SUM(orders.amount) AS total\\_cart\\_value, 'checkout' AS event\\_type\nFROM orders\nJOIN users ON orders.user\\_id = users.id\nWHERE users.email IS NOT NULL AND orders.status = 'active' AND orders.event\\_type = 'checkout';",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "List the details of all cart items that have a total price of more than $100.",
        "Query": "SELECT * FROM cart WHERE total_price > 100;",
        "GeneratedQuery": "SELECT users.name, orders.amount, products.name, products.price\nFROM users\nJOIN orders ON users.id = orders.user\\_id\nJOIN products ON orders.id = products.order\\_id\nWHERE products.price * orders.amount > 100;",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "Show all products in the cart for the user with user id 123.",
        "Query": "SELECT id, fk_product_id, price_per_unit, quantity, total_price FROM cart WHERE fk_user_id = 123;",
        "GeneratedQuery": "SELECT products.id, products.name, products.price, products.stock\nFROM products\nJOIN orders ON products.id = orders.product\\_id\nWHERE orders.user\\_id = 123 AND orders.amount > 0;",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "For each product in the cart, list the product display name, price per unit in the cart, and the total number of units ordered, along with the customer's review sentiment score if available.",
        "Query": "SELECT p.product_display_name, c.price_per_unit, c.quantity, r.sentiment_analysis_score FROM cart c JOIN products p ON c.fk_product_id = p.unique_product_identifier LEFT JOIN product_reviews_and_ratings r ON p.unique_product_identifier = r.referenced_product_identifier;",
        "GeneratedQuery": "SELECT \n    p.name AS product\\_display\\_name, \n    o.amount / p.price AS price\\_per\\_unit\\_in\\_cart, \n    SUM(o.amount) AS total\\_number\\_of\\_units\\_ordered, \n    u.review\\_sentiment\\_score\nFROM \n    orders o\nJOIN \n    users u ON o.user\\_id = u.id\nJOIN \n    products",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "What is the total discount amount redeemed by all customers who are eligible for special promotions and have accumulated more than 1000 loyalty points?",
        "Query": "SELECT SUM(total_discount_amount_redeemed) FROM customers_loyalty_program WHERE eligible_for_special_promotions = TRUE AND accumulated_loyalty_points_balance > 1000",
        "GeneratedQuery": "SELECT SUM(amount) AS total\\_discount\nFROM orders\nWHERE user\\_id IN (\n    SELECT id\n    FROM users\n    WHERE age >= 18 AND email LIKE '%specialpromo.com'\n) AND user\\_id IN (\n    SELECT user\\_id\n    FROM loyalty\\_points\n    GROUP BY user\\_id\n    HAVING SUM(points) > 1000\n);",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "Find all the users whose cart status is not 'abandoned' and who have more than one item in their cart with the same product ID. For these users, calculate the total price of the items in their cart and the total price of the items in their wishlist, as well as the average price per unit of the items in their cart. Also, find the average price per unit of the items in their wishlist and the number of wishlist items that are currently in stock.",
        "Query": "WITH cart_data AS ( SELECT fk_user_id, fk_product_id, sum(total_price) AS total_cart_price, avg(price_per_unit) AS avg_cart_price FROM cart WHERE cart_status != 'abandoned' GROUP BY fk_user_id, fk_product_id HAVING count(fk_product_id) > 1 ), wishlist_data AS ( SELECT fk_user_id, avg(price_at_addition) AS avg_wishlist_price, sum(CASE WHEN stock_status_at_addition = true THEN 1 ELSE 0 END) AS in_stock_wishlist_items, sum(price_at_addition) AS total_wishlist_price FROM wishlist GROUP BY fk_user_id ) SELECT cd.fk_user_id, cd.avg_cart_price, cd.total_cart_price, wd.avg_wishlist_price, wd.in_stock_wishlist_items, wd.total_wishlist_price FROM cart_data cd JOIN wishlist_data wd ON cd.fk_user_id = wd.fk_user_id",
        "GeneratedQuery": "SELECT u.id, u.name, u.age, u.email,\n       SUM(o.amount) AS total\\_cart\\_price,\n       SUM(w.amount) AS total\\_wishlist\\_price,\n       AVG(o.amount/p.stock) AS avg\\_cart\\_price\\_per\\_unit,\n       AVG(w.amount/p.stock) AS avg\\_wishlist\\_price\\_per",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "What are the total loyalty points earned by loyalty members who enrolled after '2020-01-01', and what is their average spending threshold?",
        "Query": "SELECT SUM(lifetime_loyalty_points_earned) AS total_points, AVG(annual_loyalty_spending_threshold) AS avg_spending FROM customers_loyalty_program WHERE initial_enrollment_date > '2020-01-01'",
        "GeneratedQuery": "SELECT SUM(loyalty\\_points) AS total\\_loyalty\\_points, AVG(spending\\_threshold) AS average\\_spending\\_threshold\nFROM (\n    SELECT \n        SUM(orders.amount) AS loyalty\\_points, \n        AVG(products.price) AS spending\\_threshold\n    FROM users\n    JOIN orders ON users.id = orders.user\\_id\n    JOIN products ON orders.id =",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "Get the details of all campaigns that have a target audience of 'young adults' and also find the names of suppliers who have supplied products in these campaigns with the quantity supplied.",
        "Query": "SELECT c.campaign_name, c.target_audience, s.official_supplier_business_name, ca.quantity FROM campaigns c JOIN cart ca ON c.campaign_id = ca.fk_product_id JOIN suppliers s ON ca.fk_user_id = s.supplier_unique_identifier WHERE c.target_audience = 'young adults'",
        "GeneratedQuery": "SELECT u.name AS campaign\\_name, p.name AS product\\_name, p.stock AS quantity\\_supplied\nFROM users u\nJOIN orders o ON u.id = o.user\\_id\nJOIN (\n    SELECT op.user\\_id\n    FROM orders op\n    JOIN users u ON op.user\\_id = u.id\n    WHERE u.age BETWEEN 18 AND 35\n) campaign\\_users",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "What is the total reach of each campaign and the total number of reviews submitted by each customer?",
        "Query": "SELECT SUM(c.total_reach) AS total_campaign_reach, COUNT(prar.review_unique_identifier) AS total_customer_reviews FROM campaigns c JOIN product_reviews_and_ratings prar ON c.campaign_id = prar.referenced_product_identifier GROUP BY prar.reviewing_customer_identifier",
        "GeneratedQuery": "SELECT \n    SUM(products.stock) AS total_reach, \n    COUNT(reviews.id) AS total_reviews\nFROM \n    orders\nJOIN \n    users ON orders.user\\_id = users.id\nLEFT JOIN \n    (SELECT \n        order\\_id, \n        product\\_id\n     FROM \n        order\\_items) AS order\\_items ON orders.id = order\\_items",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "What are the order ids, customer ids, customer names, customer emails, customer phone numbers, order dates, total prices, discounts applied, tax amounts, shipping fees, estimated delivery dates, and cart statuses of customers who have made orders with total prices greater than 100, discounts applied greater than 10, tax amounts greater than 5, shipping fees greater than 10, and estimated delivery dates within the next 30 days, who are also eligible for special promotions, have loyalty points greater than 1000, have active subscriptions, are not premium, have a gender of 'M', an income greater than 50000, and an average spent per order greater than 100?",
        "Query": "SELECT T1.id, T2.person_customer_id, T2.person_first_name, T2.person_last_name, T2.person_email, T2.person_phone_number, T1.last_activity_timestamp, T1.total_price, T1.discount_applied, T1.tax_amount, T1.shipping_fee, T1.estimated_delivery_date, T1.cart_status FROM cart AS T1 INNER JOIN customerinfo AS T2 ON T1.fk_user_id = T2.person_customer_id INNER JOIN customers_loyalty_program AS T3 ON T2.person_customer_id = T3.associated_customer_reference_id WHERE T1.total_price > 100 AND T1.discount_applied > 10 AND T1.tax_amount > 5 AND T1.shipping_fee > 10 AND T1.estimated_delivery_date > NOW() AND T1.estimated_delivery_date < NOW() + INTERVAL '30 day' AND T3.eligible_for_special_promotions = TRUE AND T3.accumulated_loyalty_points_balance > 1000 AND T2.account_has_active_subscription = TRUE AND T2.person_is_premium = FALSE AND T2.person_gender = 'M' AND T2.person_income > 50000 AND T2.preferences_avg_spent_per_order > 100",
        "GeneratedQuery": "SELECT orders.id AS order\\_id,\nusers.id AS user\\_id,\nusers.name AS user\\_name,\nusers.email AS user\\_email,\nusers.phone AS user\\_phone,\norders.date AS order\\_date,\nSUM(orders.amount) AS total\\_price,\norders.discount AS discount\\_applied,\norders.tax AS tax\\_amount,\norders.shipping\\_fee AS shipping\\_fees,",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "Get the order id, total amount, and shipping address for orders where the order status is 'shipped' and the payment status is 'paid'.",
        "Query": "SELECT order_id, total_amount, shipping_address_street FROM orders WHERE order_status = 'shipped' AND payment_status = 'paid';",
        "GeneratedQuery": "SELECT orders.id, SUM(orders.amount) as total\\_amount, users.email as shipping\\_address\nFROM orders\nJOIN users ON orders.user\\_id = users.id\nWHERE orders.status = 'shipped' AND orders.payment\\_status = 'paid'\nGROUP BY orders.id, users.email;",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "List all events where the device browser is 'Chrome' and the event type is 'purchase'.",
        "Query": "SELECT * FROM events WHERE device_browser = 'Chrome' AND event_type = 'purchase'",
        "GeneratedQuery": "I'm sorry for the confusion, but the schema you provided does not include a table for \"events\" or a column for \"device browser\". Therefore, it's not possible to convert the given natural language query into a valid SQL statement using this schema.\n\nHowever, if we assume a different schema with an \"events\" table that includes columns for \"device_browser\" and \"event_type\", the SQL statement would look like this:\n\nSELECT \\* FROM events WHERE device",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "Get the order ID, order date, and total amount for orders where the shipping fee is greater than 10 and the order status is 'completed'.",
        "Query": "SELECT order_id, order_date, total_amount FROM orders WHERE shipping_fee > 10 AND order_status = 'completed';",
        "GeneratedQuery": "SELECT orders.id, orders.date, SUM(orders.amount) AS total\\_amount\nFROM orders\nWHERE orders.amount > 10 AND orders.status = 'completed'\nGROUP BY orders.id, orders.date;",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "What is the total wishlist quantity for each customer with their loyalty points and preferred language?",
        "Query": "SELECT SUM(w.quantity), c.person_loyalty_points, c.person_preferred_language FROM wishlist w FULL OUTER JOIN customerinfo c ON w.fk_user_id = c.person_customer_id GROUP BY c.person_loyalty_points, c.person_preferred_language",
        "GeneratedQuery": "SELECT u.id, u.name, SUM(w.quantity) AS total\\_wishlist\\_quantity, l.points, p.language\nFROM users u\nLEFT JOIN (\nSELECT user\\_id, SUM(quantity) as quantity\nFROM wishlists\nGROUP BY user\\_id\n) w ON u.id = w.user\\_id\nLEFT JOIN loyalty l ON u.id = l.user\\_id\nLEFT JOIN",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "List all refunds that have been initiated by the customer.",
        "Query": "SELECT * FROM refunds_returns WHERE refund_initiated_by = 'customer';",
        "GeneratedQuery": "SELECT *\nFROM orders\nWHERE amount < 0;",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "Find the total revenue generated from orders placed in the last 30 days.",
        "Query": "SELECT SUM(total_amount) FROM orders WHERE order_date >= NOW() - INTERVAL '30 days';",
        "GeneratedQuery": "SELECT SUM(amount)\nFROM orders\nWHERE date >= CURDATE() - INTERVAL 30 DAY;",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "What is the total price of all order items in the order_items table?",
        "Query": "SELECT SUM(total_price) FROM order_items;",
        "GeneratedQuery": "I'm sorry for the confusion, but your schema doesn't include an \"order_items\" table. However, if you want to calculate the total amount of all orders, you can use the following SQL statement:\n\n```sql\nSELECT SUM(amount) FROM orders;\n```",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "Retrieve the average total amount spent on orders for each campaign type, along with the campaign name, and sort by average total amount in descending order.",
        "Query": "SELECT c.campaign_type, c.campaign_name, AVG(o.total_amount) AS avg_total_amount FROM orders o JOIN campaigns c ON o.campaign_id = c.campaign_id GROUP BY c.campaign_type, c.campaign_name ORDER BY avg_total_amount DESC",
        "GeneratedQuery": "SELECT c.name, AVG(o.amount) as avg\\_total\\_amount\nFROM orders o\nJOIN users u ON u.id = o.user\\_id\nJOIN (\nSELECT id as campaign\\_id, name\nFROM campaigns\n) c ON u.campaign\\_id = c.campaign\\_id\nGROUP BY c.name\nORDER BY avg\\_total\\_amount DESC;\n\nNote: The schema doesn't include",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "Get the transaction details of customers who have earned more than 100 bonus loyalty points last month.",
        "Query": "SELECT T1.* FROM transactions_and_payments AS T1 INNER JOIN customers_loyalty_program AS T2 ON T1.corresponding_customer_reference_identifier = T2.associated_customer_reference_id WHERE T2.bonus_loyalty_points_last_month > 100;",
        "GeneratedQuery": "SELECT users.name, orders.amount, orders.date\nFROM users\nJOIN orders ON users.id = orders.user\\_id\nWHERE EXTRACT(MONTH FROM orders.date) = EXTRACT(MONTH FROM CURRENT\\_DATE - INTERVAL '1 month')\nAND EXTRACT(YEAR FROM orders.date) = EXTRACT(YEAR FROM CURRENT\\_DATE)\nAND users.id IN (",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "Find the shipping carrier for the order with the highest shipping cost, along with the product name and total price for each order item in that order, and also include the customer notes and refund status for any refunds or returns related to those order items.",
        "Query": "SELECT T3.carrier, T1.product_name, T1.total_price, T4.customer_notes, T4.refund_status FROM order_items AS T1 INNER JOIN shipping AS T3 ON T1.order_id = T3.fk_order_id INNER JOIN refunds_returns AS T4 ON T1.order_item_id = T4.fk_product_id WHERE T3.shipping_cost = ( SELECT MAX(shipping_cost) FROM shipping )",
        "GeneratedQuery": "SELECT o.id AS order\\_id, p.name AS product\\_name, p.price * o.amount AS total\\_price, s.carrier AS shipping\\_carrier, r.customer\\_notes, r.refund\\_status\nFROM orders o\nJOIN users u ON u.id = o.user\\_id\nJOIN (\nSELECT order\\_id, MAX(amount) AS max\\_amount\nFROM orders\nGROUP BY order\\_id\n) m",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "Find all customers who have made a purchase in the last 30 days, have a premium account, and have spent an average of more than $50 per order. Also, include details of their most recent event interaction, including the type of event, the device used, and the location of the event.",
        "Query": "SELECT ci.*, e.event_type, e.device_platform, e.location_city, e.location_country FROM customerinfo ci JOIN events e ON ci.person_customer_id = e.person_customer_id WHERE ci.account_has_active_subscription = true AND ci.person_is_premium = true AND ci.preferences_avg_spent_per_order > 50 AND e.event_timestamp >= CURRENT_DATE - INTERVAL '30 days'",
        "GeneratedQuery": "SELECT u.id, u.name, u.age, u.email, o.id AS order\\_id, o.amount, o.date, e.event\\_type, e.device, e.location\nFROM users u\nJOIN orders o ON u.id = o.user\\_id\nJOIN (\n    SELECT user\\_id, MAX(date) AS max\\_date\n    FROM orders\n    WHERE date >= NOW() - INTER",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "What is the average total price of all carts?",
        "Query": "SELECT AVG(total_price) FROM cart",
        "GeneratedQuery": "SELECT AVG(amount) AS average\\_total\\_price\nFROM orders;",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "What is the total price of the order items where the item status is 'delivered' and the return period is greater than 30 days?",
        "Query": "SELECT SUM(total_price) FROM order_items WHERE item_status = 'delivered' AND return_period > 30",
        "GeneratedQuery": "I'm assuming that there is a separate table called 'order\\_items' that keeps track of the status and return period for each order item. Here's the SQL query for the given schema and the revised query.\n\nSQL:\n```\nSELECT SUM(price * stock) AS total_price\nFROM order_items oi\nJOIN products p ON oi.product_id = p.id\nWHERE oi.status = 'deliver",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "Find the average supplier rating and the supplier's country of operation for suppliers who have supplied more than 1000 products",
        "Query": "SELECT average_supplier_rating, supplier_country_of_operation FROM suppliers WHERE total_number_of_products_supplied > 1000",
        "GeneratedQuery": "SELECT AVG(rating), country\nFROM suppliers\nWHERE id IN (\n    SELECT supplier_id\n    FROM product_suppliers\n    GROUP BY supplier_id\n    HAVING COUNT(*) > 1000\n);",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "Get the names and email addresses of all customers who have placed more than one order, along with the shipping address and carrier for their most recent order",
        "Query": "SELECT c.person_first_name, c.person_last_name, c.person_email, s.shipping_address, s.carrier FROM customerinfo c JOIN orders o ON c.person_customer_id = o.person_customer_id JOIN shipping s ON o.order_id = s.fk_order_id WHERE c.preferences_total_orders > 1 ORDER BY o.order_date DESC LIMIT 1",
        "GeneratedQuery": "SELECT users.name, users.email, orders.shipping\\_address, orders.carrier\nFROM users\nJOIN (\nSELECT user\\_id, shipping\\_address, carrier, MAX(date) AS max\\_date\nFROM orders\nGROUP BY user\\_id\nHAVING COUNT(*) > 1\n) AS most\\_recent\\_orders\nON users.id = most\\_recent\\_orders.user\\_id\nJOIN orders ON users.id",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "Retrieve the average review rating for each product, including only those with more than 10 reviews.",
        "Query": "SELECT p.unique_product_identifier, AVG(prar.submitted_review_star_rating) AS avg_rating FROM product_reviews_and_ratings AS prar JOIN products AS p ON prar.referenced_product_identifier = p.unique_product_identifier GROUP BY p.unique_product_identifier HAVING COUNT(prar.review_unique_identifier) > 10;",
        "GeneratedQuery": "SELECT p.id, AVG(r.rating) as avg\\_rating\nFROM products p\nJOIN orders o ON p.id = o.product\\_id\nJOIN reviews r ON o.id = r.order\\_id\nGROUP BY p.id\nHAVING COUNT(r.id) > 10;",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "List the review unique identifier, review submission date, and submitted review star rating for reviews that have more than 5 helpful votes and are verified.",
        "Query": "SELECT review_unique_identifier, customer_review_submission_date, submitted_review_star_rating FROM product_reviews_and_ratings WHERE number_of_helpful_votes_received > 5 AND verification_status_of_reviewer = TRUE",
        "GeneratedQuery": "SELECT reviews.id, reviews.date, reviews.star\\_rating\nFROM reviews\nWHERE reviews.helpful\\_votes > 5 AND reviews.verified = TRUE;\n\nNote: Based on the provided schema, there is no table for \"reviews\". I assumed that there is a table named \"reviews\" with columns id, date, and star\\_rating.",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "Get the total amount of refund made by each person with the corresponding wishlist status.",
        "Query": "SELECT SUM(T1.refund_amount), T2.wishlist_status FROM refunds_returns AS T1 INNER JOIN wishlist AS T2 ON T1.fk_user_id = T2.fk_user_id GROUP BY T2.wishlist_status",
        "GeneratedQuery": "SELECT u.name, SUM(o.amount) as total\\_refund, MAX(p.stock) as wishlist\\_status\nFROM users u\nJOIN orders o ON u.id = o.user\\_id\nJOIN products p ON u.id = p.id\nWHERE o.amount < 0\nGROUP BY u.name;",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "Retrieve the average final billed amount for transactions that are not fraudulent.",
        "Query": "SELECT AVG(final_billed_amount) AS avg_final_billed_amount FROM transactions_and_payments WHERE is_transaction_fraudulent = false;",
        "GeneratedQuery": "SELECT AVG(amount)\nFROM orders\nWHERE fraudulent = False;",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "Retrieve the names and email addresses of customers whose loyalty membership will expire within the next 30 days and who have not made any loyalty point redemptions in the last 6 months.",
        "Query": "SELECT c.person_first_name, c.person_last_name, c.person_email FROM customerinfo c JOIN customers_loyalty_program clp ON c.person_customer_id = clp.associated_customer_reference_id WHERE clp.expiration_date_of_loyalty_points BETWEEN CURRENT_DATE AND CURRENT_DATE + INTERVAL '30 days' AND (clp.last_redemption_date IS NULL OR clp.last_redemption_date < CURRENT_DATE - INTERVAL '6 months');",
        "GeneratedQuery": "SELECT name, email\nFROM users\nWHERE id IN (\n    SELECT user\\_id\n    FROM orders\n    WHERE date < DATE\\_ADD(CURDATE(), INTERVAL 30 DAY)\n    AND user\\_id NOT IN (\n        SELECT user\\_id\n        FROM orders\n        WHERE date < DATE\\_SUB(CURDATE(), INTERVAL 6 MONTH)\n    )\n);",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "Get the total amount spent by each customer in the transactions_and_payments table, grouping by customer reference id.",
        "Query": "SELECT corresponding_customer_reference_identifier, SUM(final_billed_amount) AS total_amount_spent FROM transactions_and_payments GROUP BY corresponding_customer_reference_identifier;",
        "GeneratedQuery": "SELECT user\\_id, SUM(amount) as total\\_amount\nFROM orders\nGROUP BY user\\_id;",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "Get the official business name of each supplier, the average rating of each supplier, and the number of products supplied by each supplier for suppliers that have products which were ordered by customers who have opened an email, sorted by the total number of products supplied in descending order.",
        "Query": "SELECT T1.official_supplier_business_name, T1.average_supplier_rating, T1.total_number_of_products_supplied FROM suppliers AS T1 INNER JOIN events AS T2 ON T1.supplier_unique_identifier = T2.order_id WHERE T2.event_type = 'email_opened' GROUP BY T1.official_supplier_business_name, T1.average_supplier_rating, T1.total_number_of_products_supplied ORDER BY T1.total_number_of_products_supplied DESC",
        "GeneratedQuery": "SELECT s.name AS business\\_name, AVG(r.rating) AS average\\_rating, COUNT(p.id) AS num\\_products\nFROM suppliers s\nJOIN products p ON s.id = p.supplier\\_id\nJOIN orders o ON p.id = o.product\\_id\nJOIN users u ON o.user\\_id = u.id\nJOIN email\\_addresses e ON u.email = e.email\nW",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "Find the total amount spent in transaction currency code EUR and the total number of transactions for the customers who have ordered more than 5 times, and calculate the average amount spent for each order. Also, get the total number of transactions for each customer and the average amount spent for each order. Additionally, get the details of the orders that were refunded and the reason for the refund, along with the details of the customers who have ordered the most, including the total amount spent and the average amount spent for each order.",
        "Query": "WITH refund_info AS ( SELECT T1.transaction_unique_identifier, T1.corresponding_customer_reference_identifier, T1.refund_amount, T1.chargeback_dispute_reason FROM transactions_and_payments T1 WHERE T1.refund_status = TRUE AND T1.transaction_currency_code = 'EUR' ), customer_info AS ( SELECT T1.corresponding_customer_reference_identifier, COUNT(T1.transaction_unique_identifier) AS transaction_count, SUM(T1.final_billed_amount) AS total_spent, AVG(T1.final_billed_amount) AS avg_spent FROM transactions_and_payments T1 WHERE T1.transaction_currency_code = 'EUR' GROUP BY T1.corresponding_customer_reference_identifier HAVING COUNT(T1.transaction_unique_identifier) > 5 ) SELECT T2.corresponding_customer_reference_identifier, T2.transaction_count, T2.total_spent, T2.avg_spent, T1.refund_amount, T1.chargeback_dispute_reason FROM refund_info T1 INNER JOIN customer_info T2 ON T1.corresponding_customer_reference_identifier = T2.corresponding_customer_reference_identifier ORDER BY T2.transaction_count DESC LIMIT 1",
        "GeneratedQuery": "```sql\nSELECT u.name, \n       SUM(o.amount) AS total_amount_eur,\n       COUNT(o.id) AS total_transactions,\n       AVG(o.amount) AS avg_amount_per_transaction\nFROM users u\nJOIN orders o ON u.id = o.user_id\nWHERE o.date IN (SELECT date FROM orders WHERE amount < 0)\nGROUP BY u.id",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "Find the average standard retail price including tax for products from suppliers in the UK, who have at least 100 products supplied, and who have an average supplier rating of at least 4.0. Also, find the total number of such suppliers.",
        "Query": "SELECT AVG(T2.standard_retail_price_including_tax) AS AVG_PRICE, COUNT(T1.supplier_unique_identifier) AS TOTAL_SUPPLIERS FROM suppliers AS T1 INNER JOIN products AS T2 ON T1.supplier_unique_identifier = T2.associated_supplier_reference_id WHERE T1.supplier_country_of_operation = 'UK' AND T1.total_number_of_products_supplied >= 100 AND T1.average_supplier_rating >= 4.0",
        "GeneratedQuery": "SELECT AVG(price * 1.05) AS 'average_price', COUNT(DISTINCT user\\_id) AS 'total_suppliers'\nFROM orders\nJOIN users ON orders.user\\_id = users.id\nWHERE users.country = 'UK'\nAND (\nSELECT COUNT(DISTINCT products.id)\nFROM orders\nJOIN users ON orders.user\\_id = users.id\nJO",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "Find the total transaction amount for each customer who has made at least one transaction using a digital wallet.",
        "Query": "SELECT SUM(total_transaction_amount) FROM transactions_and_payments WHERE digital_wallet_used IS NOT NULL GROUP BY corresponding_customer_reference_identifier",
        "GeneratedQuery": "SELECT users.name, SUM(orders.amount) as total\\_transaction\\_amount\nFROM users\nJOIN orders ON users.id = orders.user\\_id\nWHERE orders.date IN (\nSELECT date\nFROM orders\nWHERE user\\_id IN (\nSELECT user\\_id\nFROM orders\nWHERE amount > 0 -- assuming amount > 0 indicates a digital wallet transaction\n)\nGROUP BY users.name;",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "Find the total amount spent and average supplier rating for each order with its corresponding supplier information.",
        "Query": "SELECT SUM(o.total_amount), AVG(s.average_supplier_rating) FROM orders o LEFT JOIN suppliers s ON o.campaign_id = s.supplier_unique_identifier GROUP BY s.supplier_unique_identifier",
        "GeneratedQuery": "SELECT o.user\\_id, SUM(o.amount) as total\\_amount, AVG(p.rating) as avg\\_rating, p.name as supplier\\_name\nFROM orders o\nJOIN users u ON o.user\\_id = u.id\nJOIN (\nSELECT id as product\\_id, AVG(rating) as rating\nFROM suppliers\nGROUP BY id\n) p ON o.product\\_id = p.product\\_id",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "List all carts along with the product quantity and total discounted price for each cart where the cart was added more than 30 days ago.",
        "Query": "SELECT id, fk_product_id, quantity, discounted_total_price FROM cart WHERE added_at < NOW() - INTERVAL '30 days';",
        "GeneratedQuery": "SELECT o.user\\_id AS cart\\_id, SUM(p.stock) AS product\\_quantity, SUM(p.price \\* (1 - p.discount)) AS total\\_discounted\\_price\nFROM orders o\nJOIN products p ON o.id = p.order\\_id\nWHERE o.date < NOW() - INTERVAL 30 DAY\nGROUP BY o.user\\_id;",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "What is the total amount spent on all campaigns?",
        "Query": "SELECT SUM(actual_spent) FROM campaigns",
        "GeneratedQuery": "I'm sorry for the confusion, but the schema provided does not include any table or column related to \"campaigns\". Therefore, I cannot generate a valid SQL statement for the given query.",
        "ExecutionStatus": "Error",
        "ErrorMessage": "Invalid SQL syntax"
    },
    {
        "NL": "Find the total number of orders and total amount spent for each month in 2022.",
        "Query": "SELECT CAST(EXTRACT(MONTH FROM order_date) AS TEXT) AS month, COUNT(order_id) AS total_orders, SUM(total_amount) AS total_amount FROM orders WHERE CAST(EXTRACT(YEAR FROM order_date) AS TEXT) = '2022' GROUP BY month",
        "GeneratedQuery": "SELECT \n    DATE_FORMAT(date, '%Y-%m') AS month, \n    COUNT(*) AS total\\_orders, \n    SUM(amount) AS total\\_amount\nFROM \n    orders\nWHERE \n    YEAR(date) = 2022\nGROUP BY \n    month;",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "Find the total number of reviews and the average review sentiment score for each product, ordered by the total number of reviews in descending order.",
        "Query": "SELECT p.product_display_name, COUNT(pr.review_unique_identifier) AS total_reviews, AVG(pr.sentiment_analysis_score) AS average_sentiment FROM products p JOIN product_reviews_and_ratings pr ON p.unique_product_identifier = pr.referenced_product_identifier GROUP BY p.product_display_name ORDER BY total_reviews DESC;",
        "GeneratedQuery": "SELECT p.id, p.name, COUNT(o.id) as total\\_reviews, AVG(r.sentiment\\_score) as avg\\_sentiment\\_score\nFROM products p\nLEFT JOIN orders o ON p.id = o.product\\_id\nLEFT JOIN reviews r ON o.id = r.order\\_id\nGROUP BY p.id, p.name\nORDER BY total\\_reviews DESC;\n\nNote",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "Calculate the average total amount of orders placed within the campaigns that generated more than $500 in revenue, along with the campaign name.",
        "Query": "SELECT c.campaign_name, AVG(o.total_amount) AS average_total_amount FROM orders o JOIN campaigns c ON o.campaign_id = c.campaign_id WHERE c.revenue_generated > 500 GROUP BY c.campaign_name;",
        "GeneratedQuery": "SELECT AVG(o.amount) as avg\\_order\\_amount, c.name as campaign\\_name\nFROM orders o\nJOIN (\nSELECT campaigns.id as id, campaigns.name as name, SUM(orders.amount) as revenue\nFROM campaigns\nJOIN orders ON campaigns.id = orders.campaign\\_id\nGROUP BY campaigns.id, campaigns.name\nHAVING SUM(orders.amount) > 500\n)",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "Find the total shipping cost for all orders shipped to the city of New York.",
        "Query": "SELECT SUM(shipping_cost) FROM shipping WHERE shipping_city = 'New York'",
        "GeneratedQuery": "SELECT SUM(amount)\nFROM orders\nWHERE NOT EXISTS (\n    SELECT 1\n    FROM users\n    WHERE users.id = orders.user\\_id AND email NOT LIKE '%@nyc%.com'\n);",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "Find the total number of wishlist records for each user, along with the total number of products supplied by each supplier, and also find the total reach and revenue generated for each campaign that has a higher budget than the average budget of all campaigns, and also find the shipping cost and shipping status for each shipping record where the shipping address is in the same city as the registered business address of the supplier with the highest average supplier rating, and also find the average supplier rating and official business name for each supplier who operates in the same country as the supplier with the highest average supplier rating.",
        "Query": "WITH ranked_suppliers AS (SELECT supplier_unique_identifier, total_number_of_products_supplied, average_supplier_rating, official_supplier_business_name, supplier_country_of_operation, registered_business_address, ROW_NUMBER() OVER (ORDER BY average_supplier_rating DESC) AS rank FROM suppliers), top_supplier AS (SELECT supplier_country_of_operation, registered_business_address FROM ranked_suppliers WHERE rank = 1), campaign_stats AS (SELECT campaign_id, total_reach, revenue_generated, budget FROM campaigns WHERE budget > (SELECT AVG(budget) FROM campaigns)), shipping_stats AS (SELECT shipping_cost, shipping_status FROM shipping WHERE shipping_city IN (SELECT registered_business_address FROM top_supplier)), wishlist_stats AS (SELECT fk_user_id, COUNT(*) AS total_wishlist_records FROM wishlist GROUP BY fk_user_id) SELECT ws.fk_user_id, ws.total_wishlist_records, s.total_number_of_products_supplied, cs.total_reach, cs.revenue_generated, ss.shipping_cost, ss.shipping_status, s.average_supplier_rating, s.official_supplier_business_name FROM wishlist_stats ws JOIN suppliers s ON 1 = 1 JOIN top_supplier ts ON s.supplier_country_of_operation = ts.supplier_country_of_operation JOIN campaign_stats cs ON 1 = 1 JOIN shipping_stats ss ON 1 = 1",
        "GeneratedQuery": "SELECT u.id, u.name, COUNT(w.user\\_id) AS wishlist\\_records, \n       SUM(p.stock) AS products\\_supplied, \n       SUM(o.amount) AS revenue, \n       AVG(o.amount) AS average\\_budget, \n       s1.shipping\\_cost, s1.shipping\\_status, \n       s2.avg\\_rating, s2",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "Provide the loyalty tier level and preferred language of customers who have purchased products from the wishlist with a total discount amount redeemed of more than $10.",
        "Query": "SELECT T2.loyalty_program_tier_level, T1.person_preferred_language FROM customerinfo AS T1 INNER JOIN customers_loyalty_program AS T2 ON T1.person_customer_id = T2.associated_customer_reference_id INNER JOIN wishlist AS T3 ON T1.person_customer_id = T3.fk_user_id WHERE T2.total_discount_amount_redeemed > 10",
        "GeneratedQuery": "SELECT u.loyalty\\_tier, u.preferred\\_language\nFROM users u\nJOIN orders o ON u.id = o.user\\_id\nWHERE o.id IN (\n    SELECT wl.order\\_id\n    FROM wishlist wl\n    JOIN wishlist\\_items wi ON wl.id = wi.wishlist\\_id\n    JOIN products p ON wi.product\\_id = p.",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "List all the order items that are returnable and have a quantity greater than 1, along with the product name and the order id.",
        "Query": "SELECT product_name, order_id FROM order_items WHERE is_returnable = TRUE AND quantity > 1;",
        "GeneratedQuery": "SELECT orders.id AS order\\_id, products.name AS product\\_name\nFROM orders\nJOIN products ON orders.user\\_id = products.id\nWHERE products.stock > 1;",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "Find the average order value and total orders for customers who have placed at least one order in the last 30 days, and have a loyalty program status with a balance greater than 100. Also, include the customer's name and occupation in the results.",
        "Query": "SELECT AVG(o.total_amount), COUNT(o.order_id), ci.person_first_name, ci.person_last_name, ci.person_occupation FROM orders o INNER JOIN customerinfo ci ON o.person_customer_id = ci.person_customer_id WHERE o.order_date >= NOW() - INTERVAL '30 day' AND ci.account_account_balance > 100 GROUP BY ci.person_first_name, ci.person_last_name, ci.person_occupation",
        "GeneratedQuery": "SELECT u.name, AVG(o.amount) AS avg\\_order\\_value, COUNT(o.id) AS total\\_orders\nFROM users u\nJOIN orders o ON u.id = o.user\\_id\nJOIN (\nSELECT user\\_id\nFROM orders\nWHERE date >= NOW() - INTERVAL 30 DAY\n) recent\\_orders ON u.id = recent\\_orders.user\\_id\nWHERE",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "Find the customer's name and total loyalty points earned from all transactions for customers who have more than 100 loyalty points.",
        "Query": "SELECT T1.person_first_name, T1.person_last_name, COALESCE(SUM(T2.associated_loyalty_points_earned), 0) FROM customerinfo AS T1 LEFT JOIN transactions_and_payments AS T2 ON T1.person_customer_id = T2.corresponding_customer_reference_identifier WHERE T1.person_loyalty_points > 100 GROUP BY T1.person_first_name, T1.person_last_name",
        "GeneratedQuery": "SELECT users.name, SUM(orders.amount) as total\\_loyalty\\_points\nFROM users\nJOIN orders ON users.id = orders.user\\_id\nGROUP BY users.id\nHAVING SUM(orders.amount) > 100;",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "Find the total number of loyalty points for customers who have participated in exclusive beta testing and have a loyalty program tier level of 'Platinum'.",
        "Query": "SELECT SUM(c.person_loyalty_points) FROM customerinfo c JOIN customers_loyalty_program clp ON c.person_customer_id = clp.associated_customer_reference_id WHERE clp.participation_in_exclusive_beta_testing = true AND clp.loyalty_program_tier_level = 'Platinum';",
        "GeneratedQuery": "SELECT SUM(loyalty\\_points)\nFROM (\nSELECT users.id, SUM(products.price \\* orders.amount) AS loyalty\\_points\nFROM users\nJOIN orders ON users.id = orders.user\\_id\nJOIN products ON orders.id = products.order\\_id\nWHERE users.id IN (SELECT user\\_id FROM exclusive\\_beta\\_testers)\nAND users.id IN (SELECT user\\_id FROM loyalty",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "List all customers who have made more than 10 orders with their email addresses and total orders count.",
        "Query": "SELECT person_email, preferences_total_orders FROM customerinfo WHERE preferences_total_orders > 10;",
        "GeneratedQuery": "```sql\nSELECT u.email, COUNT(o.id) AS total_orders\nFROM users u\nJOIN orders o ON u.id = o.user_id\nGROUP BY u.email\nHAVING total_orders > 10;\n```",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "Find the total number of verified reviews written by premium customers who have made more than 5 purchases and have an account balance greater than $500.",
        "Query": "SELECT COUNT(*) FROM product_reviews_and_ratings AS prr JOIN customerinfo AS ci ON prr.reviewing_customer_identifier = ci.person_customer_id WHERE prr.verification_status_of_reviewer = TRUE AND ci.person_is_premium = TRUE AND ci.preferences_total_orders > 5 AND ci.account_account_balance > 500;",
        "GeneratedQuery": "SELECT COUNT(*)\nFROM users u\nJOIN orders o ON u.id = o.user\\_id\nWHERE u.age >= 18 AND u.email NOT LIKE '%@fake%' AND u.id IN (\n    SELECT user\\_id\n    FROM orders\n    GROUP BY user\\_id\n    HAVING COUNT(*) > 5\n) AND u.id IN (\n    SELECT user\\_id",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "Get the names of the campaigns with a budget greater than $10,000, along with the names of the suppliers who supply products with a quantity greater than 50 and have an average rating greater than 3, and the total revenue generated by these campaigns.",
        "Query": "SELECT T3.campaign_name, T5.official_supplier_business_name, SUM(T3.revenue_generated) FROM campaigns AS T1 INNER JOIN campaigns AS T3 ON T1.campaign_id = T3.campaign_id INNER JOIN inventory AS T4 ON T3.campaign_id = T4.referenced_product_id INNER JOIN suppliers AS T5 ON T4.supplier_id = T5.supplier_unique_identifier WHERE T3.budget > 10000 AND T4.quantity > 50 AND T5.average_supplier_rating > 3 GROUP BY T3.campaign_name, T5.official_supplier_business_name",
        "GeneratedQuery": "SELECT u.name AS campaign\\_name, p.name AS supplier\\_name, SUM(o.amount) AS total\\_revenue\nFROM users u\nJOIN orders o ON u.id = o.user\\_id\nJOIN products p ON o.id = p.order\\_id\nWHERE o.amount > 10000\nAND p.stock > 50\nAND (\nSELECT AVG(r.rating)\nFROM reviews",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "Get the names of the suppliers who supply products with a quantity greater than 100 and have an average rating greater than 4, along with the product names and their current stock status.",
        "Query": "SELECT T3.official_supplier_business_name, T2.referenced_product_id, T2.stock_status FROM inventory AS T1 INNER JOIN inventory AS T2 ON T1.id = T2.id INNER JOIN suppliers AS T3 ON T2.supplier_id = T3.supplier_unique_identifier WHERE T2.quantity > 100 AND T3.average_supplier_rating > 4",
        "GeneratedQuery": "SELECT u.name, p.name, p.stock\nFROM users u\nJOIN orders o ON u.id = o.user\\_id\nJOIN products p ON o.id = p.order\\_id\nWHERE p.stock > 100\nAND (\n    SELECT AVG(r.rating)\n    FROM reviews r\n    WHERE r.product\\_id = p.id\n) > 4;",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "Find the loyalty program tier level and the total number of verified reviews for products purchased by customers who have a loyalty membership unique identifier greater than 1000 and have made a transaction with a total transaction amount greater than 500.",
        "Query": "SELECT c.loyalty_program_tier_level, p.total_number_of_verified_reviews FROM customers_loyalty_program c JOIN transactions_and_payments t ON c.associated_customer_reference_id = t.corresponding_customer_reference_identifier JOIN products p ON t.linked_order_reference_identifier = p.unique_product_identifier WHERE c.loyalty_membership_unique_identifier > 1000 AND t.total_transaction_amount > 500",
        "GeneratedQuery": "SELECT t.tier, SUM(p.verified\\_reviews) as total\\_reviews\nFROM (SELECT DISTINCT u.id as user\\_id, l.tier\n      FROM users u\n      JOIN loyalty\\_membership l ON u.id = l.user\\_id\n      WHERE u.id > 1000 AND u.id IN (SELECT user\\_id FROM orders WHERE amount > 500)) t",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "Get the order status and total amount for all orders with shipping address in California.",
        "Query": "SELECT order_status, SUM(total_amount) AS total_amount FROM orders WHERE shipping_address_state = 'California' GROUP BY order_status",
        "GeneratedQuery": "SELECT orders.amount AS total\\_amount, 'California' AS order\\_status\nFROM orders\nJOIN users ON orders.user\\_id = users.id\nWHERE users.email LIKE '%california%';",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "Fetch all items in the wishlist for the user with user id 123.",
        "Query": "SELECT id, fk_product_id, price_at_addition, discount_at_addition, quantity FROM wishlist WHERE fk_user_id = 123;",
        "GeneratedQuery": "SELECT products.id, products.name, products.price, products.stock\nFROM users\nJOIN orders ON users.id = orders.user_id\nJOIN (\n    SELECT *\n    FROM orders\n    WHERE user_id = 123 AND amount = 0\n) wishlist ON orders.id = wishlist.id;",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "What are the top 5 campaigns by revenue generated?",
        "Query": "SELECT campaign_name, revenue_generated FROM campaigns ORDER BY revenue_generated DESC LIMIT 5",
        "GeneratedQuery": "SELECT o.user\\_id, SUM(o.amount) as revenue\nFROM orders o\nGROUP BY o.user\\_id\nORDER BY revenue DESC\nLIMIT 5;",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "Get the total number of products, along with their names, and the quantity in stock for products with a stock status of 'in stock'.",
        "Query": "SELECT T2.product_display_name, T1.quantity, COUNT(T1.referenced_product_id) FROM inventory AS T1 INNER JOIN products AS T2 ON T1.referenced_product_id = T2.unique_product_identifier WHERE T1.stock_status = 'in stock' GROUP BY T2.product_display_name, T1.quantity",
        "GeneratedQuery": "SELECT name, SUM(stock) as quantity_in_stock\nFROM products\nWHERE stock > 0\nGROUP BY name;",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "What is the total number of helpful votes received by each product and the total price of each order item for the product?",
        "Query": "SELECT SUM(prar.number_of_helpful_votes_received) AS total_helpful_votes, SUM(oi.total_price) AS total_order_item_price FROM product_reviews_and_ratings prar JOIN order_items oi ON prar.referenced_product_identifier = oi.product_id GROUP BY oi.product_id",
        "GeneratedQuery": "SELECT \n    p.id AS product\\_id, \n    SUM(o.amount) AS total\\_price,\n    COALESCE(SUM(v.helpful\\_vote), 0) AS total\\_helpful\\_votes\nFROM \n    products p\nLEFT JOIN (\n    SELECT \n        product\\_id, \n        SUM(helpful) AS helpful\\_vote\n    FROM \n        votes",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "Get the customer ID, first name, and last name of customers who have initiated a refund and the refund status is 'pending'.",
        "Query": "SELECT ci.person_customer_id, ci.person_first_name, ci.person_last_name FROM customerinfo ci JOIN refunds_returns rr ON ci.person_customer_id = rr.fk_user_id WHERE rr.refund_initiated_by = 'customer' AND rr.refund_status = 'pending';",
        "GeneratedQuery": "SELECT users.id, users.name \nFROM users \nJOIN orders ON users.id = orders.user\\_id \nWHERE orders.amount < 0 AND orders.date IS NOT NULL;",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "Get the list of customers who have earned the most loyalty points in the last year, along with their total spending, average order value, and the number of orders they have placed, considering only customers who have made at least 5 purchases and have a loyalty tier level of 'Gold' or higher.",
        "Query": "SELECT cl.associated_customer_reference_id, SUM(o.total_amount), AVG(o.total_amount), COUNT(DISTINCT o.order_id) FROM orders o JOIN customers_loyalty_program cl ON o.person_customer_id = cl.associated_customer_reference_id JOIN transactions_and_payments t ON o.order_id = t.linked_order_reference_identifier WHERE cl.loyalty_program_tier_level IN ('Gold', 'Platinum') AND o.order_date > NOW() - INTERVAL '1 year' GROUP BY cl.associated_customer_reference_id HAVING COUNT(DISTINCT o.order_id) >= 5 ORDER BY SUM(cl.accumulated_loyalty_points_balance) DESC",
        "GeneratedQuery": "SELECT u.name, SUM(o.amount) AS total\\_spending, AVG(o.amount) AS average\\_order\\_value, COUNT(o.id) AS number\\_of\\_orders\nFROM users u\nJOIN orders o ON u.id = o.user\\_id\nJOIN (\n    SELECT user\\_id\n    FROM orders\n    WHERE date >= DATE_SUB(CURRENT_DATE, INTERVAL 1 YEAR",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "Find the number of orders that have been cancelled or returned, along with the total amount of discounts applied to these orders, and the average review rating for these orders. Include only orders made by customers who have also completed a survey. Group the results by the customer ID.",
        "Query": "SELECT o.person_customer_id, COUNT(o.order_id), SUM(o.discount_applied), AVG(e.review_rating) FROM orders o INNER JOIN events e ON o.order_id = e.order_id INNER JOIN refunds_returns rr ON o.order_id = rr.fk_order_id WHERE o.order_status IN ('Cancelled', 'Returned') AND e.event_type = 'Survey Completed' GROUP BY o.person_customer_id",
        "GeneratedQuery": "SELECT u.id, COUNT(o.id) as num\\_orders, SUM(o.discount) as total\\_discount, AVG(r.rating) as avg\\_rating\nFROM users u\nJOIN orders o ON u.id = o.user\\_id\nJOIN (\n    SELECT id, status\n    FROM orders\n    WHERE status IN ('cancelled', 'returned')\n) cancelled\\_orders ON o.id",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "Retrieve detailed product information for all items that have been part of orders shipped after January 1, 2023, with a promotional discount greater than 20%, and which have a shipping status indicating they are delivered, grouping the results by product category and listing the count of such products in each category.",
        "Query": "SELECT p.product_category_primary, COUNT(*) as product_count FROM products p JOIN order_items oi ON p.unique_product_identifier = oi.product_id JOIN shipping s ON oi.order_id = s.fk_order_id WHERE s.shipped_date > '2023-01-01' AND p.promotional_discounted_price > 0.20 AND s.shipping_status = 'Delivered' GROUP BY p.product_category_primary;",
        "GeneratedQuery": "SELECT p.category, COUNT(p.id) AS product_count\nFROM products p\nJOIN (\n    SELECT o.product_id\n    FROM orders o\n    JOIN order_details od ON o.id = od.order_id\n    JOIN promotions prom ON od.promotion_id = prom.id\n    WHERE o.shipping_status = 'delivered'\n    AND o.date > '202",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "Find the average refund amount for all orders that have been fully refunded and have a status of 'approved' in the refunds_returns table.",
        "Query": "SELECT AVG(rr.refund_amount) FROM refunds_returns rr JOIN orders o ON rr.fk_order_id = o.order_id WHERE rr.status = 'approved' AND rr.refund_amount > 0",
        "GeneratedQuery": "SELECT AVG(refund_amount)\nFROM orders o\nJOIN refunds_returns r ON o.id = r.order\\_id\nWHERE r.status = 'approved' AND o.amount = r.refund\\_amount;",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "What are the order ids of the orders where the tax amount is more than 100 and the item status is delivered in the order items",
        "Query": "SELECT T1.order_id FROM order_items AS T1 INNER JOIN orders AS T2 ON T1.order_id = T2.order_id WHERE T2.tax_amount > 100 AND T1.item_status = 'delivered'",
        "GeneratedQuery": "SELECT orders.id\nFROM orders\nJOIN (\n    SELECT order\\_id\n    FROM order\\_items\n    WHERE tax\\_amount > 100 AND status = 'delivered'\n) AS subquery\nON orders.id = subquery.order\\_id;",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "What is the total discount amount redeemed by customers who have a lifetime loyalty points earned greater than 1000 and have an anniversary reward voucher status of True?",
        "Query": "SELECT SUM(total_discount_amount_redeemed) FROM customers_loyalty_program WHERE lifetime_loyalty_points_earned > 1000 AND anniversary_reward_voucher_status = TRUE",
        "GeneratedQuery": "SELECT SUM(amount) as total\\_discount\nFROM orders\nWHERE user\\_id IN (\n    SELECT id\n    FROM users\n    WHERE lifetime\\_loyalty\\_points > 1000\n) AND anniv\\_reward\\_voucher = True;",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "What is the name and phone number of each customer who has placed an order with a total amount greater than 100, along with the order date and total amount?",
        "Query": "SELECT T1.person_first_name, T1.person_last_name, T1.person_phone_number, T2.order_date, T2.total_amount FROM customerinfo AS T1 INNER JOIN orders AS T2 ON T1.person_customer_id = T2.person_customer_id WHERE T2.total_amount > 100",
        "GeneratedQuery": "SELECT u.name, u.email, o.date, SUM(o.amount) as total\\_amount\nFROM users u\nJOIN orders o ON u.id = o.user\\_id\nGROUP BY u.id, o.date\nHAVING SUM(o.amount) > 100;",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "Get the list of customer names, loyalty program tier levels, and total amount spent by customers who have participated in exclusive beta testing and have made orders with a total amount greater than 100",
        "Query": "SELECT ci.person_first_name, ci.person_last_name, clp.loyalty_program_tier_level, SUM(o.total_amount) FROM customers_loyalty_program clp JOIN customerinfo ci ON clp.associated_customer_reference_id = ci.person_customer_id JOIN orders o ON ci.person_customer_id = o.person_customer_id WHERE clp.participation_in_exclusive_beta_testing = TRUE AND o.total_amount > 100 GROUP BY ci.person_first_name, ci.person_last_name, clp.loyalty_program_tier_level",
        "GeneratedQuery": "SELECT u.name, 'exclusive' AS tier\\_level, SUM(o.amount) as total\\_amount\nFROM users u\nJOIN orders o ON u.id = o.user\\_id\nJOIN (\n    SELECT DISTINCT user\\_id\n    FROM orders\n    WHERE id IN (SELECT order\\_id FROM exclusive\\_beta\\_testing)\n) beta\\_users ON u.id = beta\\_users.user\\_id\nGROUP BY",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "List the product identifiers and review submission dates of reviews with more than 10 helpful votes.",
        "Query": "SELECT T1.referenced_product_identifier, T1.customer_review_submission_date FROM product_reviews_and_ratings AS T1 WHERE T1.number_of_helpful_votes_received > 10",
        "GeneratedQuery": "SELECT products.id, orders.date\nFROM orders\nJOIN users ON orders.user\\_id = users.id\nJOIN (\n    SELECT order\\_id\n    FROM reviews\n    GROUP BY order\\_id\n    HAVING COUNT(helpful_vote) > 10\n) helper\\_reviews ON orders.id = helper\\_reviews.order\\_id\nJOIN products ON orders.product\\_id = products.id;",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "What are the total impressions and clicks for each campaign name where the campaign has a start date after '2020-01-01' and there is at least one order item with a matching product id in the inventory table?",
        "Query": "SELECT c.campaign_name, SUM(c.impressions), SUM(c.clicks) FROM campaigns c JOIN inventory i ON c.campaign_id = i.referenced_product_id WHERE c.start_date > '2020-01-01' GROUP BY c.campaign_name",
        "GeneratedQuery": "SELECT c.name, SUM(i.impressions) as total\\_impressions, SUM(i.clicks) as total\\_clicks\nFROM campaigns c\nJOIN inventory i ON c.product\\_id = i.product\\_id\nJOIN orders o ON i.order\\_id = o.id\nWHERE c.start\\_date > '2020-01-01'\nGROUP BY c.name;",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "Get the first name and last name of customers who have at least one item in their wishlist",
        "Query": "SELECT DISTINCT T1.person_first_name, T1.person_last_name FROM customerinfo AS T1 INNER JOIN wishlist AS T2 ON T1.person_customer_id = T2.fk_user_id",
        "GeneratedQuery": "SELECT DISTINCT u.name \nFROM users u\nJOIN orders o ON u.id = o.user\\_id\nWHERE o.id IN (\n    SELECT order\\_id \n    FROM wishlist\n);",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "What is the average amount spent per order by customers who have more than 100 loyalty points?",
        "Query": "SELECT AVG(preferences_avg_spent_per_order) FROM customerinfo WHERE person_loyalty_points > 100",
        "GeneratedQuery": "SELECT AVG(amount)\nFROM orders\nWHERE user\\_id IN (\n    SELECT id\n    FROM users\n    WHERE age > 100\n);",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "List all reviews where the review's star rating is above 4 and the review is flagged as inappropriate, showing the review text, product identifier, and customer identifier.",
        "Query": "SELECT textual_review_feedback, referenced_product_identifier, reviewing_customer_identifier FROM product_reviews_and_ratings WHERE submitted_review_star_rating > 4 AND flagged_as_inappropriate = true;",
        "GeneratedQuery": "I'm sorry for the confusion, but there seems to be a mistake in the query provided as there is no \"reviews\" table mentioned in the schema. Assuming that the \"orders\" table contains the necessary information for the query, here is the SQL statement:\n\n```sql\nSELECT orders.text AS review_text, products.id AS product_identifier, users.id AS customer_identifier\nFROM orders\nJOIN users ON orders.user_id = users",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "Select all shipping information for orders shipped in the last 30 days.",
        "Query": "SELECT * FROM shipping WHERE shipped_date >= (CURRENT_DATE - INTERVAL '30 days');",
        "GeneratedQuery": "SELECT orders.id, users.name, users.email, orders.date\nFROM orders\nJOIN users ON orders.user\\_id = users.id\nWHERE orders.date >= NOW() - INTERVAL 30 DAY;",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "Find all transactions made by customers who have purchased a product that is currently in stock and has a low inventory turnover rate, and also show the corresponding shipping details for those transactions, including the estimated delivery date and shipping cost.",
        "Query": "SELECT t.transaction_unique_identifier, t.corresponding_customer_reference_identifier, t.transaction_date_and_time, s.estimated_delivery, s.shipping_cost FROM transactions_and_payments t JOIN shipping s ON t.linked_order_reference_identifier = s.fk_order_id JOIN inventory i ON t.linked_order_reference_identifier = i.referenced_product_id WHERE i.inventory_turnover_rate < 0.5 AND i.stock_status = 'In Stock'",
        "GeneratedQuery": "SELECT orders.id, orders.user\\_id, orders.amount, orders.date, products.name, products.price, orders.shipping\\_cost, orders.delivery\\_date\nFROM orders\nJOIN users ON orders.user\\_id = users.id\nJOIN products ON orders.product\\_id = products.id\nWHERE products.stock > 0 AND products.inventory\\_turnover\\_rate < (SELECT AVG(inventory\\_turn",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "Which events have been triggered by customers who have placed an order with a total amount greater than $100 and what is the average time spent by these customers during the events?",
        "Query": "SELECT T3.event_type, AVG(T3.time_spent_seconds) FROM orders AS T1 INNER JOIN customerinfo AS T2 ON T1.person_customer_id = T2.person_customer_id INNER JOIN events AS T3 ON T2.person_customer_id = T3.person_customer_id WHERE T1.total_amount > 100 GROUP BY T3.event_type",
        "GeneratedQuery": "SELECT AVG(duration), event\\_name\nFROM events\nJOIN users ON events.user\\_id = users.id\nJOIN orders ON users.id = orders.user\\_id\nWHERE orders.amount > 100\nGROUP BY event\\_name;",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "Find the average conversion rate and ROI of all campaigns that had a positive review sentiment score (greater than 0.5) for at least one of their associated products. Also, include the campaign name and status in the results.",
        "Query": "SELECT c.campaign_name, c.campaign_status, AVG(c.conversions * 1.0 / c.clicks) AS avg_conversion_rate, AVG(c.roi) AS avg_roi FROM campaigns c JOIN product_reviews_and_ratings prr ON c.campaign_id = prr.referenced_product_identifier WHERE prr.sentiment_analysis_score > 0.5 GROUP BY c.campaign_name, c.campaign_status;",
        "GeneratedQuery": "SELECT o.campaign\\_name, o.campaign\\_status, AVG(o.amount / p.price) AS conversion\\_rate, AVG(o.amount - p.price) AS ROI\nFROM orders o\nJOIN products p ON o.product\\_id = p.id\nJOIN campaigns c ON o.campaign\\_id = c.id\nWHERE c.review\\_sentiment\\_score > 0.5\nGROUP BY o",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "Find the total revenue generated by transactions for premium customers between January 1, 2023, and December 31, 2023.",
        "Query": "SELECT SUM(tp.final_billed_amount) FROM customerinfo ci JOIN transactions_and_payments tp ON ci.person_customer_id = tp.corresponding_customer_reference_identifier WHERE ci.person_is_premium = TRUE AND tp.transaction_date_and_time BETWEEN '2023-01-01' AND '2023-12-31';",
        "GeneratedQuery": "SELECT SUM(amount) AS total\\_revenue\nFROM orders\nJOIN users ON orders.user\\_id = users.id\nWHERE users.age >= 60 AND users.age <= 65 AND date BETWEEN '2023-01-01' AND '2023-12-31';",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "What is the total revenue generated across all campaigns?",
        "Query": "SELECT SUM(revenue_generated) FROM campaigns;",
        "GeneratedQuery": "SELECT SUM(amount) FROM orders;",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "Find all the orders whose shipment status is not shipped and their respective customers' total wishlist value exceeds 1000, for each customer display their name, order id, order date, and total wishlist value.",
        "Query": "SELECT DISTINCT T2.order_id, T2.order_date, T1.fk_user_id, SUM(T1.price_at_addition) FROM wishlist AS T1 INNER JOIN orders AS T2 ON T1.fk_user_id = T2.person_customer_id INNER JOIN shipping AS T3 ON T2.order_id = T3.fk_order_id WHERE T3.shipping_status != 'shipped' GROUP BY T2.order_id, T1.fk_user_id HAVING SUM(T1.price_at_addition) > 1000;",
        "GeneratedQuery": "```\nSELECT u.name, o.id, o.date, SUM(p.price) AS total_wishlist_value\nFROM users u\nJOIN orders o ON u.id = o.user_id\nJOIN (\n    SELECT user_id, product_id\n    FROM orders\n    WHERE shipment_status != 'shipped'\n) unshipped_orders ON o.user_id = unshipped_orders.user",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "Get the total number of orders and total spent for customers who have a newsletter subscription",
        "Query": "SELECT SUM(preferences_total_orders), SUM(preferences_avg_spent_per_order) FROM customerinfo WHERE preferences_newsletter_subscription = TRUE",
        "GeneratedQuery": "SELECT COUNT(DISTINCT o.user\\_id) AS total\\_orders, SUM(o.amount) AS total\\_spent\nFROM orders o\nJOIN users u ON o.user\\_id = u.id\nWHERE u.email IN (SELECT email FROM newsletter\\_subscriptions);",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "Get the total number of orders for customers who have more than 100 loyalty points.",
        "Query": "SELECT COUNT(person_customer_id) FROM customerinfo WHERE person_loyalty_points > 100",
        "GeneratedQuery": "SELECT COUNT(*)\nFROM orders\nWHERE user\\_id IN (\n    SELECT id\n    FROM users\n    WHERE age > 100\n);",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "Find the total accumulated loyalty points for customers who have participated in exclusive beta testing and have ordered products with a promotional discount greater than 10%.",
        "Query": "SELECT clp.associated_customer_reference_id, SUM(clp.accumulated_loyalty_points_balance) AS total_loyalty_points \nFROM customers_loyalty_program clp\nJOIN cart c ON clp.associated_customer_reference_id = c.fk_user_id\nJOIN products p ON c.fk_product_id = p.unique_product_identifier\nWHERE clp.participation_in_exclusive_beta_testing = TRUE AND p.percentage_discount_applied > 10\nGROUP BY clp.associated_customer_reference_id;",
        "GeneratedQuery": "SELECT SUM(amount) as total_loyalty_points\nFROM orders\nWHERE user\\_id IN (\n    SELECT id\n    FROM users\n    WHERE email IN (\n        SELECT email\n        FROM beta\\_testers\n    )\n) AND amount > (\n    SELECT price * 0.1\n    FROM products\n    WHERE id IN (\n        SELECT product\\_id\n        FROM orders\n        WHERE user\\_id =",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "What are the names of all the products that have a standard retail price greater than $100?",
        "Query": "SELECT product_display_name FROM products WHERE standard_retail_price_including_tax > 100;",
        "GeneratedQuery": "SELECT products.name \nFROM products \nWHERE products.price > 100;",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "Find the total number of wishlist items for all customers who have  purchased a product with the category 'Fashion', along with the number of order items for each customer.",
        "Query": "SELECT SUM(T1.preferences_wishlist_items), COUNT(T3.order_id) FROM customerinfo T1 INNER JOIN order_items T2 ON T1.person_customer_id = T2.order_id INNER JOIN events T3 ON T3.person_customer_id = T1.person_customer_id WHERE T2.product_name = 'Fashion'",
        "GeneratedQuery": "SELECT u.id, COUNT(w.id) AS wishlist\\_items, COUNT(o.id) AS order\\_items\nFROM users u\nLEFT JOIN orders o ON u.id = o.user\\_id\nLEFT JOIN orders o\\_products ON o.id = o\\_products.order\\_id\nLEFT JOIN products p ON o\\_products.product\\_id = p.id\nLEFT JOIN wishlists w ON u.id = w",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "Find all products that have a higher standard retail price and are also perishable, along with their corresponding inventory quantities and last restock dates.",
        "Query": "SELECT p.standard_retail_price_including_tax, p.perishable_product_flag, i.quantity, i.last_restock_date FROM products p JOIN inventory i ON p.unique_product_identifier = i.referenced_product_id WHERE p.perishable_product_flag = TRUE AND p.standard_retail_price_including_tax > (SELECT AVG(standard_retail_price_including_tax) FROM products)",
        "GeneratedQuery": "SELECT p.id, p.name, p.price, p.stock, MAX(o.date) as last\\_restock\\_date\nFROM products p\nJOIN orders o ON p.id = o.product\\_id\nWHERE p.price > (SELECT AVG(p2.price) FROM products p2) AND p.name LIKE '%perishable%'\nGROUP BY p.id, p.name, p.price, p.",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "Find the average star rating of reviews for each customer who has submitted more than 5 reviews.",
        "Query": "SELECT c.person_customer_id, c.person_first_name, c.person_last_name, AVG(pr.submitted_review_star_rating) AS average_star_rating FROM product_reviews_and_ratings pr JOIN customerinfo c ON pr.reviewing_customer_identifier = c.person_customer_id GROUP BY c.person_customer_id HAVING COUNT(pr.review_unique_identifier) > 5;",
        "GeneratedQuery": "I'm sorry for the confusion, but the schema you provided does not include a \"reviews\" table, which is necessary to calculate the star rating. Assuming we have a \"reviews\" table with \"user_id\" and \"star_rating\" columns, here is the SQL query:\n\n```sql\nSELECT u.name, AVG(r.star_rating) as avg_rating\nFROM users u\nJOIN orders o ON u.id",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "Find all reviews with a rating of 5 and a verification status of true, along with the corresponding product identifier and review submission date.",
        "Query": "SELECT referenced_product_identifier, customer_review_submission_date FROM product_reviews_and_ratings WHERE submitted_review_star_rating = 5 AND verification_status_of_reviewer = TRUE",
        "GeneratedQuery": "I'm sorry for the confusion, but there seems to be a mistake in the query because there is no \"reviews\" table mentioned in the schema. However, I will assume that you meant to query the \"orders\" table instead, since it is the only table that has a rating field (which I'm assuming is the same as the amount field in the orders table).\n\nHere's the SQL query to find all orders with a rating of 5 and a verification status of",
        "ExecutionStatus": "Error",
        "ErrorMessage": "Invalid SQL syntax"
    },
    {
        "NL": "Find the total amount of all orders where the order status is 'delivered' and the customer has clicked on a push notification.",
        "Query": "SELECT SUM(o.total_amount) FROM orders o JOIN events e ON o.order_id = e.order_id WHERE o.order_status = 'delivered' AND e.push_notification_clicked = TRUE",
        "GeneratedQuery": "SELECT SUM(amount)\nFROM orders\nWHERE status = 'delivered' AND user\\_id IN (\n    SELECT user\\_id\n    FROM users\n    WHERE clicked\\_notification = true\n);",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "What is the email address and preferred payment method of each customer who has placed an order with a payment status of 'paid'?",
        "Query": "SELECT T1.person_email, T1.account_preferred_payment_method FROM customerinfo AS T1 INNER JOIN orders AS T2 ON T1.person_customer_id = T2.person_customer_id WHERE T2.payment_status = 'paid'",
        "GeneratedQuery": "SELECT users.email\nFROM users\nJOIN orders ON users.id = orders.user\\_id\nWHERE orders.payment\\_status = 'paid';",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "Retrieve the list of products that have been added to a user's wishlist more than 5 times and have a low stock status, including the product's name, the supplier's business name, and the last updated stock date.",
        "Query": "SELECT p.product_display_name, s.official_supplier_business_name, i.last_updated FROM products p JOIN inventory i ON p.unique_product_identifier = i.referenced_product_id JOIN suppliers s ON i.supplier_id = s.supplier_unique_identifier JOIN wishlist w ON p.unique_product_identifier = w.fk_product_id WHERE i.stock_status = 'Low' GROUP BY p.product_display_name, s.official_supplier_business_name, i.last_updated HAVING COUNT(w.fk_product_id) > 5;",
        "GeneratedQuery": "SELECT products.name, suppliers.business\\_name, products.last\\_updated\nFROM products\nJOIN (\n    SELECT user\\_id, product\\_id, COUNT(*) as wishlist\\_count\n    FROM wishlists\n    GROUP BY user\\_id, product\\_id\n    HAVING wishlist\\_count > 5\n) AS wishlist\\_counts\nON products.id = wishlist\\_counts.product\\_id\nJOIN",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "What is the product name and the actual_spent of the campaigns for products with total_reach greater than 100?",
        "Query": "SELECT T2.product_display_name, T1.actual_spent FROM campaigns AS T1 INNER JOIN products AS T2 ON T1.target_audience = T2.product_category_primary WHERE T1.total_reach > 100;",
        "GeneratedQuery": "SELECT products.name, SUM(orders.amount) AS actual\\_spent\nFROM products\nJOIN orders ON products.id = orders.product\\_id\nJOIN (\nSELECT user\\_id, SUM(amount) AS total\\_reach\nFROM orders\nGROUP BY user\\_id\n) AS campaign\\_reach ON orders.user\\_id = campaign\\_reach.user\\_id\nWHERE campaign\\_reach.total\\_reach > 100\nGROUP BY",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "List all suppliers who have supplied more than 500 products and have an average supplier rating greater than 4.5.",
        "Query": "SELECT official_supplier_business_name, total_number_of_products_supplied, average_supplier_rating FROM suppliers WHERE total_number_of_products_supplied > 500 AND average_supplier_rating > 4.5;",
        "GeneratedQuery": "I'm sorry for the confusion, but the provided schema doesn't include a supplier table or any rating column. I need more information to generate a valid SQL statement for your query. However, I can give you a template for how it might look if the schema contained the necessary information:\n\n```sql\nSELECT supplier_id\nFROM suppliers\nWHERE SUM(quantity) > 500 AND AVG(rating) > 4.5;\n```",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "What are the business names of suppliers from the USA?",
        "Query": "SELECT official_supplier_business_name FROM suppliers WHERE supplier_country_of_operation = 'USA'",
        "GeneratedQuery": "I'm assuming there's a mistake in the schema provided, as it doesn't include a table for suppliers or their countries. However, I'll convert the query into a valid SQL statement based on a assumption that there's an 'suppliers' table with 'name' and 'country' columns.\n\nSQL:\n```\nSELECT name\nFROM suppliers\nWHERE country = 'USA';\n```",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "Find all customers who are eligible for special promotions and have accumulated more than 1000 loyalty points, along with their first and last names and email addresses.",
        "Query": "SELECT clp.eligible_for_special_promotions, ci.person_first_name, ci.person_last_name, ci.person_email FROM customers_loyalty_program clp JOIN customerinfo ci ON clp.associated_customer_reference_id = ci.person_customer_id WHERE clp.eligible_for_special_promotions = true AND clp.accumulated_loyalty_points_balance > 1000;",
        "GeneratedQuery": "SELECT u.name AS first\\_name, u.name AS last\\_name, u.email\nFROM users u\nJOIN (\nSELECT user\\_id\nFROM orders\nGROUP BY user\\_id\nHAVING SUM(amount) > 1000\n) subquery\nON u.id = subquery.user\\_id;",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "Find the average quantity and total price of products in the cart for each product where the cart status is 'Active', and the recommended products are not null, and the wishlist flag is true, and the product id is in the wishlist. Group the result by product id and calculate the standard deviation of the total price for each group.",
        "Query": "SELECT T2.fk_product_id, AVG(T1.quantity) AS average_quantity, AVG(T1.total_price) AS average_total_price, stddev(T1.total_price) AS std_dev_total_price FROM cart AS T1 INNER JOIN wishlist AS T2 ON T1.fk_product_id = T2.fk_product_id WHERE T1.cart_status = 'Active' AND T1.recommended_products IS NOT NULL AND T1.wishlist_flag = true AND T2.fk_product_id = T1.fk_product_id GROUP BY T2.fk_product_id",
        "GeneratedQuery": "SELECT \n    p.id, \n    AVG(o.amount) AS average\\_quantity, \n    SUM(o.amount * p.price) AS total\\_price, \n    STDDEV(SUM(o.amount * p.price)) AS stddev\\_total\\_price\nFROM \n    orders o\nJOIN \n    users u ON o.user\\_id = u.id\nJOIN \n    products",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "Find the average time spent by customers on the website who have made a purchase and have also completed a survey.",
        "Query": "SELECT AVG(e.time_spent_seconds) FROM events e JOIN cart c ON e.person_customer_id = c.fk_user_id WHERE e.event_type = 'purchase' AND e.survey_completed = TRUE",
        "GeneratedQuery": "SELECT AVG(DATEDIFF('date', MIN(orders.date)))\nFROM users\nJOIN orders ON users.id = orders.user\\_id\nWHERE users.id IN (\n    SELECT user\\_id\n    FROM surveys\n)",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "Find the average review rating and the sum of cart value for each event type.",
        "Query": "SELECT event_type, AVG(review_rating) AS avg_review_rating, SUM(cart_value) AS sum_cart_value FROM events GROUP BY event_type",
        "GeneratedQuery": "Unfortunately, I cannot complete the conversion as the schema provided does not include any table for review rating or event type. Therefore, it is not possible to calculate the average review rating and the sum of cart value for each event type based on this schema.",
        "ExecutionStatus": "Error",
        "ErrorMessage": "Invalid SQL syntax"
    },
    {
        "NL": "Give me the total amount of sales made in the last month from the 'orders' table.",
        "Query": "SELECT SUM(total_amount) AS total_sales FROM orders WHERE order_date >= (CURRENT_DATE - INTERVAL '1 month');",
        "GeneratedQuery": "SELECT SUM(amount) \nFROM orders \nWHERE date >= DATE_SUB(CURRENT_DATE, INTERVAL 1 MONTH);",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "Get the total quantity of products in the inventory for each order and the order status",
        "Query": "SELECT SUM(T2.quantity), T1.order_status FROM orders AS T1 INNER JOIN wishlist AS T3 ON T1.person_customer_id = T3.fk_user_id INNER JOIN inventory AS T2 ON T3.fk_product_id = T2.referenced_product_id GROUP BY T1.order_status",
        "GeneratedQuery": "SELECT o.id AS order\\_id, SUM(p.stock) AS total\\_quantity, \n       (CASE WHEN SUM(p.stock) = 0 THEN 'out\\_of\\_stock' ELSE 'in\\_stock' END) AS order\\_status\nFROM orders o\nJOIN products p ON true\nGROUP BY o.id;",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "What is the total loyalty points balance and the total discount amount redeemed for customers with a loyalty membership?",
        "Query": "SELECT SUM(accumulated_loyalty_points_balance) , SUM(total_discount_amount_redeemed) FROM customers_loyalty_program",
        "GeneratedQuery": "SELECT SUM(loyalty\\_points) AS total\\_loyalty\\_points, SUM(discount\\_amount) AS total\\_discount\\_redeemed\nFROM (\nSELECT users.id, SUM(products.price * orders.amount) AS loyalty\\_points, SUM(orders.amount) AS discount\\_amount\nFROM users\nJOIN orders ON users.id = orders.user\\_id\nJOIN products ON orders.id = products.",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "Find all events for orders where the order status is 'cancelled' and the payment status is 'pending' and the total amount is less than 50, along with the event type, the device platform, and the location city, and also find the campaign name for each order.",
        "Query": "SELECT e.event_type, e.device_platform, e.location_city, c.campaign_name FROM events e JOIN orders o ON e.order_id = o.order_id JOIN campaigns c ON o.campaign_id = c.campaign_id WHERE o.order_status = 'cancelled' AND o.payment_status = 'pending' AND o.total_amount < 50",
        "GeneratedQuery": "SELECT o.id, o.date, e.event\\_type, e.device\\_platform, e.location\\_city, c.name\nFROM orders o\nJOIN events e ON o.id = e.order\\_id\nJOIN campaigns c ON o.campaign\\_id = c.id\nWHERE o.status = 'cancelled' AND o.payment\\_status = 'pending' AND o.amount < 50;",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "Find the product name, standard retail price, and expected lead time for products in the 'Electronics' category with a product status of active, an estimated production cost per unit less than 50, and a net weight greater than 1 kilogram.",
        "Query": "SELECT p.product_display_name, p.standard_retail_price_including_tax, p.expected_lead_time_in_business_days FROM products p WHERE p.product_category_primary = 'Electronics' AND p.active_product_status = true AND p.estimated_production_cost_per_unit < 50 AND p.net_weight_in_kilograms > 1",
        "GeneratedQuery": "SELECT products.name, products.price, products.lead\\_time\nFROM products\nJOIN categories ON products.category\\_id = categories.id\nWHERE categories.name = 'Electronics' AND products.status = 'active' AND products.production\\_cost < 50 AND products.net\\_weight > 1000;",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "List the products with a featured product flag set to true, along with their associated supplier reference id, sorted by their standard retail price in descending order.",
        "Query": "SELECT unique_product_identifier, associated_supplier_reference_id, standard_retail_price_including_tax FROM products WHERE featured_product_flag = TRUE ORDER BY standard_retail_price_including_tax DESC;",
        "GeneratedQuery": "SELECT products.id, products.name, products.price, products.stock, suppliers.id AS supplier\\_reference\\_id\nFROM products\nJOIN suppliers ON products.id = suppliers.product\\_id\nWHERE products.featured = true\nORDER BY products.price DESC;",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "Retrieve the names and descriptions of products that are currently in the cart of users who have participated in the exclusive beta testing of the loyalty program and have a loyalty membership unique identifier greater than 1000.",
        "Query": "SELECT p.product_display_name, p.detailed_product_description FROM products p JOIN cart c ON p.unique_product_identifier = c.fk_product_id JOIN customers_loyalty_program clp ON c.fk_user_id = clp.associated_customer_reference_id WHERE clp.participation_in_exclusive_beta_testing = TRUE AND clp.loyalty_membership_unique_identifier > 1000;",
        "GeneratedQuery": "SELECT products.name, products.description\nFROM products\nJOIN orders ON products.id = orders.product\\_id\nJOIN users ON orders.user\\_id = users.id\nWHERE users.loyalty\\_membership\\_id > 1000 AND users.exclusive\\_beta\\_tester = TRUE;",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "Show the total number of reviews submitted by customers who have flagged their reviews as inappropriate.",
        "Query": "SELECT COUNT(*) FROM product_reviews_and_ratings WHERE flagged_as_inappropriate = true;",
        "GeneratedQuery": "SELECT COUNT(\\*) \nFROM reviews \nWHERE is\\_inappropriate = 1;",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "List the average star rating of reviews that were submitted by customers who have previously purchased the product more than 3 times.",
        "Query": "SELECT AVG(submitted_review_star_rating) FROM product_reviews_and_ratings WHERE previous_product_purchases_count > 3;",
        "GeneratedQuery": "SELECT AVG(reviews.star\\_rating)\nFROM reviews\nJOIN (\nSELECT user\\_id\nFROM orders\nGROUP BY user\\_id\nHAVING COUNT(*) > 3\n) AS user\\_orders\nON reviews.user\\_id = user\\_orders.user\\_id;\n\nNote: There is no \"star rating\" field provided in the schema, so I assumed that there is a separate \"reviews\" table with the relevant columns.",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "Find the average cost per acquisition for all campaigns that have a budget greater than 5000.",
        "Query": "SELECT AVG(cost_per_acquisition) FROM campaigns WHERE budget > 5000;",
        "GeneratedQuery": "SELECT AVG(o.amount / p.stock) AS avg\\_cost\\_per\\_acquisition\nFROM orders o\nJOIN products p ON o.product\\_id = p.id\nJOIN (\nSELECT user\\_id, SUM(amount) AS budget\nFROM orders\nGROUP BY user\\_id\n) u ON o.user\\_id = u.user\\_id\nWHERE u.budget > 5000;",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "Get the average time spent by customers in seconds on the website who are premium members.",
        "Query": "SELECT AVG(time_spent_seconds) AS average_time_spent FROM events WHERE person_customer_id IN (SELECT person_customer_id FROM customerinfo WHERE person_is_premium = true)",
        "GeneratedQuery": "SELECT AVG(DATEDIFF('second', orders.date, NOW())) AS average\\_time\\_spent\nFROM orders\nJOIN users ON orders.user\\_id = users.id\nWHERE users.age >= 18 AND users.email LIKE '%premium%';",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "Find the average lifetime loyalty points earned by customers who have exceeded their annual loyalty spending threshold and have a loyalty program tier level of 'gold'",
        "Query": "SELECT AVG(lifetime_loyalty_points_earned) FROM customers_loyalty_program WHERE annual_loyalty_spending_threshold < lifetime_loyalty_points_earned AND loyalty_program_tier_level = 'gold'",
        "GeneratedQuery": "WITH gold\\_users AS (\nSELECT user\\_id\nFROM users\nJOIN orders ON users.id = orders.user\\_id\nWHERE tier\\_level = 'gold'\n),\nannual\\_spenders AS (\nSELECT user\\_id\nFROM orders\nGROUP BY user\\_id\nHAVING SUM(amount) > (\nSELECT AVG(amount)\nFROM orders\n)\n)\nSELECT AVG(amount) AS avg\\_lifetime\\_",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "List the email addresses and names of customers who are subscribed to the newsletter and have a balance greater than $1000 in their accounts.",
        "Query": "SELECT person_email, person_first_name, person_last_name FROM customerinfo WHERE preferences_newsletter_subscription = True AND account_account_balance > 1000",
        "GeneratedQuery": "SELECT users.email, users.name\nFROM users\nJOIN orders ON users.id = orders.user\\_id\nWHERE users.id IN (SELECT user\\_id FROM newsletter\\_subscriptions)\nAND orders.amount > 1000;",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "Retrieve the order IDs and total amounts of orders placed by customers who have made previous purchases of at least 5 products.",
        "Query": "SELECT orders.order_id, orders.total_amount FROM orders INNER JOIN product_reviews_and_ratings ON orders.person_customer_id = product_reviews_and_ratings.reviewing_customer_identifier WHERE product_reviews_and_ratings.previous_product_purchases_count >= 5;",
        "GeneratedQuery": "SELECT orders.id, SUM(orders.amount) as total\\_amount\nFROM orders\nJOIN (\n    SELECT user\\_id\n    FROM orders\n    GROUP BY user\\_id\n    HAVING COUNT(DISTINCT product\\_id) >= 5\n) as previous\\_purchases\nON orders.user\\_id = previous\\_purchases.user\\_id\nGROUP BY orders.id;",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "Retrieve the official business name of suppliers who have supplied products with an inventory turnover rate greater than 1, along with the expected restock date and the last inventory audit date for those products.",
        "Query": "SELECT s.official_supplier_business_name, i.expected_restock_date, i.last_inventory_audit_date FROM suppliers s JOIN inventory i ON s.supplier_unique_identifier = i.supplier_id WHERE i.inventory_turnover_rate > 1;",
        "GeneratedQuery": "SELECT p.name AS product\\_name, u.name AS supplier\\_name, o.date AS expected\\_restock\\_date, a.date AS last\\_inventory\\_audit\\_date\nFROM products p\nJOIN users u ON p.user\\_id = u.id\nJOIN orders o ON p.id = o.product\\_id\nJOIN (\n    SELECT product\\_id, MAX(date) AS date\n    FROM orders",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "List the loyalty points balance of all customers who have products in the wishlist with a price greater than $100.",
        "Query": "SELECT T1.accumulated_loyalty_points_balance FROM customers_loyalty_program AS T1 JOIN wishlist AS T2 ON T1.associated_customer_reference_id = T2.fk_user_id WHERE T2.price_at_addition > 100",
        "GeneratedQuery": "SELECT u.id, SUM(o.amount) as loyalty\\_points\nFROM users u\nJOIN orders o ON u.id = o.user\\_id\nWHERE u.id IN (\nSELECT user\\_id\nFROM orders\nWHERE id IN (\nSELECT order\\_id\nFROM wishlists\nWHERE product\\_id IN (\nSELECT id\nFROM products\nWHERE price > 100\n)\n)\n)\nGROUP BY u",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "Find the total price of each order in the cart, along with the campaign name, start date, and end date of the corresponding campaign, using the estimated delivery date to join the two tables.",
        "Query": "SELECT T1.total_price, T2.campaign_name, T2.start_date, T2.end_date FROM cart T1 INNER JOIN campaigns T2 ON T1.estimated_delivery_date BETWEEN T2.start_date AND T2.end_date",
        "GeneratedQuery": "SELECT o.id AS order\\_id, SUM(p.price \\* o.amount) AS total\\_price, c.name AS campaign\\_name, c.start\\_date, c.end\\_date\nFROM orders o\nJOIN (\nSELECT id, name, start\\_date, end\\_date\nFROM campaigns\nWHERE estimated\\_delivery\\_date BETWEEN start\\_date AND end\\_date\n) c\nON o.id = c.",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "Get the campaign names and review unique identifiers for campaigns that have a higher conversion rate than the average conversion rate of all campaigns and have a corresponding review with a higher sentiment analysis score than the average sentiment analysis score of all reviews.",
        "Query": "SELECT T1.campaign_name, T2.review_unique_identifier FROM campaigns AS T1 INNER JOIN product_reviews_and_ratings AS T2 ON T1.campaign_id = T2.referenced_product_identifier WHERE T1.conversions / T1.impressions > (SELECT AVG(conversions / impressions) FROM campaigns) AND T2.sentiment_analysis_score > (SELECT AVG(sentiment_analysis_score) FROM product_reviews_and_ratings)",
        "GeneratedQuery": "SELECT DISTINCT c.name, c.review\\_id\nFROM campaigns c\nJOIN orders o ON c.id = o.campaign\\_id\nJOIN reviews r ON c.review\\_id = r.id\nWHERE o.conversions / o.impressions > (\n    SELECT AVG(o2.conversions / o2.impressions)\n    FROM orders o2\n) AND r.sentiment\\_score",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "Retrieve the event type, device type, and location city for events where the cart value was greater than 500 and the event occurred in the year 2022",
        "Query": "SELECT event_type, device_type, location_city FROM events WHERE cart_value > 500 AND EXTRACT(YEAR FROM event_timestamp) = 2022;",
        "GeneratedQuery": "SELECT NULL AS event\\_type, NULL AS device\\_type, city\nFROM events\nWHERE cart\\_value > 500 AND EXTRACT(YEAR FROM event\\_date) = 2022;",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "Retrieve the event types and the associated customer IDs for events that occurred on the same day as a transaction made by a customer who used a gift card.",
        "Query": "SELECT e.event_type, e.person_customer_id FROM events e JOIN transactions_and_payments tp ON e.person_customer_id = tp.corresponding_customer_reference_identifier WHERE e.event_timestamp::date = tp.transaction_date_and_time::date AND tp.gift_card_or_store_credit_usage = TRUE;",
        "GeneratedQuery": "SELECT DISTINCT e.event\\_type, e.customer\\_id\nFROM (\nSELECT 'transaction' AS event\\_type, o.user\\_id AS customer\\_id, o.date\nFROM orders o\nJOIN users u ON o.user\\_id = u.id\nWHERE u.email LIKE '%giftcard%'\n) t\nJOIN events e ON t.date = e.date;",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "What are the order details of orders with a total amount greater than 1000 that were shipped from the United States?",
        "Query": "SELECT o.* FROM orders o JOIN shipping s ON o.order_id = s.fk_order_id WHERE o.total_amount > 1000 AND s.shipping_country = 'United States'",
        "GeneratedQuery": "SELECT orders.id, users.name, orders.amount, orders.date\nFROM orders\nJOIN users ON orders.user\\_id = users.id\nWHERE users.email LIKE '%@usa.com' AND orders.amount > 1000;",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "Retrieve the list of customers who have added items to their wishlist at least twice, along with the total amount spent by these customers on transactions that included a gift card or store credit usage, along with the average transaction amount and the device platform used for the last event they triggered, filtering for customers who have enabled email notifications and have a loyalty points balance above 1000.",
        "Query": "SELECT ci.person_customer_id, ci.person_first_name, ci.person_last_name, ci.securityemail_notifications, ci.person_loyalty_points, SUM(tp.final_billed_amount) AS total_spent_with_gifts, AVG(tp.final_billed_amount) AS average_transaction_amount, e.device_platform, e.event_timestamp AS last_event_time FROM customerinfo ci JOIN transactions_and_payments tp ON ci.person_customer_id = tp.corresponding_customer_reference_identifier JOIN events e ON ci.person_customer_id = e.person_customer_id JOIN wishlist w ON ci.person_customer_id = w.fk_user_id WHERE ci.securityemail_notifications = TRUE AND ci.person_loyalty_points > 1000 AND tp.gift_card_or_store_credit_usage = TRUE GROUP BY ci.person_customer_id, ci.person_first_name, ci.person_last_name, ci.securityemail_notifications, ci.person_loyalty_points, e.device_platform, e.event_timestamp HAVING COUNT(w.id) >= 2 ORDER BY total_spent_with_gifts DESC;",
        "GeneratedQuery": "SELECT u.id, u.name, u.email, SUM(o.amount) FILTER (WHERE og.gift_card_or_store_credit = TRUE) AS total\\_spent, AVG(o.amount) AS avg\\_transaction\\_amount, l.device\\_platform\nFROM users u\nJOIN orders o ON u.id = o.user\\_id\nJOIN loyalty\\_points l ON u.id = l",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "What is the total number of transactions made by first-time customers in the year 2022?",
        "Query": "SELECT COUNT(transaction_unique_identifier) FROM transactions_and_payments WHERE EXTRACT(YEAR FROM transaction_date_and_time) = 2022 AND first_time_customer_transaction = true",
        "GeneratedQuery": "SELECT COUNT(*)\nFROM orders\nWHERE user\\_id NOT IN (SELECT id FROM users GROUP BY id)\nAND EXTRACT(YEAR FROM date) = 2022;",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "Find the product id, quantity, and total price for all order items in orders where the product name contains the word 'Laptop', the order status is 'Pending', and the shipping address is located in a city that starts with the letter 'N'. Also, find the total number of products supplied by suppliers who are located in the same city and country of operation as the shipping address. Order the results in descending order of total price.",
        "Query": "WITH order_items_filtered AS ( SELECT order_item_id, product_id, quantity, total_price, order_id FROM order_items WHERE product_name LIKE '%Laptop%' ), orders_filtered AS ( SELECT order_id, shipping_address_city, shipping_address_country FROM orders WHERE order_status = 'Pending' AND shipping_address_city LIKE 'N%' ), suppliers_filtered AS ( SELECT total_number_of_products_supplied, registered_business_address, supplier_country_of_operation FROM suppliers ) SELECT order_items_filtered.product_id, order_items_filtered.quantity, order_items_filtered.total_price, SUM(suppliers_filtered.total_number_of_products_supplied) AS total_products_supplied FROM order_items_filtered INNER JOIN orders_filtered ON orders_filtered.order_id = order_items_filtered.order_id INNER JOIN suppliers_filtered ON suppliers_filtered.registered_business_address LIKE orders_filtered.shipping_address_city AND suppliers_filtered.supplier_country_of_operation = orders_filtered.shipping_address_country GROUP BY order_items_filtered.product_id, order_items_filtered.quantity, order_items_filtered.total_price ORDER BY order_items_filtered.total_price DESC;",
        "GeneratedQuery": "```sql\nSELECT \n    o.product_id, \n    SUM(o.amount) as quantity, \n    SUM(o.amount * p.price) as total_price,\n    s.city, \n    (SELECT COUNT(*) FROM suppliers s2 WHERE s2.city = s.city AND s2.country = s.country) as total_products\nFROM \n    orders o\nJOIN \n    products",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "Find the total number of active subscriptions and the average loyalty points of customers who have an active subscription and a premium account, grouped by city.",
        "Query": "SELECT address_city, COUNT(account_has_active_subscription) AS total_active_subscriptions, AVG(person_loyalty_points) AS avg_loyalty_points FROM customerinfo WHERE account_has_active_subscription = TRUE AND person_is_premium = TRUE GROUP BY address_city;",
        "GeneratedQuery": "SELECT u.city, COUNT(o.id) AS total\\_active\\_subscriptions, AVG(lp) AS avg\\_loyalty\\_points\nFROM users u\nJOIN orders o ON u.id = o.user\\_id\nJOIN (\nSELECT user\\_id, SUM(amount) AS lp\nFROM orders\nWHERE date > CURDATE() - INTERVAL 30 DAY\nGROUP BY user\\_id\n) sub",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "Find the names of all suppliers who have supplied products to campaigns with a budget greater than 1000 and also find the campaign names and their start dates.",
        "Query": "SELECT s.official_supplier_business_name, c.campaign_name, c.start_date FROM suppliers s JOIN cart ca ON s.supplier_unique_identifier = ca.fk_user_id JOIN campaigns c ON ca.fk_product_id = c.campaign_id WHERE c.budget > 1000",
        "GeneratedQuery": "SELECT DISTINCT u.name\nFROM users u\nJOIN orders o ON u.id = o.user\\_id\nJOIN (\n    SELECT op.user\\_id, op.id as order\\_id, SUM(p.price * op.amount) as budget\n    FROM orders op\n    JOIN products p ON op.product\\_id = p.id\n    GROUP BY op.user\\_id, op.id\n)",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "Find the average shipping cost for orders that have been shipped from the city of New York.",
        "Query": "SELECT AVG(shipping_cost) FROM shipping WHERE shipping_city = 'New York' AND shipped_date IS NOT NULL",
        "GeneratedQuery": "SELECT AVG(amount)\nFROM orders\nWHERE id IN (\n    SELECT orders.id\n    FROM orders\n    JOIN users ON orders.user_id = users.id\n    WHERE users.email LIKE '%new%york%'\n);",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "Find all events that occurred on orders which have been shipped to the United States, including the event timestamp and the shipping date.",
        "Query": "SELECT e.event_timestamp, s.shipped_date FROM events e JOIN shipping s ON e.order_id = s.fk_order_id WHERE s.shipping_country = 'United States';",
        "GeneratedQuery": "SELECT orders.date AS event\\_timestamp, orders.id AS order\\_id, orders.date AS shipping\\_date\nFROM orders\nJOIN users ON orders.user\\_id = users.id\nWHERE users.email LIKE '%@us%';",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "Which customers initiated a refund for their order and how much was the refund amount?",
        "Query": "SELECT T1.person_customer_id, T2.refund_amount FROM orders AS T1 INNER JOIN refunds_returns AS T2 ON T1.order_id = T2.fk_order_id WHERE T2.refund_initiated_by = 'customer'",
        "GeneratedQuery": "SELECT users.name, orders.amount \nFROM users \nJOIN orders ON users.id = orders.user\\_id \nWHERE orders.amount < 0;",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "What is the total price of all order items with a warranty period of more than 30 days?",
        "Query": "SELECT SUM(total_price) FROM order_items WHERE warranty_period > 30",
        "GeneratedQuery": "I'm sorry for the confusion, but the schema provided does not include any information about a warranty period for order items. Therefore, it's not possible to generate an SQL statement for the given query based on this schema.",
        "ExecutionStatus": "Error",
        "ErrorMessage": "Invalid SQL syntax"
    },
    {
        "NL": "Find the total number of reviews and the average rating for products that have been discontinued.",
        "Query": "SELECT p.product_display_name, COUNT(prar.review_unique_identifier) AS total_reviews, AVG(prar.submitted_review_star_rating) AS avg_rating FROM product_reviews_and_ratings AS prar JOIN products AS p ON prar.referenced_product_identifier = p.unique_product_identifier WHERE p.official_product_discontinuation_date IS NOT NULL GROUP BY p.product_display_name;",
        "GeneratedQuery": "WITH discontinued_products AS (\n    SELECT id\n    FROM products\n    WHERE stock = 0\n)\n\nSELECT COUNT(reviews.product_id) AS total_reviews, AVG(reviews.rating) AS average_rating\nFROM reviews\nJOIN discontinued_products ON reviews.product_id = discontinued_products.id;",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "Find the total number of products supplied by each supplier and the average supplier rating, along with the inventory details for the products they supply where the quantity is less than the stock threshold.",
        "Query": "SELECT s.supplier_unique_identifier, s.total_number_of_products_supplied, s.average_supplier_rating, i.referenced_product_id, i.quantity, i.stock_threshold FROM suppliers s JOIN inventory i ON s.supplier_unique_identifier = i.supplier_id WHERE i.quantity < i.stock_threshold;",
        "GeneratedQuery": "SELECT suppliers.id, suppliers.name, COUNT(products.id) AS total\\_products, AVG(ratings.rating) AS average\\_rating, products.price, products.stock, products.quantity\nFROM (\n    SELECT users.id, users.name\n    FROM users\n    WHERE users.type = 'supplier'\n) AS suppliers\nJOIN orders ON suppliers.id = orders.user\\_id\nJOIN (\n    SE",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "Find the total number of orders that have a payment status of paid and were created in the year 2022.",
        "Query": "SELECT COUNT(order_id) FROM orders WHERE EXTRACT(YEAR FROM created_at) = 2022 AND payment_status = 'paid'",
        "GeneratedQuery": "SELECT COUNT(*) \nFROM orders \nWHERE amount IS NOT NULL AND EXTRACT(YEAR FROM date) = 2022;",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "What are the product names and quantities of items in orders where the transaction status is 'success'?",
        "Query": "SELECT oi.product_name, oi.quantity FROM order_items oi JOIN transactions_and_payments tp ON oi.order_id = tp.linked_order_reference_identifier WHERE tp.transaction_status = 'success'",
        "GeneratedQuery": "SELECT products.name, SUM(products.stock) AS quantity\nFROM products\nJOIN orders ON products.id = orders.product\\_id\nWHERE orders.status = 'success'\nGROUP BY products.name;",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "Retrieve the total amount spent by customers in the past year, grouped by their preferred language.",
        "Query": "SELECT person_preferred_language, SUM(T.total_transaction_amount) FROM customerinfo AS C INNER JOIN transactions_and_payments AS T ON C.person_customer_id = T.corresponding_customer_reference_identifier WHERE T.transaction_date_and_time > NOW() - INTERVAL '1 year' GROUP BY C.person_preferred_language",
        "GeneratedQuery": "SELECT u.name as preferred\\_language, SUM(o.amount) as total\\_amount\nFROM users u\nJOIN orders o ON u.id = o.user\\_id\nJOIN (\n    SELECT user\\_id, email\n    FROM orders\n    JOIN users\n    ON orders.user\\_id = users.id\n    WHERE YEAR(date) = YEAR(CURRENT\\_DATE()) - 1\n    GROUP BY user\\_",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "Retrieve the product names from order items along with the order date for those orders that have a promotional offer applied and the payment method used is 'Credit Card'.",
        "Query": "SELECT oi.product_name, o.order_date FROM order_items oi JOIN orders o ON oi.order_id = o.order_id JOIN transactions_and_payments t ON o.order_id = t.linked_order_reference_identifier WHERE t.promotional_offer_applied = true AND t.payment_method_used = 'Credit Card';",
        "GeneratedQuery": "SELECT products.name\nFROM orders\nJOIN users ON orders.user\\_id = users.id\nJOIN products ON orders.id = products.id\nWHERE orders.amount > 100 AND users.email LIKE '%promo%' AND users.payment\\_method = 'Credit Card';",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "Get the total number of transactions where the chargeback request status is true.",
        "Query": "SELECT COUNT(*) FROM transactions_and_payments WHERE chargeback_request_status = true;",
        "GeneratedQuery": "SELECT COUNT(\\*) \nFROM orders \nWHERE chargeback_request = true;",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "Find the total revenue generated and campaign name from the campaigns table and the shipping cost from the shipping table where the campaign status is 'active' and the shipping status is 'shipped'.",
        "Query": "SELECT c.revenue_generated, c.campaign_name, s.shipping_cost FROM campaigns c JOIN shipping s ON c.campaign_id = s.fk_order_id WHERE c.campaign_status = 'active' AND s.shipping_status = 'shipped'",
        "GeneratedQuery": "SELECT \n    SUM(o.amount) AS total\\_revenue,\n    c.name AS campaign\\_name,\n    s.cost AS shipping\\_cost\nFROM\n    orders o\nJOIN\n    users u ON u.id = o.user\\_id\nJOIN\n    campaigns c ON c.id = u.id\nJOIN\n    shipping s ON s.order\\_id = o.id\nWHERE\n    c.status",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "Find the total number of units ordered and the estimated production cost for each product listed in the order_items table, joining with the products table to include the cost.",
        "Query": "SELECT SUM(order_items.quantity) AS total_units_ordered, products.estimated_production_cost_per_unit FROM order_items JOIN products ON order_items.product_id = products.unique_product_identifier GROUP BY products.estimated_production_cost_per_unit;",
        "GeneratedQuery": "WITH order\\_items AS (\nSELECT order\\_id, product\\_id, SUM(quantity) as total\\_units\nFROM order\\_items\nGROUP BY order\\_id, product\\_id\n)\n\nSELECT p.id, p.name, SUM(oi.total\\_units) as total\\_units\\_ordered, SUM(p.price * oi.total\\_units) as estimated\\_production\\_cost\nFROM order\\_items oi\nJOIN orders",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "Retrieve the supplier names and their total number of products supplied, ordered by the number of products in descending order.",
        "Query": "SELECT official_supplier_business_name, total_number_of_products_supplied FROM suppliers ORDER BY total_number_of_products_supplied DESC;",
        "GeneratedQuery": "SELECT suppliers.name, COUNT(orders.id) AS total\\_products\\_supplied\nFROM orders\nJOIN products ON orders.product\\_id = products.id\nJOIN users AS suppliers ON products.user\\_id = suppliers.id\nGROUP BY suppliers.name\nORDER BY total\\_products\\_supplied DESC;",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "What is the average accumulated loyalty points balance across all customers who have participated in exclusive beta testing?",
        "Query": "SELECT AVG(accumulated_loyalty_points_balance) FROM customers_loyalty_program WHERE participation_in_exclusive_beta_testing = TRUE",
        "GeneratedQuery": "SELECT AVG(amount)\nFROM orders\nWHERE user\\_id IN (\n    SELECT id\n    FROM users\n    WHERE email LIKE '%beta%'\n);",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "Get the shipping address, shipping city, shipping state, shipping zipcode, and estimated delivery date for each order that has a total discount amount redeemed greater than 100, and has a free shipping eligibility as true, and the order's shipping record has a shipping status as 'shipped', and the order's shipping record has a tracking number that starts with 'ABC', and the order's shipping record has a shipping cost greater than 20",
        "Query": "SELECT T3.shipping_address, T3.shipping_city, T3.shipping_state, T3.shipping_zipcode, T3.estimated_delivery FROM customers_loyalty_program AS T1 INNER JOIN shipping AS T3 ON T1.associated_customer_reference_id = T3.fk_order_id WHERE T1.total_discount_amount_redeemed > 100 AND T1.free_shipping_eligibility IS TRUE AND T3.shipping_status = 'shipped' AND T3.tracking_number LIKE 'ABC%' AND T3.shipping_cost > 20",
        "GeneratedQuery": "SELECT o.shipping\\_address, o.shipping\\_city, o.shipping\\_state, o.shipping\\_zipcode, o.estimated\\_delivery\\_date\nFROM orders o\nJOIN shipping\\_records s ON o.id = s.order\\_id\nWHERE o.total\\_discount\\_amount > 100 AND o.free\\_shipping\\_eligibility = TRUE AND s.shipping\\_status = 'shipped",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "List all refunds along with their processing dates, refund amounts, and reasons, where the refund amount is greater than $100.",
        "Query": "SELECT processed_date, refund_amount, reason FROM refunds_returns WHERE refund_amount > 100;",
        "GeneratedQuery": "SELECT o.amount AS refund_amount, o.date AS processing_date, 'N/A' AS reason\nFROM orders o\nWHERE o.amount < 0 AND o.amount < -100;",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "Select the final billed amount for transactions where the transaction status is 'completed'.",
        "Query": "SELECT final_billed_amount FROM transactions_and_payments WHERE transaction_status = 'completed';",
        "GeneratedQuery": "SELECT SUM(amount)\nFROM orders\nWHERE status = 'completed';",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "Find all customers who have more than 1000 lifetime loyalty points earned and have a loyalty program tier level of 'Gold'.",
        "Query": "SELECT * FROM customers_loyalty_program WHERE lifetime_loyalty_points_earned > 1000 AND loyalty_program_tier_level = 'Gold';",
        "GeneratedQuery": "SELECT u.*\nFROM users u\nJOIN (\n    SELECT user\\_id, SUM(amount) as total\\_amount\n    FROM orders\n    GROUP BY user\\_id\n) o ON u.id = o.user\\_id\nWHERE o.total\\_amount > 1000 AND u.email IN (\n    SELECT email\n    FROM users\n    WHERE tier\\_level = 'Gold'\n);",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "Calculate the total discount applied and the total tax amount for orders placed in the year 2022, with a refund status of true in the transactions_and_payments table.",
        "Query": "SELECT SUM(o.discount_applied) AS total_discount_applied, SUM(o.tax_amount) AS total_tax_amount FROM orders o JOIN transactions_and_payments t ON o.order_id = t.linked_order_reference_identifier WHERE EXTRACT(YEAR FROM o.order_date) = 2022 AND t.refund_status = TRUE;",
        "GeneratedQuery": "SELECT SUM(discount) as total\\_discount, SUM(tax) as total\\_tax\nFROM orders\nJOIN transactions\\_and\\_payments ON orders.id = transactions\\_and\\_payments.order\\_id\nWHERE YEAR(date) = 2022 AND refund = true;",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "What are the average shipping costs for transactions from the 'new customer campaign'?",
        "Query": "SELECT AVG(T2.shipping_cost) FROM transactions_and_payments T1 INNER JOIN shipping T2 ON T1.linked_order_reference_identifier = T2.fk_order_id INNER JOIN campaigns T3 ON T1.linked_order_reference_identifier = T3.campaign_id WHERE T3.campaign_name = 'new customer campaign'",
        "GeneratedQuery": "I'm sorry for the confusion, but there is no \"shipping costs\" field in the provided schema, and there is also no mention of a 'new customer campaign' in the schema. I need more information about the schema or the context to generate a valid SQL query.\n\nHowever, I can give you a sample SQL query for calculating the average amount of transactions per user, which might be a starting point for your actual query.\n\nSQL:\n```vbnet",
        "ExecutionStatus": "Error",
        "ErrorMessage": "Invalid SQL syntax"
    },
    {
        "NL": "Find the names of customers who have an active subscription and are located in New York City, along with the total number of products supplied by their preferred supplier.",
        "Query": "SELECT ci.person_first_name, ci.person_last_name, s.total_number_of_products_supplied FROM customerinfo ci JOIN inventory i ON ci.securitytwo_factor_enabled = true JOIN suppliers s ON i.supplier_id = s.supplier_unique_identifier WHERE ci.account_has_active_subscription = true AND ci.address_city = 'New York City'",
        "GeneratedQuery": "SELECT u.name, COUNT(p.id)\nFROM users u\nJOIN orders o ON u.id = o.user\\_id\nJOIN (\n    SELECT supplier\\_id\n    FROM subscriptions\n    WHERE city = 'New York City' AND status = 'active'\n) s ON o.product\\_id = s.supplier\\_id\nJOIN products p ON s.supplier\\_id = p.id\nGROUP BY u",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "List all customers who have made a transaction using cryptocurrency.",
        "Query": "SELECT DISTINCT c.person_first_name, c.person_last_name FROM customerinfo c JOIN transactions_and_payments t ON c.person_customer_id = t.corresponding_customer_reference_identifier WHERE t.cryptocurrency_payment_flag = true;",
        "GeneratedQuery": "SELECT users.name\nFROM users\nWHERE users.id IN (\n    SELECT orders.user\\_id\n    FROM orders\n    WHERE orders.id IN (\n        SELECT payments.order\\_id\n        FROM payments\n        WHERE payments.method = 'cryptocurrency'\n    )\n);",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "Find the total number of products supplied by each supplier that has a stock threshold above 100 in the inventory.",
        "Query": "SELECT s.official_supplier_business_name, SUM(i.quantity) AS total_products_supplied FROM suppliers s JOIN inventory i ON s.supplier_unique_identifier = i.supplier_id WHERE i.stock_threshold > 100 GROUP BY s.official_supplier_business_name;",
        "GeneratedQuery": "SELECT suppliers.name, SUM(products.stock) as total\\_stock\nFROM products suppliers\nWHERE suppliers.stock > 100\nGROUP BY suppliers.name;\n\nNote: The schema does not include a \"suppliers\" table, so I assumed that \"supplier\" is a typo and it refers to the \"products\" table in the schema. If this is incorrect, then the SQL statement above is not applicable to the given schema.",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "What are the exclusive coupon codes assigned to customers in the loyalty program at the platinum level?",
        "Query": "SELECT exclusive_coupon_codes_assigned FROM customers_loyalty_program WHERE loyalty_program_tier_level = 'Platinum'",
        "GeneratedQuery": "SELECT DISTINCT coupon_code\nFROM orders\nWHERE user\\_id IN (\n    SELECT id\n    FROM users\n    WHERE level = 'platinum'\n) AND coupon\\_code IS NOT NULL;",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "What is the average total price of carts that have a discounted total price greater than 100 and a cart status of 'Checked Out'?",
        "Query": "SELECT AVG(discounted_total_price) FROM cart WHERE discounted_total_price > 100 AND cart_status = 'Checked Out'",
        "GeneratedQuery": "SELECT AVG(amount)\nFROM orders\nWHERE amount > 100 AND EXISTS (\n    SELECT 1\n    FROM (\n        SELECT user\\_id, SUM(price) as total\\_price\n        FROM orders o\n        JOIN products p ON o.id = p.id\n        WHERE p.price < (\n            SELECT price FROM products WHERE id = p.id AND name = 'discounted\\_name'",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "Get the campaign name, target audience, and total price for all campaigns where the campaign type is 'email' and the cart status is 'checkedout'.",
        "Query": "SELECT c.campaign_name, c.target_audience, ct.total_price FROM campaigns c JOIN cart ct ON c.campaign_id = ct.fk_product_id WHERE c.campaign_type = 'email' AND ct.cart_status = 'checkedout'",
        "GeneratedQuery": "SELECT campaigns.name AS campaign\\_name, campaigns.target\\_audience, SUM(orders.amount) AS total\\_price\nFROM campaigns\nJOIN orders ON campaigns.id = orders.campaign\\_id\nWHERE campaigns.type = 'email' AND orders.cart\\_status = 'checkedout'\nGROUP BY campaigns.name, campaigns.target\\_audience;",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "Retrieve the total amount and delivery date of orders that were shipped after '2023-01-01' and have a discount applied greater than 0.",
        "Query": "SELECT total_amount, delivery_date FROM orders WHERE shipping_date > '2023-01-01' AND discount_applied > 0;",
        "GeneratedQuery": "SELECT SUM(amount) as total\\_amount, date\nFROM orders\nWHERE date > '2023-01-01' AND amount != price;",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "Retrieve the shipping details of all orders that have a budget greater than $10,000 and list the supplier details of the product shipped.",
        "Query": "SELECT sh.id, sh.fk_order_id, sh.estimated_delivery, sh.shipped_date, sh.shipping_cost, sh.shipping_address, sh.shipping_city, sh.shipping_state, sh.shipping_zipcode, sh.shipping_country, sh.shipping_status, sh.tracking_number, sh.carrier, s.supplier_unique_identifier, s.total_number_of_products_supplied, s.average_supplier_rating, s.official_supplier_business_name, s.registered_business_address, s.primary_contact_person_name, s.primary_contact_phone_number, s.primary_contact_email_address, s.supplier_country_of_operation, s.supplier_tax_identification_number, s.preferred_payment_terms_description FROM shipping sh JOIN campaigns c ON sh.fk_order_id = c.campaign_id JOIN suppliers s ON c.campaign_id = s.supplier_unique_identifier WHERE c.budget > 10000;",
        "GeneratedQuery": "SELECT o.id, u.name AS shipper\\_name, u.email AS shipper\\_email, p.name AS product\\_name, p.price AS product\\_price\nFROM orders o\nJOIN users u ON u.id = o.user\\_id\nJOIN products p ON p.id = o.id\nWHERE o.amount > 10000;",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "What are the details of suppliers from the United States who supplied products for orders with a total amount greater than 500?",
        "Query": "SELECT s.* FROM suppliers s JOIN orders o ON s.supplier_unique_identifier = o.campaign_id JOIN shipping sh ON o.order_id = sh.fk_order_id WHERE sh.shipping_country = 'United States' AND o.total_amount > 500",
        "GeneratedQuery": "SELECT users.id, users.name, users.age, users.email\nFROM users\nJOIN orders ON users.id = orders.user\\_id\nJOIN (\n    SELECT order\\_id\n    FROM order\\_items\n    GROUP BY order\\_id\n    HAVING SUM(quantity \\* price) > 500\n) as subquery ON orders.id = subquery.order\\_id\nWHERE users.country",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "What are the order IDs, order dates, and shipping addresses of orders for which refunds have been initiated, along with the corresponding refund amounts and return conditions, for customers who have not opened emails and have a review rating of 5 in their events?",
        "Query": "SELECT o.order_id, o.order_date, o.shipping_address_street, o.shipping_address_city, o.shipping_address_state, o.shipping_address_country, o.shipping_address_postalcode, rr.refund_amount, rr.return_condition FROM orders o JOIN refunds_returns rr ON o.order_id = rr.fk_order_id JOIN events e ON o.order_id = e.order_id WHERE e.email_opened = false AND e.review_rating = 5",
        "GeneratedQuery": "SELECT orders.id, orders.date, users.email as shipping\\_address, refunds.amount, refunds.condition\nFROM orders\nJOIN users ON orders.user\\_id = users.id\nLEFT JOIN (\n    SELECT events.user\\_id, events.amount AS refund\\_amount, events.condition AS return\\_condition\n    FROM events\n    WHERE events.type = 'refund'\n) AS refunds ON orders.user\\_id",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "Get the product details of products with available stock quantity greater than 50 and estimated replenishment date within the next 7 days",
        "Query": "SELECT * FROM products WHERE available_stock_quantity_in_units > 50 AND estimated_replenishment_date BETWEEN CURRENT_DATE AND CURRENT_DATE + INTERVAL '7 days'",
        "GeneratedQuery": "SELECT * FROM products\nWHERE stock > 50 AND date < NOW() + INTERVAL 7 DAY;",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "How many devices have a device_type of mobile and device_platform of android?",
        "Query": "SELECT COUNT(device_type) FROM events WHERE device_type = 'mobile' AND device_platform = 'android'",
        "GeneratedQuery": "I'm sorry for the confusion, but the schema provided does not include a table or column related to \"device_type\" or \"device_platform\". Please make sure to provide an accurate schema for me to generate the correct SQL statement.",
        "ExecutionStatus": "Error",
        "ErrorMessage": "Invalid SQL syntax"
    },
    {
        "NL": "Retrieve the total number of products supplied by each supplier along with their average rating.",
        "Query": "SELECT total_number_of_products_supplied, average_supplier_rating FROM suppliers;",
        "GeneratedQuery": "SELECT suppliers.id, COUNT(products.id) as total_products, AVG(ratings.rating) as average_rating\nFROM (\n    SELECT user\\_id as id, SUM(amount) as supplied\n    FROM orders\n    GROUP BY user\\_id\n) as suppliers\nLEFT JOIN users on suppliers.id = users.id\nLEFT JOIN (\n    SELECT product\\_id, AVG(rating) as rating",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "Find the average total transaction amount for each order that has a review with a star rating of 5.",
        "Query": "SELECT o.order_id, AVG(t.total_transaction_amount) AS average_transaction_amount FROM orders o JOIN transactions_and_payments t ON o.order_id = t.linked_order_reference_identifier JOIN product_reviews_and_ratings r ON o.order_id = r.referenced_product_identifier WHERE r.submitted_review_star_rating = 5 GROUP BY o.order_id;",
        "GeneratedQuery": "SELECT AVG(o.amount)\nFROM orders o\nJOIN (\n    SELECT order\\_id\n    FROM reviews\n    WHERE star\\_rating = 5\n) r ON o.id = r.order\\_id;",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "Find the loyalty program tier and total spent for all customers who have ever purchased a product from the 'Electronics' category and have a lifetime loyalty points balance greater than 1000",
        "Query": "SELECT T1.loyalty_program_tier_level, SUM(T2.total_price) FROM customers_loyalty_program AS T1 INNER JOIN order_items AS T2 ON T1.associated_customer_reference_id = T2.order_id INNER JOIN products AS T3 ON T2.product_id = T3.unique_product_identifier WHERE T3.product_category_primary = 'Electronics' AND T1.lifetime_loyalty_points_earned > 1000 GROUP BY T1.loyalty_program_tier_level",
        "GeneratedQuery": "SELECT u.id, u.name, \n       CASE \n           WHEN SUM(o.amount) BETWEEN 0 AND 999 THEN 'Bronze'\n           WHEN SUM(o.amount) BETWEEN 1000 AND 2999 THEN 'Silver'\n           ELSE 'Gold'\n       END AS loyalty_tier,\n       SUM(o.",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "Get the count of customers from the customerinfo table who have more than 100 loyalty points and the average spent per order is greater than 1000.",
        "Query": "SELECT COUNT(person_customer_id) FROM customerinfo WHERE person_loyalty_points > 100 AND preferences_avg_spent_per_order > 1000;",
        "GeneratedQuery": "WITH customer\\_spending AS (\nSELECT user\\_id, AVG(amount) as avg\\_spent\nFROM orders\nGROUP BY user\\_id\n)\n\nSELECT COUNT(*)\nFROM users\nWHERE id IN (\nSELECT user\\_id\nFROM customer\\_spending\nWHERE avg\\_spent > 1000\n)\nAND age > 100;\n\nNote: There isn't a customerinfo table or loyalty",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "What are the review ratings, customer review submission dates and review approval moderation statuses for all reviews with helpful votes received greater than 10?",
        "Query": "SELECT submitted_review_star_rating, customer_review_submission_date, review_approval_moderation_status FROM product_reviews_and_ratings WHERE number_of_helpful_votes_received > 10",
        "GeneratedQuery": "SELECT rating, submission\\_date, approval\\_status\nFROM reviews\nWHERE helpful\\_votes > 10;\n\nNote: Based on the provided schema, there is no \"reviews\" table mentioned in the query. Assuming that there is a \"reviews\" table that includes the required fields (rating, submission\\_date, approval\\_status, and helpful\\_votes). If the table name is different, please replace \"reviews\" with the correct table name.",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "Find all suppliers based in 'United States' with an average supplier rating above 4.5.",
        "Query": "SELECT official_supplier_business_name, average_supplier_rating FROM suppliers WHERE supplier_country_of_operation = 'United States' AND average_supplier_rating > 4.5;",
        "GeneratedQuery": "I'm sorry for the confusion, but the schema you provided does not include a table or column for supplier ratings. I need the correct schema to generate an accurate SQL query.\n\nHowever, I can show you how the query would look like if there was a `suppliers` table with `rating` column:\n\n```sql\nSELECT *\nFROM suppliers\nWHERE country = 'United States' AND rating > 4.5;\n```",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "What are the reviews for products with a high aggregate customer review rating and what is the shipping status for orders of these products?",
        "Query": "SELECT T1.textual_review_feedback, T2.shipping_status FROM product_reviews_and_ratings AS T1 INNER JOIN products AS T3 ON T1.referenced_product_identifier = T3.unique_product_identifier INNER JOIN shipping AS T2 ON T2.fk_order_id = T1.review_unique_identifier WHERE T3.aggregate_customer_review_rating > 4",
        "GeneratedQuery": "SELECT p.name, AVG(r.rating) as average\\_review, o.shipping\\_status\nFROM orders o\nJOIN users u ON u.id = o.user\\_id\nJOIN products p ON p.id = o.product\\_id\nJOIN reviews r ON r.product\\_id = p.id\nWHERE r.rating IS NOT NULL\nGROUP BY p.name, o.shipping\\_status\nHAVING average",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "Find the average loyalty points earned by customers who have active subscriptions and are premium members.",
        "Query": "SELECT AVG(person_loyalty_points) FROM customerinfo WHERE account_has_active_subscription = TRUE AND person_is_premium = TRUE",
        "GeneratedQuery": "WITH premium\\_users AS (\nSELECT u.id\nFROM users u\nWHERE u.name IN ('Premium Member 1', 'Premium Member 2', 'Premium Member 3')\n),\nactive\\_subscriptions AS (\nSELECT o.user\\_id\nFROM orders o\nWHERE o.date > CURDATE()\n)\nSELECT AVG(lp)\nFROM (\nSELECT u.id, SUM(p.price",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "Find the total number of products supplied by the supplier with the highest average rating, along with the supplier's official business name.",
        "Query": "SELECT s.total_number_of_products_supplied, s.official_supplier_business_name FROM suppliers s ORDER BY s.average_supplier_rating DESC LIMIT 1;",
        "GeneratedQuery": "SELECT COUNT(products.id) as total_products, users.name as supplier\\_name\nFROM products\nJOIN orders ON products.id = orders.product\\_id\nJOIN users ON orders.user\\_id = users.id\nGROUP BY users.name\nORDER BY AVG(orders.amount) DESC\nLIMIT 1;",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "List the total transaction amount and corresponding customer reference for transactions that are flagged as fraudulent.",
        "Query": "SELECT total_transaction_amount, corresponding_customer_reference_identifier FROM transactions_and_payments WHERE is_transaction_fraudulent = TRUE;",
        "GeneratedQuery": "SELECT SUM(amount) AS total\\_transaction\\_amount, orders.user\\_id AS customer\\_reference\nFROM orders\nWHERE orders.id IN (\n    SELECT order\\_id\n    FROM fraudulent\\_transactions\n)\nGROUP BY orders.user\\_id;",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "Find the total transaction amount for customers who are eligible for special promotions and have made transactions with a total transaction amount greater than 1000.",
        "Query": "SELECT SUM(t.total_transaction_amount) FROM transactions_and_payments t JOIN customers_loyalty_program c ON t.corresponding_customer_reference_identifier = c.associated_customer_reference_id WHERE c.eligible_for_special_promotions = TRUE AND t.total_transaction_amount > 1000",
        "GeneratedQuery": "SELECT SUM(amount)\nFROM orders\nWHERE user\\_id IN (\n    SELECT id\n    FROM users\n    WHERE age >= 18 AND email LIKE '%special\\_promotion%'\n)\nGROUP BY user\\_id\nHAVING SUM(amount) > 1000;",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "Get the total number of verified reviews and the aggregate customer review rating for the product with the highest rating.",
        "Query": "SELECT total_number_of_verified_reviews, aggregate_customer_review_rating FROM products ORDER BY aggregate_customer_review_rating DESC LIMIT 1;",
        "GeneratedQuery": "I'm sorry for the confusion, but the schema you provided does not include a table for reviews or any information about whether a customer's review is verified or the rating they gave. In order to generate the SQL query, I need to have the appropriate schema.\n\nHowever, assuming there is a table called `reviews` with columns `product_id`, `verified`, and `rating`, here's the SQL query:\n\n```sql\nSELECT COUNT(*)",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "Find the total number of reviews submitted by premium customers.",
        "Query": "SELECT COUNT(*) FROM product_reviews_and_ratings pr JOIN customerinfo ci ON pr.reviewing_customer_identifier = ci.person_customer_id WHERE ci.person_is_premium = TRUE;",
        "GeneratedQuery": "SELECT COUNT(\\*)\nFROM orders\nWHERE user\\_id IN (\n    SELECT id\n    FROM users\n    WHERE age > 60\n)",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "Find the average sentiment score of reviews for products that have received more than 10 helpful votes and are verified.",
        "Query": "SELECT AVG(sentiment_analysis_score) FROM product_reviews_and_ratings WHERE verification_status_of_reviewer = true AND number_of_helpful_votes_received > 10;",
        "GeneratedQuery": "SELECT AVG(reviews.sentiment_score)\nFROM products\nJOIN reviews ON products.id = reviews.product_id\nWHERE reviews.helpful_votes > 10 AND products.verified = true;",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "What is the campaign name and the budget for the campaign with campaign_id 1?",
        "Query": "SELECT T1.campaign_name, T1.budget FROM campaigns AS T1 INNER JOIN events AS T2 ON T1.campaign_id = T2.order_id WHERE T1.campaign_id = 1;",
        "GeneratedQuery": "SELECT c.name, c.budget\nFROM campaigns AS c\nWHERE c.id = 1;\n\nNote: Based on the provided schema, there is no table or column related to the term \"campaign\". I assumed the existence of a \"campaigns\" table with \"name\" and \"budget\" columns.",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "Find all orders where shipping status is 'shipped' and order status is 'delivered' along with shipping details.",
        "Query": "SELECT o.*, s.* FROM orders o JOIN shipping s ON o.order_id = s.fk_order_id WHERE s.shipping_status = 'shipped' AND o.order_status = 'delivered'",
        "GeneratedQuery": "SELECT orders.id, orders.user\\_id, orders.amount, orders.date, shipping.shipping\\_status, shipping.details\nFROM orders\nJOIN (\n    SELECT shipment\\_id AS id, shipping\\_status, shipping\\_details\n    FROM shipments\n    WHERE shipping\\_status = 'shipped'\n) AS shipping ON orders.id = shipping.id;",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "List the names of products purchased by customers who are eligible for special promotions and have a loyalty tier level of 'Silver' or higher.",
        "Query": "SELECT DISTINCT oi.product_name FROM order_items oi JOIN customers_loyalty_program clp ON oi.order_id = clp.associated_customer_reference_id WHERE clp.eligible_for_special_promotions = TRUE AND clp.loyalty_program_tier_level IN ('Silver', 'Gold', 'Platinum')",
        "GeneratedQuery": "SELECT products.name\nFROM products\nJOIN orders ON products.id = orders.product_id\nJOIN users ON orders.user\\_id = users.id\nWHERE users.age >= 18 AND users.email LIKE '%vip@example.com' AND users.loyalty\\_tier >= 2;",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "Find the top 5 customers who have made the highest total cart value in events, considering only those with an active subscription and their last order was made within the last 6 months, and also include the product categories they frequently purchase.",
        "Query": "SELECT ci.person_first_name, ci.person_last_name, ci.preferences_favorite_category, SUM(e.cart_value) AS total_cart_value FROM events e JOIN customerinfo ci ON e.person_customer_id = ci.person_customer_id JOIN products p ON e.order_item_id = p.unique_product_identifier WHERE ci.account_has_active_subscription = true AND ci.preferences_last_order_date >= current_date - INTERVAL '6 months' GROUP BY ci.person_first_name, ci.person_last_name, ci.preferences_favorite_category ORDER BY total_cart_value DESC LIMIT 5;",
        "GeneratedQuery": "SELECT u.name, SUM(o.amount) as total\\_cart\\_value,\nGROUP\\_CONCAT(p.name) as product\\_categories\nFROM users u\nJOIN orders o ON u.id = o.user\\_id\nJOIN products p ON o.id = p.order\\_id\nWHERE u.active\\_subscription = true AND o.date >= DATE\\_SUB(CURRENT\\_DATE, INTERVAL 6 MONTH)",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "Find all the campaigns that have a budget greater than 1000 and have impressions greater than 1000.",
        "Query": "SELECT * FROM campaigns WHERE budget > 1000 AND impressions > 1000",
        "GeneratedQuery": "I'm sorry for the confusion, but the schema provided doesn't seem to include a \"campaigns\" table, which is mentioned in your query. Therefore, I cannot generate a valid SQL statement based on the given schema. If you could provide the correct schema or modify the query to match the schema, I would be happy to help.",
        "ExecutionStatus": "Error",
        "ErrorMessage": "Invalid SQL syntax"
    },
    {
        "NL": "Retrieve the average number of edits made to reviews for customers who have an engagement score above 8, have submitted reviews that contain multimedia content, and those reviews were flagged as inappropriate. Also, include the count of such reviews for each customer and filter the results to only include customers who have redeemed more than 100 loyalty points. Further, sort the results by the total number of edits made in descending order.",
        "Query": "SELECT pr.reviewing_customer_identifier, AVG(pr.total_number_of_edits_made) AS average_edits, COUNT(pr.review_unique_identifier) AS review_count FROM product_reviews_and_ratings pr JOIN customers_loyalty_program clp ON pr.reviewing_customer_identifier = clp.associated_customer_reference_id WHERE clp.customer_feedback_engagement_score > 8 AND pr.contains_multimedia_content = true AND pr.flagged_as_inappropriate = true AND clp.lifetime_loyalty_points_redeemed > 100 GROUP BY pr.reviewing_customer_identifier ORDER BY average_edits DESC;",
        "GeneratedQuery": "SELECT u.id, AVG(o.amount) as avg\\_edits, COUNT(o.id) as num\\_reviews\nFROM users u\nJOIN orders o ON u.id = o.user\\_id\nWHERE u.age > 8 AND o.amount IS NOT NULL AND u.email LIKE '%multimedia%' AND o.date IN (SELECT date FROM flags WHERE flag = 'inappropriate')\nGROUP BY u.",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "What are the product names and quantities of all order items with a price per unit greater than $50?",
        "Query": "SELECT product_name, quantity FROM order_items WHERE price_per_unit > 50;",
        "GeneratedQuery": "SELECT products.name, SUM(products.stock) as quantity\nFROM products\nJOIN orders ON products.id = orders.product\\_id\nJOIN users ON orders.user\\_id = users.id\nWHERE products.price > 50\nGROUP BY products.name;",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "Get the total transaction amount, payment method used, and transaction date and time for transactions that occurred within the last 30 days and corresponding order status is 'delivered', and not cancelled or pending. The transaction method used should be either 'Credit Card' or 'PayPal', and the total transaction amount should be greater than $100.00.",
        "Query": "SELECT T1.total_transaction_amount, T1.payment_method_used, T1.transaction_date_and_time FROM transactions_and_payments AS T1 INNER JOIN orders AS T2 ON T1.linked_order_reference_identifier = T2.order_id WHERE T1.transaction_date_and_time >= NOW() - INTERVAL '30 days' AND T2.order_status = 'delivered' AND T2.order_status NOT IN ('cancelled', 'pending') AND T1.payment_method_used IN ('Credit Card', 'PayPal') AND T1.total_transaction_amount > 100.00",
        "GeneratedQuery": "SELECT SUM(amount) as total\\_transaction\\_amount, \n       'Credit Card' as payment\\_method, \n       date as transaction\\_date\\_time, \n       'delivered' as order\\_status\nFROM orders\nJOIN users ON orders.user\\_id = users.id\nWHERE date >= CURDATE() - INTERVAL 30 DAY \n  AND status = 'delivered' \n  AND",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "Retrieve the total order value for each customer who has made at least one purchase, along with the average review rating for products in their orders, excluding those customers whose reviews have been flagged as inappropriate and considering only verified reviewers. Additionally, filter the results to show only those customers who have spent more than $500 in total and include the city of their last delivery.",
        "Query": "SELECT o.person_customer_id, SUM(oi.total_price) AS total_order_value, AVG(prar.submitted_review_star_rating) AS avg_review_rating, o.shipping_address_city FROM orders o JOIN order_items oi ON o.order_id = oi.order_id LEFT JOIN product_reviews_and_ratings prar ON oi.product_id = prar.referenced_product_identifier WHERE prar.verification_status_of_reviewer = TRUE AND prar.flagged_as_inappropriate = FALSE GROUP BY o.person_customer_id, o.shipping_address_city HAVING SUM(oi.total_price) > 500",
        "GeneratedQuery": "SELECT u.id, u.name, SUM(o.amount) as total\\_value, AVG(r.rating) as avg\\_rating, ld.city\nFROM users u\nJOIN orders o ON u.id = o.user\\_id\nJOIN (\n    SELECT order\\_id, product\\_id, rating\n    FROM reviews r\n    WHERE r.verified = true AND r.flagged = false\n) r ON o",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "Find all the customers who have placed orders with a total amount greater than $100 and have an active subscription.",
        "Query": "SELECT DISTINCT ci.person_customer_id FROM orders o INNER JOIN customerinfo ci ON o.person_customer_id = ci.person_customer_id WHERE o.total_amount > 100 AND ci.account_has_active_subscription = TRUE;",
        "GeneratedQuery": "SELECT users.\\* \nFROM users \nJOIN orders ON users.id = orders.user\\_id \nWHERE orders.amount > 100 AND users.id IN (SELECT user\\_id FROM subscriptions WHERE status = 'active');",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "Get the total amount and discount applied for all orders placed in the last month.",
        "Query": "SELECT total_amount, discount_applied FROM orders WHERE order_date >= NOW() - INTERVAL '1 month'",
        "GeneratedQuery": "SELECT SUM(amount) as total\\_amount, 0 as discount\\_applied\nFROM orders\nWHERE date >= DATE\\_SUB(CURRENT\\_DATE, INTERVAL 1 MONTH);",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "List all campaigns with an end date in the current year that have a budget greater than the actual spent.",
        "Query": "SELECT campaign_name FROM campaigns WHERE EXTRACT(YEAR FROM end_date) = EXTRACT(YEAR FROM CURRENT_DATE) AND budget > actual_spent",
        "GeneratedQuery": "SELECT * FROM campaigns\nWHERE YEAR(end\\_date) = YEAR(CURRENT\\_DATE()) AND budget > (\nSELECT SUM(amount) FROM orders\nWHERE orders.campaign\\_id = campaigns.id\n);",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "List the wishlist items for customers who have more than 100 loyalty points and are subscribed to the newsletter.",
        "Query": "SELECT w.product_name, w.fk_user_id, c.person_first_name, c.person_last_name FROM wishlist w JOIN customerinfo c ON w.fk_user_id = c.person_customer_id WHERE c.person_loyalty_points > 100 AND c.preferences_newsletter_subscription = true;",
        "GeneratedQuery": "SELECT p.id, p.name, p.price, p.stock\nFROM users u\nJOIN orders o ON u.id = o.user\\_id\nJOIN (\n    SELECT user\\_id\n    FROM orders\n    GROUP BY user\\_id\n    HAVING SUM(amount) > 100 AND EXISTS (\n        SELECT 1\n        FROM users\n        WHERE id = user\\_id AND email LI",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "What are the total revenue generated and cost per acquisition for each campaign status where the campaign type is 'online' and there is at least one order item with a matching product id in the order items table?",
        "Query": "SELECT c.campaign_status, SUM(c.revenue_generated), SUM(c.cost_per_acquisition) FROM campaigns c JOIN order_items o ON c.campaign_id = o.order_item_id WHERE c.campaign_type = 'online' GROUP BY c.campaign_status",
        "GeneratedQuery": "SELECT o.campaign\\_status, SUM(o.amount) AS total\\_revenue, COUNT(DISTINCT u.id) * avg(p.price) AS cost\\_per\\_acquisition\nFROM orders o\nJOIN users u ON o.user\\_id = u.id\nJOIN products p ON EXISTS (\n\tSELECT 1\n\tFROM order\\_items oi\n\tWHERE oi.order\\_id",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "Find the total loyalty points earned by customers who have made at least one order and are eligible for special promotions",
        "Query": "SELECT SUM(clp.lifetime_loyalty_points_earned) FROM customers_loyalty_program clp JOIN customerinfo ci ON clp.associated_customer_reference_id = ci.person_customer_id JOIN orders o ON ci.person_customer_id = o.person_customer_id WHERE clp.eligible_for_special_promotions = TRUE",
        "GeneratedQuery": "SELECT SUM(loyalty\\_points)\nFROM (\nSELECT users.id, SUM(products.price * orders.amount) AS loyalty\\_points\nFROM users\nJOIN orders ON users.id = orders.user\\_id\nJOIN products ON orders.id = products.order\\_id\nWHERE users.age >= 18 AND users.age < 65 AND users.email LIKE '%vip%'\nGROUP BY users.",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "What is the total number of customers who have active subscriptions and are premium?",
        "Query": "SELECT COUNT(person_customer_id) FROM customerinfo WHERE account_has_active_subscription = TRUE AND person_is_premium = TRUE",
        "GeneratedQuery": "WITH premium\\_users AS (\nSELECT COUNT(DISTINCT u.id)\nFROM users u\nJOIN orders o ON u.id = o.user\\_id\nWHERE u.age > 18 AND u.email LIKE '%premium%'\n),\nactive\\_subscriptions AS (\nSELECT COUNT(DISTINCT user\\_id)\nFROM orders\nWHERE amount > 0\n)\nSELECT LEAST(p",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "Retrieve the product display name and standard retail price of all featured products.",
        "Query": "SELECT product_display_name, standard_retail_price_including_tax FROM products WHERE featured_product_flag = TRUE;",
        "GeneratedQuery": "SELECT products.name AS \"product display name\", products.price AS \"standard retail price\"\nFROM products\nWHERE products.id IN (SELECT orders.product_id FROM orders WHERE orders.amount >= 100);",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "List all order items for a specific order identified by order_id 12345.",
        "Query": "SELECT * FROM order_items WHERE order_id = 12345;",
        "GeneratedQuery": "SELECT * FROM orders WHERE id = 12345;",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "Find the campaign name and total reviews made by customers who purchased products linked to the given campaign ID. Order the results by the total reviews made in descending order.",
        "Query": "SELECT T1.campaign_name, COUNT(T2.reviewing_customer_identifier) AS total_reviews FROM campaigns T1 INNER JOIN product_reviews_and_ratings T2 ON T1.campaign_id = T2.referenced_product_identifier GROUP BY T1.campaign_name ORDER BY total_reviews DESC;",
        "GeneratedQuery": "SELECT c.name, SUM(o.id) as total\\_reviews\nFROM orders o\nJOIN users u ON u.id = o.user\\_id\nJOIN campaigns c ON c.id = u.campaign\\_id\nWHERE c.id = ?\nGROUP BY c.name\nORDER BY total\\_reviews DESC;\n\nNote: The schema doesn't include a \"campaigns\" table, so I assumed there is one",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "Get the order details of customers who have made a purchase in the last 30 days and have loyalty points greater than 100.",
        "Query": "SELECT o.* FROM orders o INNER JOIN customerinfo ci ON o.person_customer_id = ci.person_customer_id WHERE o.order_date > NOW() - INTERVAL '30 day' AND ci.person_loyalty_points > 100;",
        "GeneratedQuery": "SELECT orders.id, users.name, orders.amount, orders.date\nFROM orders\nJOIN users ON orders.user\\_id = users.id\nWHERE orders.date >= CURDATE() - INTERVAL 30 DAY AND users.loyalty\\_points > 100;",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "Get the average total price of all the items in the cart and the average discount applied",
        "Query": "SELECT AVG(total_price) AS average_total_price, AVG(discount_applied) AS average_discount FROM cart",
        "GeneratedQuery": "SELECT AVG(o.amount) as \"average total price\", AVG(p.price) as \"average discount applied\"\nFROM orders o\nJOIN products p ON o.id = p.id;",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "What is the total refund amount for all refunds initiated by seller and customer?",
        "Query": "SELECT SUM(refund_amount) FROM refunds_returns WHERE refund_initiated_by = 'seller' OR refund_initiated_by = 'customer'",
        "GeneratedQuery": "SELECT SUM(amount) as total\\_refund\\_amount\nFROM orders\nWHERE amount < 0;",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "Show the quantity, last_updated, and supplier_id of products in inventory for products with a quantity greater than 50 and a stock_threshold of less than 20.",
        "Query": "SELECT quantity, last_updated, supplier_id FROM inventory WHERE quantity > 50 AND stock_threshold < 20",
        "GeneratedQuery": "SELECT stock as quantity, date as last\\_updated, supplier\\_id \nFROM products \nWHERE stock < 20 AND stock > 50;",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "Calculate the total loyalty points earned by customers from the last 30 days.",
        "Query": "SELECT SUM(associated_loyalty_points_earned) FROM transactions_and_payments WHERE transaction_date_and_time >= NOW() - INTERVAL '30 days';",
        "GeneratedQuery": "SELECT SUM(amount) AS total\\_loyalty\\_points\nFROM orders\nWHERE date >= NOW() - INTERVAL 30 DAY;",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "Find the total revenue generated and the number of conversions for campaigns that ended after January 1, 2023, and had a ROI greater than 200%",
        "Query": "SELECT SUM(revenue_generated) AS total_revenue, SUM(conversions) AS total_conversions FROM campaigns WHERE end_date > '2023-01-01' AND roi > 200;",
        "GeneratedQuery": "SELECT SUM(amount) AS total\\_revenue, COUNT(DISTINCT orders.id) AS conversions\nFROM orders\nJOIN users ON users.id = orders.user\\_id\nJOIN (\nSELECT user\\_id, SUM(amount) / SUM(products.price) AS roi\nFROM orders\nJOIN products ON orders.product\\_id = products.id\nWHERE date > '2023-01-0",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "Get the campaign name, campaign status, and the total refund amount for each campaign",
        "Query": "SELECT c.campaign_name, c.campaign_status, SUM(rr.refund_amount) AS total_refund FROM campaigns c JOIN refunds_returns rr ON c.campaign_id = rr.fk_order_id GROUP BY c.campaign_name, c.campaign_status",
        "GeneratedQuery": "SELECT campaigns.name, campaigns.status, SUM(refunds.amount) as total\\_refund\\_amount\nFROM campaigns\nJOIN orders ON campaigns.id = orders.campaign\\_id\nJOIN refunds ON orders.id = refunds.order\\_id\nGROUP BY campaigns.id, campaigns.name, campaigns.status;",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "Find all wishlist items that have a price at addition greater than 100",
        "Query": "SELECT * FROM wishlist WHERE price_at_addition > 100",
        "GeneratedQuery": "SELECT products.name\nFROM products\nWHERE products.price > 100 AND products.id IN (\n    SELECT order\\_items.product\\_id\n    FROM order\\_items\n)",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "Get the total amount of all orders that were created after the start date of a specific campaign with id 1.",
        "Query": "SELECT SUM(o.total_amount) FROM orders o JOIN campaigns c ON o.campaign_id = c.campaign_id WHERE c.campaign_id = 1 AND o.created_at > c.start_date",
        "GeneratedQuery": "SELECT SUM(amount)\nFROM orders\nWHERE date > (\n    SELECT date\n    FROM orders o\n    JOIN campaigns c ON o.user\\_id = c.user\\_id\n    WHERE c.id = 1\n    LIMIT 1\n);",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "Get the total refund amount, order item id, product name, item status, and standard retail price including tax for each refundable order item that has a total price greater than 100, and has a return period less than 30 days, and belongs to a customer who has a lifetime loyalty points earned greater than 1000, and has an anniversary reward voucher status as true, and order item's product belongs to a supplier with a minimum threshold for restocking greater than 50",
        "Query": "SELECT T3.refund_amount, T1.order_item_id, T1.product_name, T1.item_status, T2.standard_retail_price_including_tax FROM order_items AS T1 INNER JOIN products AS T2 ON T1.product_id = T2.unique_product_identifier INNER JOIN refunds_returns AS T3 ON T1.order_id = T3.fk_order_id AND T1.product_id = T3.fk_product_id INNER JOIN customers_loyalty_program AS T4 ON T3.fk_user_id = T4.associated_customer_reference_id WHERE T1.total_price > 100 AND T1.return_period < 30 AND T4.lifetime_loyalty_points_earned > 1000 AND T4.anniversary_reward_voucher_status IS TRUE AND T2.minimum_threshold_for_restocking > 50",
        "GeneratedQuery": "SELECT SUM(o.amount) AS total\\_refund\\_amount,\no.id AS order\\_item\\_id,\np.name AS product\\_name,\no.status AS item\\_status,\np.price \\* 1.05 AS retail\\_price\nFROM orders o\nJOIN users u ON o.user\\_id = u.id\nJOIN products p ON o.product\\_id = p.id\nJOIN suppliers s ON",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "What is the average restocking fee for returns that have been processed?",
        "Query": "SELECT AVG(restocking_fee) FROM refunds_returns WHERE processed_date IS NOT NULL",
        "GeneratedQuery": "SELECT AVG(p.price) AS \"average\\_restocking\\_fee\"\nFROM orders o\nJOIN products p ON o.id = p.id\nWHERE o.amount < 0;",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "Get the total quantity of products in the inventory that have a stock threshold greater than 50 and a safety stock less than 20.",
        "Query": "SELECT SUM(quantity) FROM inventory WHERE stock_threshold > 50 AND safety_stock < 20;",
        "GeneratedQuery": "SELECT SUM(stock) \nFROM products \nWHERE stock > 50 AND price < 20;",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "Find the customer information, including their loyalty points and registration date, along with the transaction details, including the transaction date and payment method, and the inventory details, including the quantity and last restock date, for customers who have purchased a product with a quantity greater than 20 and a payment method of credit card, and also check if the customer has a valid subscription and the transaction amount is greater than 50.",
        "Query": "SELECT T1.person_first_name, T1.person_last_name, T1.person_loyalty_points, T1.person_registration_date, T2.linked_order_reference_identifier, T2.transaction_unique_identifier, T2.transaction_date_and_time, T2.payment_method_used, T3.quantity, T3.last_restock_date FROM customerinfo AS T1 INNER JOIN transactions_and_payments AS T2 ON T2.corresponding_customer_reference_identifier = T1.person_customer_id INNER JOIN inventory AS T3 ON T3.referenced_product_id = T2.linked_order_reference_identifier WHERE T1.account_has_active_subscription = TRUE AND T2.total_transaction_amount > 50 AND T2.payment_method_used = 'Credit Card' AND T3.quantity > 20",
        "GeneratedQuery": "SELECT u.id, u.name, u.age, u.email, SUM(o.amount) as loyalty\\_points, u.date as registration\\_date, o.date as transaction\\_date, o.payment\\_method, p.quantity, p.last\\_restock\\_date\nFROM users u\nJOIN orders o ON u.id = o.user\\_id\nJOIN products p ON o.id = p.order\\_id",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "Find the total amount redeemed by customers who are eligible for special promotions.",
        "Query": "SELECT SUM(total_discount_amount_redeemed) FROM customers_loyalty_program WHERE eligible_for_special_promotions = TRUE;",
        "GeneratedQuery": "SELECT SUM(amount)\nFROM orders\nWHERE user\\_id IN (\n    SELECT id\n    FROM users\n    WHERE age < 25 OR age > 60\n);",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "Retrieve the total number of loyal customers who have made at least one transaction and have a transaction amount greater than 100.",
        "Query": "SELECT COUNT(DISTINCT ci.person_customer_id) FROM customerinfo ci JOIN transactions_and_payments tp ON ci.person_customer_id = tp.corresponding_customer_reference_identifier WHERE ci.person_loyalty_points > 0 AND tp.final_billed_amount > 100;",
        "GeneratedQuery": "SELECT COUNT(DISTINCT u.id)\nFROM users u\nJOIN orders o ON u.id = o.user\\_id\nWHERE o.amount > 100;",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "Find out how many products are in stock and what is their current stock status?",
        "Query": "SELECT quantity , stock_status FROM inventory WHERE stock_status = 'In Stock'",
        "GeneratedQuery": "SELECT COUNT(*), SUM(stock) AS current\\_stock\\_status\nFROM products;",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "Find the total number of unique customers who have both reviewed a product and completed a survey.",
        "Query": "SELECT COUNT(DISTINCT person_customer_id) FROM events WHERE event_type = 'review' INTERSECT SELECT COUNT(DISTINCT person_customer_id) FROM events WHERE survey_completed = true;",
        "GeneratedQuery": "SELECT COUNT(DISTINCT u.id)\nFROM users u\nJOIN orders o ON u.id = o.user\\_id\nWHERE o.id IN (\n    SELECT order\\_id\n    FROM product\\_reviews\n) AND u.id IN (\n    SELECT user\\_id\n    FROM surveys\n)",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "What is the average amount spent by customers in the last 365 days, and what is their average lifetime loyalty points earned?",
        "Query": "SELECT AVG(total_amount), AVG(lifetime_loyalty_points_earned) FROM orders JOIN customers_loyalty_program ON orders.person_customer_id = customers_loyalty_program.associated_customer_reference_id WHERE orders.order_date > NOW() - INTERVAL '365 day'",
        "GeneratedQuery": "SELECT AVG(o.amount) AS avg\\_amount, AVG(l.total\\_points) AS avg\\_lifetime\\_points\nFROM orders o\nJOIN (\n    SELECT user\\_id, SUM(amount) AS total\\_points\n    FROM orders\n    WHERE date >= NOW() - INTERVAL 365 DAY\n    GROUP BY user\\_id\n) l ON o.user\\_id = l.user",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "Find the names of products, their corresponding categories and the names of suppliers who supply them, the products being fragile, the suppliers have an average rating of more than 3, the products have a net weight of less than 1 kilogram, and the quantity in stock is more than 50. Also, sort the results by the product names in descending order.",
        "Query": "SELECT T1.product_display_name, T1.product_category_primary, T3.official_supplier_business_name FROM products AS T1 INNER JOIN inventory AS T2 ON T1.unique_product_identifier = T2.referenced_product_id INNER JOIN suppliers AS T3 ON T2.supplier_id = T3.supplier_unique_identifier WHERE T1.fragile_item_indicator = TRUE AND T3.average_supplier_rating > 3 AND T1.net_weight_in_kilograms < 1 AND T2.quantity > 50 ORDER BY T1.product_display_name DESC",
        "GeneratedQuery": "SELECT p.name AS product\\_name, c.name AS category\\_name, s.name AS supplier\\_name\nFROM products p\nJOIN categories c ON p.category\\_id = c.id\nJOIN suppliers s ON p.supplier\\_id = s.id\nJOIN product\\_properties pp ON p.id = pp.product\\_id\nJOIN ratings r ON s.id = r.supplier\\_id\nWHERE pp.property =",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    },
    {
        "NL": "Get the transaction unique identifier, transaction date and time, and payment method used for transactions with a total transaction amount greater than 1000 and a refund status of false.",
        "Query": "SELECT transaction_unique_identifier, transaction_date_and_time, payment_method_used FROM transactions_and_payments WHERE total_transaction_amount > 1000 AND refund_status = FALSE",
        "GeneratedQuery": "SELECT orders.id, orders.date\nFROM orders\nWHERE orders.amount > 1000 AND orders.refund = false;",
        "ExecutionStatus": "Success",
        "Results": "Syntax check passed"
    }
]